<?xml version="1.0" encoding="UTF-8"?>
<sci:data xmlns:sci="http://www.SciTegic.com/" object="SciTegic.Protocol.1" format="8.0.0">
	<sci:dbitem>
		<sci:component name="Initial NET prediction" version="2">
			<sci:arg name="Tempfiles" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
				<sci:help>&lt;p&gt;A comma delimited list of global properties, each of which will automatically hold the name of a file in the job&apos;s temporary folder, whose name is guaranteed to be unique.&lt;/p&gt;

&lt;p&gt;For each global name, an additional global is created (with the suffix &lt;i&gt;_Filename&lt;/i&gt;) that hold just the leaf file name of the temporary file.&lt;/p&gt;</sci:help>
			</sci:arg>
			<sci:arg name="DeclareGlobal" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
				<sci:help>&lt;p&gt;Lists a set of properties (without the @) to create on the global property list for this protocol. Such properties can be accessed within the scope of this protocol and its descendent subprotocols.&lt;p/&gt;

&lt;p&gt;It is best practice to declare all global properties before use. Indeed, this practice is enforced in some contexts.&lt;/p&gt;

&lt;dl&gt;
&lt;dt&gt;&lt;b&gt;When a global property needs to be scoped to the whole protocol:&lt;/b&gt;&lt;/dt&gt;
&lt;dd&gt;List the new global property in the &lt;i&gt;DeclareGlobal&lt;/i&gt; parameter at the protocol level.&lt;/dd&gt;
&lt;br/&gt;
&lt;dt&gt;&lt;b&gt;To limit a global property to a subprotocol scope:&lt;/b&gt;&lt;/dt&gt;
&lt;dd&gt;List the property in the subprotocol&apos;s &lt;i&gt;DeclareLocal&lt;/i&gt; parameter.&lt;/dd&gt;

&lt;p&gt;This example declares 2 global properties:&lt;/p&gt;
&lt;pre&gt;
    g_tokenHash,g_assayIdentifier
&lt;/pre&gt;

&lt;p&gt;
To initialize the declared global value with a scalar value, use the syntax:
&lt;/p&gt;

&lt;p&gt;
&lt;i&gt;property-name&lt;/i&gt; := &lt;i&gt;value&lt;/i&gt;
&lt;/p&gt;
&lt;p&gt;
You can surround text string values with quotes to aid clarity. Values of &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; are handled as boolean values.
&lt;/p&gt;
&lt;p&gt;This example declares 3 global properties, and sets initial values on two of them:&lt;/p&gt;
&lt;pre&gt;
    g_counter := 0, g_location, g_geography:=&quot;APAC&quot;
&lt;/pre&gt;</sci:help>
			</sci:arg>
			<sci:arg name="Protocol Form" type="ProtocolType" required="false" visibility="visible" multi="false" uimpl="true">
				<sci:help>&lt;p&gt;The path to a protocol that will render an HTML user interface for this protocol.  This optional parameter is used by Web Port to provide a custom user interface for a protocol.&lt;/p&gt;</sci:help>
			</sci:arg>
			<sci:arg name="Advanced Options" type="GroupType" required="false" visibility="visible" multi="false" expanded="true" legalvalsenforced="false" uimpl="true">
				<sci:member>__PoolID</sci:member>
				<sci:member>Http Cookie Handling</sci:member>
				<sci:member>__NotificationProtocol</sci:member>
			</sci:arg>
			<sci:arg name="__PoolID" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
				<sci:help>&lt;p&gt;&lt;i&gt;__PoolID&lt;/i&gt; is a case insensitive string that can optionally be set to optimize the speed of execution for quick running protocols.  Multiple protocols with the same value for &lt;i&gt;__PoolID&lt;/i&gt; can share expensive resources such as database connections, Java VMs, memory, etc. reducing the execution time by 1 to 2 seconds per run.  This can give a large speed improvement to protocols that run in a few seconds such as web applications and interactive reports.  Longer running protocols will not see much benefit.  Generally, it is a good idea to use the same &lt;i&gt;__PoolID&lt;/i&gt; for all protocols within a single application such as an interactive report since many of the components, databases, and data structures will be similar.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;__PoolID&lt;/i&gt; can also be specified by the client when the protocol is launched.  If &lt;i&gt;__PoolID&lt;/i&gt; is specified both as a parameter by the client and as a parameter stored within the protocol, the client&apos;s value overrides the stored value.&lt;/p&gt;

&lt;p&gt;To disable pooling entirely for this particular protocol, set &lt;i&gt;__PoolID&lt;/i&gt; to &lt;b&gt;&amp;lt;Disable&amp;gt;&lt;/b&gt;&lt;/p&gt;</sci:help>
			</sci:arg>
			<sci:arg name="Http Cookie Handling" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
				<sci:help>&lt;p&gt;&lt;i&gt;Http Cookie Handling&lt;/i&gt; provides a mechanism to control the handling of Http cookies within components that access remote resources via Http and Https.  These include the &lt;a href=&quot;javascript:DoLink(&apos;{8A25024A-C274-485B-BB99-8570DCC4C075}&apos;)&quot;&gt;HTTP Connector&lt;/a&gt;, Data readers such as &lt;a href=&quot;javascript:DoLink(&apos;{8056E8AD-33EA-42BB-9099-EAB24C3D08E6}&apos;)&quot;&gt;Text Reader&lt;/a&gt;, &lt;a href=&quot;javascript:DoLink(&apos;{93C4D73F-0B4D-03F4-B0E3-D82C4FE04C6F}&apos;)&quot;&gt;XML Reader (Generic)&lt;/a&gt;, etc., and custom Java, Perl, and .Net components that use the available APIs for accessing remote servers.  By default, New Protocols will have this setting enabled and set to &quot;Protocol Scope&quot;.  This means that Http cookies obtained from a remote server within any component in the protocol or any of its subprotocols will be parsed and appropriately sent back on subsequent requests from the same component or any other component.   The handling of the cookies is based on the IETF standard as specified in &lt;a href=&quot;javascript:DoLink(&apos;http://tools.ietf.org/html/rfc6265&apos;)&quot;&gt;http://tools.ietf.org/html/rfc6265&lt;/a&gt;.  Setting the parameter to Disabled will prevent components from parsing and returning cookies to the remote servers.&lt;/p&gt;

&lt;p&gt;Persistence of cookies is not supported, so scoping of Http cookies is entirely within the context of a single protocol execution.&lt;/p&gt;

&lt;p&gt;Older protocols that do not have the &lt;i&gt;Http Cookie Handling&lt;/i&gt; parameter will behave as though it had been set to &quot;Disabled&quot;.  To enable cookie handling in these protocols, copy this parameter from a New Protocol to the older protocol and set the parameter as desired.&lt;/p&gt;</sci:help>
				<sci:legalval selected="true">Protocol Scoped</sci:legalval>
				<sci:legalval>Disabled</sci:legalval>
			</sci:arg>
			<sci:arg name="__NotificationProtocol" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
				<sci:help>&lt;p&gt;&lt;i&gt;__NotificationProtocol&lt;/i&gt; specifies the name or component ID (guid) of a protocol stored in the server&apos;s protocol database that will be executed when the current job completes. If your administrator has enabled notification protocols and depending on his or her preference, the notify protocol will either run as the anonymous user or as an admin specified user. The notification protocol receives several parameters that contain information about the original job:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;Notify_JobID&lt;/i&gt;: The job id of the execution
&lt;li&gt;&lt;i&gt;Notify_JobStatus&lt;/i&gt;: 
A description of the result of the job execution
&lt;li&gt;&lt;i&gt;Notify_JobStatusCode&lt;/i&gt;: The 
status code that for the result of the job execution.
	&lt;ul style=&quot;list-style-type:circle&quot;&gt;
	
&lt;li&gt;&lt;i&gt;5&lt;/i&gt;: Job was stopped by the client or administrator.
	&lt;li&gt;&lt;i&gt;6&lt;/i&gt;: 
Job completed normally with success.
	&lt;li&gt;&lt;i&gt;7&lt;/i&gt;: Job completed with an error.
	&lt;li&gt;&lt;i&gt;8&lt;/i&gt;: 
The process ID associated with the running job crashed or otherwise disappeared.
	&lt;li&gt;&lt;i&gt;9&lt;/i&gt;: 
Job failed to start.
	&lt;/ul&gt;
&lt;li&gt;&lt;i&gt;Notify_ProtocolName&lt;/i&gt;: The name of the protocol
&lt;li&gt;&lt;i&gt;Notify_ProtocolPath&lt;/i&gt;: 
The path of the protocol in the DB.  This field can be blank for protocols that were launched without 
saving to the database.
&lt;li&gt;&lt;i&gt;Notify_ProtocolLogName&lt;/i&gt;: The log name of the protocol.  
Is usually the same as ProtocolName, however this can be set by the client to a different name than the 
protocol.
&lt;li&gt;&lt;i&gt;Notify_RunHost&lt;/i&gt;: The name of the node where the protocol executed.
&lt;li&gt;&lt;i&gt;Notify_Username&lt;/i&gt;: 
The user that ran the job
&lt;/ul&gt;</sci:help>
			</sci:arg>
			<sci:arg name="Run On Grid" type="BoolType" required="false" visibility="visible" multi="false" uimpl="true">
				<sci:help>The Run On Grid parameter tells the server to run the protocol on the grid engine if the Pipeline Pilot server is configured to run with grid integration.</sci:help>
				<sci:member>Queue Name</sci:member>
				<sci:member>Grid Options</sci:member>
				<sci:legalval>True</sci:legalval>
				<sci:legalval selected="true">False</sci:legalval>
			</sci:arg>
			<sci:arg name="Queue Name" type="StringType" required="false" visibility="visible" multi="false" legalvalsenforced="false" uimpl="true">
				<sci:help>The Queue Name allows you to specify the name of the queue on the grid engine to submit the job to. Leave blank to specify the default queue.</sci:help>
				<sci:enabledscript>parameter(&apos;Run On Grid&apos;);</sci:enabledscript>
			</sci:arg>
			<sci:arg name="Grid Options" type="StringType" required="false" visibility="visible" multi="true" legalvalsenforced="false" uimpl="true">
				<sci:help>&lt;p&gt;This is an array of command line options to send to the Grid engine submit command.&lt;/p&gt;
&lt;p&gt;If you just include one line, whatever you enter will be sent &quot;as is&quot; to the submission command.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Just sending options directly to command line - PBS&lt;/b&gt;
&lt;p&gt;-l procs=16 -l walltime=08:00:00 -A PROJECTID&lt;/p&gt;
&lt;/br&gt;
&lt;p&gt;There are a number of parameters that Pipeline Pilot will translate to the correct command line options for whichever supported Grid Engine you are using.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Supported parameters&lt;/b&gt;
&lt;p&gt;Account=&amp;lt;Project/Account name&amp;gt;&lt;/p&gt;
&lt;p&gt;Maximum Execution Time=&amp;lt;DD:MM:SS&amp;gt; - LSF ignores seconds&lt;/p&gt;
&lt;p&gt;Number of Cores=&amp;lt;16&amp;gt;&lt;/p&gt;
&lt;p&gt;Parallel Environment=&amp;lt;The Parallel Environment to use&amp;gt; - Only needed for SGE&lt;/p&gt;
&lt;p&gt;Other=&amp;lt;Additional Parameters sent directly to submit command line&amp;gt;&lt;/p&gt;</sci:help>
				<sci:enabledscript>parameter(&apos;Run On Grid&apos;);</sci:enabledscript>
			</sci:arg>
			<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
				<sci:help>Component Attributes</sci:help>
				<sci:legalval>ComponentTakesInput</sci:legalval>
				<sci:legalval>ComponentReturnsPass</sci:legalval>
				<sci:legalval>ComponentReturnsFail</sci:legalval>
				<sci:legalval>ComponentRunsLocal</sci:legalval>
			</sci:arg>
			<sci:arg name="Reporting" type="GroupType" required="false" visibility="visible" multi="false" expanded="true" uimpl="true">
				<sci:help>This group contains parameters specific to protocols containing Reporting components.</sci:help>
				<sci:member>Reporting Stylesheet</sci:member>
			</sci:arg>
			<sci:arg name="Reporting Stylesheet" type="StylesheetType" required="false" visibility="visible" multi="false" expanded="true" uimpl="true">
				<sci:help>Specifies the name of a Stylesheet to be used by this protocol if any of the Reporting components have a Style selected in the &lt;i&gt;Format&lt;/i&gt; and &lt;i&gt;Position&lt;/i&gt; parameters.</sci:help>
				<sci:value>{25A23C6A-4EF0-45F2-8495-3E88896C6262}</sci:value>
			</sci:arg>
			<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
				<sci:legalval selected="true">Halt</sci:legalval>
				<sci:legalval>Fail</sci:legalval>
				<sci:legalval>Pass</sci:legalval>
			</sci:arg>
			<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
				<sci:legalval selected="true">Halt</sci:legalval>
				<sci:legalval>Fail</sci:legalval>
				<sci:legalval>Pass</sci:legalval>
			</sci:arg>
			<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
			<sci:arg name="WebExports" type="StringType" required="false" visibility="nevershow" multi="false" uimpl="true">
				<sci:help>&lt;p&gt;A comma delimited list of global properties which will be automatically 
exported if this protocol is published as a web service.&lt;/p&gt;

&lt;p&gt;Each global property in the list is created with an empty value at the start of the protocol run.&lt;/p&gt;</sci:help>
			</sci:arg>
			<sci:arg name="Keep Alive" type="BoolType" required="false" visibility="nevershow" multi="false" uimpl="true">
				<sci:help>&lt;p&gt;Specifies if the process where this protocol is run should stay around for later use.&lt;/p&gt;</sci:help>
				<sci:legalval selected="true">True</sci:legalval>
				<sci:legalval>False</sci:legalval>
			</sci:arg>
			<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>The user who registered this component.</sci:help>
				<sci:value>scitegic/coreutils</sci:value>
			</sci:arg>
			<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>The date this component was registered.</sci:help>
				<sci:value>Fri Feb 07 11:21:23 2020</sci:value>
			</sci:arg>
			<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>The server version when this component was registered</sci:help>
				<sci:value>18.1.0.1604</sci:value>
			</sci:arg>
			<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:value>Initial NET prediction</sci:value>
			</sci:arg>
			<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
				<sci:help>Protocol AutoLayout</sci:help>
				<sci:value>1</sci:value>
			</sci:arg>
			<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
				<sci:value>PROTOCOLNODE</sci:value>
			</sci:arg>
			<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
				<sci:help>Component Revision</sci:help>
				<sci:value>790</sci:value>
			</sci:arg>
			<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:value>{7B3502D7-FA57-4EB5-838B-FE6AB0BF0E69}</sci:value>
			</sci:arg>
			<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
				<sci:help>By Ref</sci:help>
				<sci:value>0</sci:value>
			</sci:arg>
			<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
				<sci:value>100</sci:value>
				<sci:value>Building protocols in Pipeline Pilot</sci:value>
				<sci:value>This is your help window for working with components and protocols in Pipeline Pilot.
&lt;BR&gt;&lt;BR&gt;
This window can display help about the protocol itself. You are currently viewing the default help text for a protocol. When you design and save a protocol, it is recommended that you change this text to specifically describe the protocol you have designed.
&lt;BR&gt;&lt;BR&gt;
This window also displays help text for individual components and their parameters. To see help for a component, select an item from the Components tab or from within the protocol workspace. To see help about a parameter of a component, select one from the Parameter tab.
&lt;BR&gt;&lt;BR&gt;
For more information, go to &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/getstart/getstart_intro.htm&apos;)&quot;&gt;Getting Started with Pipeline Pilot&lt;/a&gt;.</sci:value>
				<sci:value>None</sci:value>
				<sci:value/>
				<sci:value>None</sci:value>
				<sci:value/>
				<sci:value>None</sci:value>
				<sci:value/>
			</sci:arg>
			<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
			<sci:arg name="ProtocolScale2" type="LongType" required="false" visibility="nevershow" multi="false">
				<sci:help>Protocol Scale</sci:help>
				<sci:value>100</sci:value>
			</sci:arg>
			<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>Protocol Sticky Notes</sci:help>
			</sci:arg>
			<sci:arg name="Protocol Options" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>Protocol Options</sci:help>
				<sci:legalval>Owner Access Only</sci:legalval>
			</sci:arg>
			<sci:arg name="ResultFiles Options" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:value>Include JobDir Files</sci:value>
			</sci:arg>
			<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
				<sci:value>0</sci:value>
			</sci:arg>
			<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
				<sci:help>Local Component Identifier</sci:help>
				<sci:value>-1</sci:value>
			</sci:arg>
			<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:value>50 -50</sci:value>
			</sci:arg>
			<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>The original path within the database of this component.</sci:help>
				<sci:value>Components\Data Access and Manipulation\Utilities\Internals\Reference Components\New Protocol</sci:value>
			</sci:arg>
		</sci:component>
		<sci:protocol>
			<sci:data object="SciTegic.EvaluateExpression.1">
				<sci:component name="Custom Manipulator (PilotScript)" version="2">
					<sci:arg name="Expression" type="ExpressionType" required="true" visibility="visible" multi="false" expanded="true" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>Expression (or list of expressions separated by semi-colons) to evaluate.</sci:help>
						<sci:member>Initial Expression</sci:member>
						<sci:member>Final Expression</sci:member>
						<sci:member>Keep Calculated Properties</sci:member>
						<sci:value>@SuppressRVersionWarning  := true;</sci:value>
					</sci:arg>
					<sci:arg name="Initial Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>&lt;p&gt;
This expression is executed only the first time data passes into the component.
&lt;p/&gt; 
Since there is no data available at initialization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="Final Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>&lt;p&gt;
This expression is executed only at finalization (after the last data passes out of the component).
&lt;p/&gt; 
Since there is no data available at finalization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="Keep Calculated Properties" type="BoolType" required="true" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>Adds any properties calculated in this component to a data record&apos;s property list.</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval>ComponentTakesInput</sci:legalval>
						<sci:legalval>ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Custom Error Message</sci:help>
					</sci:arg>
					<sci:arg name="Do Screen" type="BoolType" required="false" visibility="nevershow" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>When TRUE, controls which exit port is used for
each data record by evaluating the final expression
(or only one) listed in the &quot;Expression&quot; parameter.
   -Pass (green) port when expression true
   -Fail (red) port when expression false</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="ExpressionVersion" type="LongType" required="false" visibility="nevershow" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>Version of expression parser to use.</sci:help>
						<sci:value>2</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Mon Jan 21 09:55:43 2008</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
						<sci:help>Automatically update the component display name when the &quot;Expression&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
						<sci:value>#displayName := trim(Parameter(&apos;Expression&apos;, 2));
if(strlength(#displayName) &gt; 0) then	
	/* Find the first line break */
	#nl := FindSubstring(#displayName, &quot;\r&quot;);
	if #nl &lt;= 0 then
		#nl := FindSubstring(#displayName, &quot;\n&quot;);
	end if;

	/* Keep the first line only */
	if (#nl &gt; 0) then
		StrErase(#displayName, #nl);
	end if;
	
	#displayName;
else
	&quot;&quot;;
end if;</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Custom Manipulator (PilotScript)</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>EXPRESSIONNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{0995D675-7EE2-432C-95DF-E91C14052B22}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>90 -95</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Applies a PilotScript expression to each data record
</sci:value>
						<sci:value>&lt;p&gt;PilotScript is the native scripting language in Pipeline Pilot.  It is based on PL/SQL and allows you to query or alter the properties on data records.  For example, the expression:

&lt;blockquote&gt;
&lt;code&gt;A := 10;&lt;/code&gt;
&lt;/blockquote&gt;
creates a property named &quot;A&quot; and sets the value to &quot;10&quot;.&lt;/p&gt;

&lt;p&gt;For each incoming data record the PilotScript statements in &lt;i&gt;Expression&lt;/i&gt; are evaluated.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To initialize global variables such as counters, use &lt;i&gt;Initial Expression&lt;/i&gt;.&lt;/li&gt; 
&lt;li&gt;To clean up global variables or calculate final results use &lt;i&gt;Final Expression&lt;/i&gt;.&lt;/li&gt;
&lt;li&gt;Parameters on Custom Manipulators do not become global variables that can be accessed via &lt;i&gt;@ParameterName&lt;/i&gt; syntax.  They must be accessed by using the &lt;i&gt;Parameter(&apos;ParameterName&apos;)&lt;/i&gt; function or by using token substitution via &lt;i&gt;$(ParameterName)&lt;/i&gt; syntax.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For more information on PilotScript, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/pscript/pscript_overview.htm&apos;)&quot;&gt;PilotScript Overview&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To use PilotScript to filter data records use &lt;a href=&quot;javascript:DoLink(&apos;{DD58ECD1-516F-48FE-A5DB-8328AED680F2}&apos;)&quot;&gt;Custom Filter (PilotScript)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>7.0.0.35</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Property Manipulators\Custom Manipulator (PilotScript)</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.Protocol.1">
				<sci:component name="Subprotocol" version="2">
					<sci:arg name="RunToCompletion" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - For Each Data Record&quot;, the subprotocol is re-initialized and executed in its entirety for each individual data record it processes.
&lt;p&gt;
When set to &quot;True - For Each Category&quot;, the data records are divided into categories based on the value of the Categorize Using parameter and then the subprotocol is re-initialized and executed in its entirety for each category of data records. When used in conjunction with &lt;i&gt;Parallel Processing Options&lt;/i&gt;, each category of data records will be sent to the remote server as part of one single batch.</sci:help>
						<sci:member>RunToCompletion Categorize Using</sci:member>
						<sci:legalval selected="true">False</sci:legalval>
						<sci:legalval>True - For Each Data Record</sci:legalval>
						<sci:legalval>True - For Each Category</sci:legalval>
					</sci:arg>
					<sci:arg name="RunToCompletion Categorize Using" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Required when RunToCompletion is set to &lt;i&gt;True - For Each Category&lt;/i&gt;, this parameter specifies the property or properties used to define the categories.</sci:help>
						<sci:validscript>SetInvalidDetails(&apos;This parameter is required when RunToCompletion is set to True - For Each Category&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
						<sci:enabledscript>SetDisabledDetails(&apos;To Enable, Set RunToCompletion to True - For Each Category&apos;);
Parameter(&apos;RunToCompletion&apos;) eq &apos;True - For Each Category&apos;;</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>&lt;p&gt;
When set to True, this set of options allows the subprotocol to execute in parallel on one or more independent Pipeline Pilot servers, running locally or remotely.  Additional parameters control the number of data records to send in each process batch, the list of Pipeline Pilot servers to use, the number of protocol processes that can be executed on each server, and whether to preserve the order of the processed data records.
&lt;/p&gt;&lt;p&gt;
Use this option with care, since it will not increase throughput in all circumstances. Generally speaking, it yields improved performance when the parallelization benefits outweigh the data transfer overhead for the specified batch size.  As a rough guide, performance can be improved when each individual batch requires at least 10 seconds to execute, although this can be affected by the size of each data record.
&lt;/p&gt;&lt;p&gt;
When running the protocol with debugging, the subprotocol will provide debugging messages to detail each of the various steps of execution.  Also, components located within the parallel subprotocol will display their debugging messages as well.
&lt;/p&gt;&lt;p&gt;
For more information on the parallel subprotocol options, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_parallel_processing.htm&apos;)&quot;&gt;Parallel Processing Subprotocols&lt;/a&gt;.
&lt;/p&gt;
</sci:help>
						<sci:member>Parallel Processing Options Batch Size</sci:member>
						<sci:member>Parallel Processing Options Server</sci:member>
						<sci:member>Parallel Processing Options Preserve Order</sci:member>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Batch Size" type="LongType" required="true" visibility="visible" multi="false" uimpl="false">
						<sci:help>&lt;p&gt;The number of records to send to the remote server(s) for each subprotocol execution.  In general, performance is optimized when the amount of time required to process each batch is at least 10 seconds (note that this can vary depending on the characteristics of the remote server&apos;s hardware).  Use a batch size of -1 to pass all data in a single batch.&lt;/p&gt;
&lt;p&gt;When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - for each category&quot;, the batch sizes will be determined by the number of records in each individual category.  Therefore, the &lt;i&gt;Batch Size&lt;/i&gt; parameter is not applicable.</sci:help>
						<sci:enabledscript>#parallel := Parameter(&apos;Parallel Processing Options&apos;);
if (not #parallel) then
	SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
end if;
#parallel;</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server" type="StringType" required="false" visibility="visible" multi="true" expanded="true" legalvalsenforced="false" uimpl="false">
						<sci:help>&lt;p&gt;
A comma-separated list of Pipeline Pilot servers on which to execute the parallel subprotocol.  The server names should be in the same format as the Pipeline Pilot Client&apos;s change server dialog (that is, server-name:port-number).
&lt;/p&gt;&lt;p&gt;
Specifying &lt;b&gt;localhost&lt;/b&gt; as a server will cause the subprotocol to use its own Pipeline Pilot server.  This can be useful on multi-CPU/multi-core systems (where the subprotocol jobs are spawned on the same machine) and Pipeline Pilot Linux clusters (where &apos;localhost&apos; requests spawning the subprotocol jobs on the same cluster).
&lt;/p&gt;</sci:help>
						<sci:member>Parallel Processing Options Server Processes</sci:member>
						<sci:member>Parallel Processing Options Server Run On Grid</sci:member>
						<sci:validscript>SetInvalidDetails(&apos;This parameter is required.&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Processes" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>A comma-separated list of the maximum number of batches that can be simultaneously executed on each remote server.  The number of entries in this parameter must equal the number of servers. If &apos;*&apos; is specified as the number of processes, then that server will only launch as many batches as the administrator of the remote server has permitted.&lt;/br&gt;&lt;/br&gt;For non-Grid Engine job, the number of jobs will be limited to the value for the maximum number of simultaneous subprotocol jobs as defined in the Admin Console even if this value is higher than the value entered here or &apos;*&apos;.&lt;/br&gt;&lt;/br&gt;For Grid Engine jobs, the number of jobs will be limited to the value for the maximum number of simultaneous subprotocol grid jobs as defined in the Admin Console even if this value is higher than the value entered here or &apos;*&apos;.&lt;/br&gt;&lt;/br&gt;</sci:help>
						<sci:validscript>/* Server Processes must have the same number of comma separated entries as the Server parameter and must have a value*/
#processes := parameter();
expand(&apos;,&apos;, #processes);
#servers := parameter(&apos;Parallel Processing Options Server&apos;);
expand(&apos;,&apos;, #servers);

if (numvalues(#processes) == 0) then
	SetInvalidDetails(&apos;This parameter is required.&apos;);
else
	SetInvalidDetails(&apos;The number of server processes (&apos; . numvalues(#processes) . &apos;) must equal the number of servers (&apos; . numvalues(#servers) . &apos;).&apos;);
end if;
numvalues(#processes) &gt; 0 and numvalues(#processes) == numvalues(#servers);</sci:validscript>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Run On Grid" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Run subprotocol on grid engine if available.  Note: If no grid engine is configured the subprotocol will still run even if this parameter is set to true.</sci:help>
						<sci:member>Parallel Processing Options Server Run On Grid Queue Name</sci:member>
						<sci:member>Parallel Processing Options Server Run On Grid Grid Options</sci:member>
						<sci:enabledscript>parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Run On Grid Queue Name" type="StringType" required="false" visibility="visible" multi="false" legalvalsenforced="false" uimpl="false">
						<sci:help>Select the queue name on the grid to submit jobs to. Leave blank to use default queue name.</sci:help>
						<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Run On Grid Grid Options" type="StringType" required="false" visibility="visible" multi="true" uimpl="false">
						<sci:help>&lt;p&gt;This is an array of command line options to send to the Grid engine submit command.&lt;/p&gt;
&lt;p&gt;If you just include one line, whatever you enter will be sent &quot;as is&quot; to the submission command.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Just sending options directly to command line - PBS&lt;/b&gt;
&lt;p&gt;-l procs=16 -l walltime=08:00:00 -A PROJECTID&lt;/p&gt;
&lt;/br&gt;
&lt;p&gt;There are a number of parameters that Pipeline Pilot will translate to the correct command line options for whichever supported Grid Engine you are using.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Supported parameters&lt;/b&gt;
&lt;p&gt;Account=&amp;lt;Project/Account name&amp;gt;&lt;/p&gt;
&lt;p&gt;Maximum Execution Time=&amp;lt;DD:MM:SS&amp;gt; - LSF ignores seconds&lt;/p&gt;
&lt;p&gt;Number of Cores=&amp;lt;16&amp;gt;&lt;/p&gt;
&lt;p&gt;Parallel Environment=&amp;lt;The Parallel Environment to use&amp;gt; - Only needed for SGE&lt;/p&gt;
&lt;p&gt;Other=&amp;lt;Additional Parameters sent directly to submit command line&amp;gt;&lt;/p&gt;</sci:help>
						<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Preserve Order" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Whether to preserve the order of the data as it enters and leaves the remote subprotocol.</sci:help>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Tempfiles" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>&lt;p&gt;A comma-delimited list of global properties, each of which is automatically populated with the name of a file in the job&apos;s temporary folder, which always has a unique name.&lt;p/&gt;For each global name, an additional global is created (with the suffix &lt;i&gt;_Filename&lt;/i&gt;) that hold only the leaf file name of the temporary file.&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="DeclareLocal" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>&lt;p&gt;Lists a set of properties (without the @) to create on the global property list for this subprotocol. Separate property names with commas. Such properties can only be accessed within the scope of this subprotocol and its descendent subprotocols.&lt;p/&gt;

&lt;p&gt;Any global property not declared in this way is created on the top-level global property list and is accessible from all subprotocols, but breaks the encapsulation of the subprotocol and may collide with another property of the same name.&lt;/p&gt;

&lt;p&gt;Therefore, you should always declare a new global property in the &lt;i&gt;DeclareLocal&lt;/i&gt; parameter, to minimize the scope of the global property to the subprotocol where it is used.&lt;/p&gt;

&lt;p&gt;The example &lt;i&gt;DeclareLocal&lt;/i&gt; value below creates 3 global properties in the subprotocol scope. Note that you can initialize the declared global value with a scalar value using the &quot;:=&quot; syntax, as shown. You can surround text string values with quotes to aid clarity.&lt;/p&gt;
&lt;pre&gt;
    SubP_Counter := 0, SubP_NameHash, SubP_TitleText:=&quot;Sample 1&quot;
&lt;/pre&gt;
</sci:help>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval>ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
						<sci:metaproplist>
							<sci:mpropval name="SCI_PromotedFrom" type="StringType">
								<sci:value>Maximum</sci:value>
							</sci:mpropval>
							<sci:propval name="SCI_PromotionRenameRule">UsingParent</sci:propval>
						</sci:metaproplist>
						<sci:help>The maximum number of data records to read. If empty, all records are read.</sci:help>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Custom Error Message</sci:help>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>enamine Database</sci:value>
					</sci:arg>
					<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol AutoLayout</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>DOCUMENTNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
						<sci:help>Component Revision</sci:help>
						<sci:value>790</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{17001C74-63CE-4B4B-B37C-F0EAA19CE4AA}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>90 -470</sci:value>
					</sci:arg>
					<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>By Ref</sci:help>
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Builds subprotocols in Pipeline Pilot.</sci:value>
						<sci:value>&lt;p&gt;
Use a subprotocol to collapse one or more components into a single item. Open 
a subprotocol to view or edit its contents. 
&lt;/p&gt;&lt;p&gt;
To define input and output ports, display 
icon, and parameter settings, right-click and select Edit. You can save subprotocols and reuse them. 
For more information, see the User Guide help for &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_overview.htm&apos;)&quot;&gt;Subprotocols 
Overview&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;
For more information on the parallel subprotocol options, see 
&lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_parallel_processing.htm&apos;)&quot;&gt;Parallel 
Processing Subprotocols&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;
Tip: Any component can be made into a shortcut, 
so that the latest version is always used. For more information, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/shortcuts.htm&apos;)&quot;&gt;Creating 
Shortcuts&lt;/a&gt;.
&lt;/p&gt;</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value>Records passing out of any unconnected pass ports of components inside the subprotocol</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value>Records passing out of any unconnected fail ports of components inside the subprotocol</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>17.2.0.1267</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Sticky Notes</sci:help>
					</sci:arg>
					<sci:arg name="ProtocolScale2" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Scale</sci:help>
						<sci:value>100</sci:value>
					</sci:arg>
					<sci:arg name="Protocol Options" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Options</sci:help>
						<sci:legalval>Owner Access Only</sci:legalval>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/coreutils</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Thu Sep 15 15:57:54 2016</sci:value>
					</sci:arg>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>17</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Utilities\Subprotocol Utilities\Subprotocol</sci:value>
					</sci:arg>
				</sci:component>
				<sci:protocol>
					<sci:data object="SciTegic.DelimitedReader.1">
						<sci:component name="Delimited Text Reader" version="2">
							<sci:arg name="Source" type="URLType" required="true" visibility="visible" multi="false" expanded="true" legalvalsenforced="false">
								<sci:help>&lt;p&gt;
The location from which to read the data. Can be a file, a network resource, a global property, or a data record property.
&lt;/p&gt; 
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;For a file, enter a path.&lt;/li&gt;
&lt;li&gt;For a network resource, enter a network URL in the form &lt;b&gt;protocol://server:port/...&lt;/b&gt;. (If port is omitted, a default is used.) Protocols supported are:
	&lt;ul&gt;
	&lt;li&gt;http, https&lt;/li&gt;
	&lt;li&gt;ftp&lt;/li&gt;
	&lt;li&gt;hdfs (Hadoop Distributed File System)&lt;/li&gt;
	&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For a global property, enter &quot;global://property-name&quot;, or select &quot;Global Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;For a data record property, enter &quot;property://property-name&quot;, or add an input port and select &quot;Data Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;To read multiple files, enter a comma-separated list of any of the above.&lt;/i&gt;
&lt;/ul&gt;</sci:help>
								<sci:member>Maximum</sci:member>
								<sci:member>Keep Properties</sci:member>
								<sci:member>UTF-8 Auto Detect</sci:member>
								<sci:member>SourceTag</sci:member>
								<sci:member>HasColumnNames</sci:member>
								<sci:member>Column Name Lines</sci:member>
								<sci:member>Authentication Options</sci:member>
								<sci:value>/zfsdata/data/datasets/REAL_database_2018-08-25/Enamine_REAL_full_smiles_Part_01.zip</sci:value>
							</sci:arg>
							<sci:arg name="Authentication Options" type="GroupType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>For HTTP, HTTPS, and HDFS URLs, you may optionally specify authentication information for the URL in the following parameters</sci:help>
								<sci:member>Username</sci:member>
								<sci:member>Password</sci:member>
								<sci:member>Authentication Method</sci:member>
								<sci:member>KDC Server</sci:member>
								<sci:member>KDC Realm</sci:member>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HTTP or HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^(https?|hdfs):&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Authentication Method" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>Determines which method to use during authentication with an HTTP, HTTPS, or HDFS URL.

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Use Username and Password Parameters&lt;/b&gt;: Use the values provided by the parameter group&apos;s &lt;i&gt;Username&lt;/i&gt; and &lt;i&gt;Password&lt;/i&gt; parameters.
&lt;li&gt;&lt;b&gt;Use Pipeline Pilot Credentials&lt;/b&gt;: Use the username and password that were provided when the user logged into Pipeline Pilot if available.  NOTE: if the &lt;i&gt;Username&lt;/i&gt; parameter is provided, its value will override the user&apos;s logged in username.
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">Use Username and Password Parameters</sci:legalval>
								<sci:legalval>Use Pipeline Pilot Credentials</sci:legalval>
							</sci:arg>
							<sci:arg name="Username" type="UserNameType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>&lt;p&gt;
The username used to connect to the supplied URL.
&lt;/p&gt;
&lt;p&gt;
If the Authentication Method is set to &apos;Use Username and Password Parameters&apos;, then this parameter
must be filled in to log into the remote server.
&lt;/p&gt;
&lt;p&gt; 
If the Authentication Method is set to &apos;Use Pipeline Pilot Credentials&apos;, then this parameter can be left empty
and the logged in username is used. As an override option, if the username is filled in, this
username will be used along with the user&apos;s Pipeline Pilot password.
&lt;/p&gt;
</sci:help>
							</sci:arg>
							<sci:arg name="Password" type="xpass" encrypt="bf_1" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>The password used to authenticate to the URL.  This parameter is disabled if Authentication Method is not set to &apos;Use Username and Password Parameters&apos;.
</sci:help>
								<sci:enabledscript>SetDisabledDetails(&quot;To enable, set Authentication Method to &apos;Use Username and Password Parameters&apos;&quot;);
Parameter(&apos;Authentication Method&apos;) eq &apos;Use Username and Password Parameters&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Server" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Realm" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Maximum" type="LinkSingleParentParameterType" required="false" visibility="visible" multi="false">
								<sci:metaproplist>
									<sci:propval name="SCI_InitializeUsingOrigType">LongType</sci:propval>
								</sci:metaproplist>
								<sci:help>The maximum number of data records to read. If empty, all records are read.</sci:help>
								<sci:value>Maximum</sci:value>
							</sci:arg>
							<sci:arg name="SourceTag" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies a tag format for identifying the source of data records. Causes a property named &lt;b&gt;SourceTag&lt;/b&gt; to be created to hold the value. Options and their associated tag values are:
&lt;ul&gt;
&lt;li&gt;None: No &lt;b&gt;SourceTag&lt;/b&gt; property is created and any existing &lt;b&gt;SourceTag&lt;/b&gt; properties are removed.
&lt;li&gt;Filename: The name of the file excluding its extension
&lt;li&gt;FilenameAndExtension: The name of the file including its file extension
&lt;li&gt;FullFilename: The name of the file, including its extension and directory path
&lt;li&gt;ZipFilename: When reading a compressed zip file, the filename within the compressed archive
&lt;li&gt;Number: When multiple files are read, a number (1, 2, 3...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;Letter: When multiple files are read , a letter (A, B, C...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;KeepCurrent: Keeps the current value of &lt;b&gt;SourceTag&lt;/b&gt; if present
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Filename</sci:legalval>
								<sci:legalval>FilenameAndExtension</sci:legalval>
								<sci:legalval>FullFilename</sci:legalval>
								<sci:legalval>ZipFilename</sci:legalval>
								<sci:legalval>Number</sci:legalval>
								<sci:legalval>Letter</sci:legalval>
								<sci:legalval>KeepCurrent</sci:legalval>
							</sci:arg>
							<sci:arg name="Keep Properties" type="PropertyPreviewType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies properties from &lt;i&gt;Source&lt;/i&gt; to retain for each output data record. If not specified, all properties are retained. A value of &quot;-&quot; (minus sign) specifies that no properties are retained.</sci:help>
							</sci:arg>
							<sci:arg name="UTF-8 Auto Detect" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies whether to attempt to infer the use of UTF-8 encoding in &lt;i&gt;Source&lt;/i&gt; files when a byte order mark (BOM) is absent from them.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;UTF-8 is a type of character encoding which represents international characters with multiple bytes, while basic Latin characters remain as a single byte.  If a file begins with a BOM, then the encoding can be inferred with confidence. If not, an indirect approach is necessary. This approach is not 100% reliable.  In some cases, valid text stored in different character encodings can appear to be valid UTF-8.  In these cases, the automatic detection will result in garbled text.  When this occurs, consider using the &lt;a href=&quot;javascript:DoLink(&apos;{B0B1B56C-3DF6-444C-BB78-B43211188F63}&apos;)&quot;&gt;Binary Reader&lt;/a&gt; to read the raw bytes from the file, then convert the data using the Pilotscript function &lt;b&gt;ConvertBytesToString&lt;/b&gt;, which allows you to specify the encoding.
&lt;/ul&gt;

</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="HasColumnNames" type="BoolType" required="true" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>If True, property names are taken from the first line of data in &lt;i&gt;Source&lt;/i&gt; files. If False, the first line is assumed to contain data, and properties are given names &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, etc.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Column Name Lines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>If the column name is part of the file, you can specify which line (or lines) are used to construct the property name. So &quot;4&quot; would declare the fourth line to contain the column names, and &quot;4-5&quot; means the values from both lines 4 and 5 will be used to construct the column names.

If not provided, the first non-comment line becomes the column name line.

Any other lines less than the largest column name line are considered comment lines and are ignored.</sci:help>
								<sci:enabledscript>parameter(&apos;HasColumnNames&apos;)</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Delimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies the character that separates fields. Options include:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;FigureOut:&lt;/b&gt; Determines the type automatically (looks for, in order: tab, comma, space, colon, semicolon).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Tab:&lt;/b&gt; For tab-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Space:&lt;/b&gt; For space-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Comma:&lt;/b&gt; For comma-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Colon:&lt;/b&gt; For colon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Semicolon:&lt;/b&gt; For semicolon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;$:&lt;/b&gt; For fields delimited bty the &quot;$&quot; character.&lt;/li&gt;
&lt;/ul&gt;
</sci:help>
								<sci:member>MultipleValueDelimiter</sci:member>
								<sci:member>ParseNDimensionalArrayStrings</sci:member>
								<sci:legalval selected="true">FigureOut</sci:legalval>
								<sci:legalval>Tab</sci:legalval>
								<sci:legalval>Space</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>$</sci:legalval>
							</sci:arg>
							<sci:arg name="MultipleValueDelimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The delimiter to use between multiple values contained in a single property. If the multiple value delimiter exists in any of the input strings in any property, they are separated into an array of values. If &quot;None&quot;, 
values are never separated into multiple values.</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Linefeed</sci:legalval>
							</sci:arg>
							<sci:arg name="ParseNDimensionalArrayStrings" type="BoolType" required="false" visibility="visible" multi="false">
								<sci:help>Toggles whether to parse delimited N-Dimensional Array strings into N-Dimensional Array values.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false">
								<sci:help>Contains less commonly used parameters</sci:help>
								<sci:member>UndefinedString</sci:member>
								<sci:member>AllLines</sci:member>
								<sci:member>TrimWhitespace</sci:member>
								<sci:member>CheckSyntax</sci:member>
								<sci:member>CommentLines</sci:member>
								<sci:member>AddEmptyProperties</sci:member>
							</sci:arg>
							<sci:arg name="CommentLines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>A comma-separated list of line numbers and
line ranges to specify which lines should be 
ignored by the parser (column headers are read from the line that comes next).</sci:help>
							</sci:arg>
							<sci:arg name="UndefinedString" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Character or string to represent an undefined string read in the file. To make an empty string to be treated as an undefined value, set the parameter value to &quot;EmptyString&quot;.</sci:help>
							</sci:arg>
							<sci:arg name="AllLines" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, all lines of the text file become part of a single data record. The values for a column from each row become multiple [array] values for the property (column).</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="TrimWhitespace" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Trims whitespace from the left and right ends of each value</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="CheckSyntax" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Whether to perform a quick syntax check at the beginning of the file when it is opened, and if a problem is found, throw an error.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="AddEmptyProperties" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, then if a row does not have as many values as the number of columns, the missing properties are added to the data record as empty properties</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Join Behavior" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>&lt;p&gt;How to merge the created data record onto the incoming data record. Options are:&lt;/p&gt;
 
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;OverwriteOrCreate&lt;/i&gt;: Copies all properties from the joining data onto the base data, overwriting the values of any properties that already exist.
&lt;li&gt;&lt;i&gt;OverwriteExisting&lt;/i&gt;: Copies only those properties from the joining data to the base data that already exist on the base.
&lt;li&gt;&lt;i&gt;CreateIfNew&lt;/i&gt;: Copies only those properties from the joining data to the base data that do not already exist on the base data.
&lt;li&gt;&lt;i&gt;AppendOrCreate&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  The other joining properties that are not already present in the base data are copied there.
&lt;li&gt;&lt;i&gt;AppendExisting&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  No other properties are copied. 
&lt;li&gt;&lt;i&gt;Replace&lt;/i&gt;: The input data record is replaced by the created data record. &lt;/ul&gt;

</sci:help>
								<sci:legalval>OverwriteOrCreate</sci:legalval>
								<sci:legalval>OverwriteExisting</sci:legalval>
								<sci:legalval>CreateIfNew</sci:legalval>
								<sci:legalval>AppendOrCreate</sci:legalval>
								<sci:legalval>AppendExisting</sci:legalval>
								<sci:legalval selected="true">Replace</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval>ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Sep 07 15:31:15 2017</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Source&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>
#displayNames := Parameter(&apos;Source&apos;, 2);
if (#displayNames ne &apos;&apos;) then
  Expand(&apos;,&apos;, #displayNames);
end if;
#displayName := Trim(#displayNames[1]);
#dots := &apos;&apos;;
if (NumValues(#displayNames) &gt; 1) then
	#dots := &apos;...&apos;;
end if;
if(StrLength(#displayName) &gt; 0) then	
	/* Find the last slash or backslash, extract the end */
	#name := #displayName;
	#ls1 := FindLastSubstring(#name, &apos;/&apos;);
	#ls2 := FindLastSubstring(#name, &apos;\&apos;);
	if (#ls1 &gt; #ls2) then
		#name := Substring(#name, #ls1+1);
	elsif (#ls2 &gt; #ls1) then
		#name := Substring(#name, #ls2+1);
	end if;

	if (#name eq &apos;&apos;) then
		&apos;&apos;;
	elsif (Substring(#displayName, 1, 9) eq &apos;global://&apos;) then
		&apos;Read from @&apos; . #name . #dots;
	elsif (Substring(#displayName, 1, 11) eq &apos;property://&apos;) then
		&apos;Read from property &apos; . #name . #dots;
	else
		&apos;Read &apos; . #name . #dots;
	end if;
else
	&apos;&apos;;
end if;
			</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component that this component is based upon.</sci:help>
								<sci:value>Delimited Reader</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>DOCUMENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>4</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{7D2AF7C7-A077-4201-B10B-8E8283A5EADD}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>90 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Reads data from text files containing one record per line with data separated by delimiters</sci:value>
								<sci:value>&lt;p&gt;The file or files are specified by &lt;i&gt;Source&lt;/i&gt;. The file(s) should contain textual data formatted with a single record per line. Individual property values on each line should be separated by a delimiter character (such as, space, comma, tab), as specified by &lt;i&gt;Delimiter&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;i&gt;HasColumnNames&lt;/i&gt; is True, the values on the first line of the file are treated as the property names. Otherwise, &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, and so on, are used as the property names.&lt;/p&gt;

Cells containing array data can be read by setting the &lt;i&gt;MultipleValueDelimiter&lt;/i&gt; option to the character that separates the array elements. (Of course, this cannot be the same as the delimiter character.) You can now use the &lt;i&gt;Unmerge Data&lt;/i&gt; component to unmerge these arrays into separate records.
&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;The new, recommended component for Excel (.xlsx or .xls) files that does not require Excel to be installed on the server machine, and therefore is operational on Linux and Windows platforms - &lt;a href=&quot;javascript:DoLink(&apos;{14D98B18-C990-432C-834B-7026565E5ABF}&apos;)&quot;&gt;Excel Reader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For non-delimited textual data, use &lt;a href=&quot;javascript:DoLink(&apos;{8056E8AD-33EA-42BB-9099-EAB24C3D08E6}&apos;)&quot;&gt;Text Reader&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>18.1.0.1581</sci:value>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>14</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\File Readers\Delimited Text Reader</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.PropertyFunctions.1">
						<sci:component name="No-op" version="2">
							<sci:arg name="DataActionOnError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When a General or DataType error occurs during processing:  
  LeaveData: The data is passed unalterd
  ClearData: The data is cleared before being passed (an empty data item)
  DeleteData: The data is deleted and not passed</sci:help>
								<sci:legalval selected="true">LeaveData</sci:legalval>
								<sci:legalval>ClearData</sci:legalval>
								<sci:legalval>DeleteData</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>CustomErrorText</sci:help>
							</sci:arg>
							<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:help>the action to perform</sci:help>
								<sci:value>PassDataToPort</sci:value>
							</sci:arg>
							<sci:arg name="Port" type="LongType" required="true" visibility="nevershow" multi="false">
								<sci:help>the port to pass data to</sci:help>
								<sci:value>1</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>COMPONENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Sep 28 16:34:08 2006</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>No-op</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>Evaluate Expression</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{6E468A38-A6F7-4371-B65B-501A3ED4C0D9}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>378 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Sends all incoming records out the Pass port unchanged</sci:value>
								<sci:value>&lt;p&gt;Useful in subprotocols to capture the point of input. For example, if you wish to perform two different sequences of operations on the same input data, use No-op as the first component of the subprotocol and connect both pipes to the No-op output port.&lt;/p&gt;

&lt;p&gt;You can also use this component to simplify the layout for complex protocols. For example, if you have three Reader components that need to be connected to three Viewer components, placing a No-op in the middle reduces the number of required connections and clarifies the logic.&lt;/p&gt;
</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>6.0.1.1</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>26</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Utilities\Subprotocol Utilities\No-op</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.DelimitedReader.1">
						<sci:component name="Delimited Text Reader" version="2">
							<sci:arg name="Source" type="URLType" required="true" visibility="visible" multi="false" expanded="true" legalvalsenforced="false">
								<sci:help>&lt;p&gt;
The location from which to read the data. Can be a file, a network resource, a global property, or a data record property.
&lt;/p&gt; 
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;For a file, enter a path.&lt;/li&gt;
&lt;li&gt;For a network resource, enter a network URL in the form &lt;b&gt;protocol://server:port/...&lt;/b&gt;. (If port is omitted, a default is used.) Protocols supported are:
	&lt;ul&gt;
	&lt;li&gt;http, https&lt;/li&gt;
	&lt;li&gt;ftp&lt;/li&gt;
	&lt;li&gt;hdfs (Hadoop Distributed File System)&lt;/li&gt;
	&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For a global property, enter &quot;global://property-name&quot;, or select &quot;Global Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;For a data record property, enter &quot;property://property-name&quot;, or add an input port and select &quot;Data Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;To read multiple files, enter a comma-separated list of any of the above.&lt;/i&gt;
&lt;/ul&gt;</sci:help>
								<sci:member>Maximum</sci:member>
								<sci:member>Keep Properties</sci:member>
								<sci:member>UTF-8 Auto Detect</sci:member>
								<sci:member>SourceTag</sci:member>
								<sci:member>HasColumnNames</sci:member>
								<sci:member>Column Name Lines</sci:member>
								<sci:member>Authentication Options</sci:member>
								<sci:value>/zfsdata/data/datasets/REAL_database_2018-08-25/Enamine_REAL_full_smiles_Part_02.zip</sci:value>
							</sci:arg>
							<sci:arg name="Authentication Options" type="GroupType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>For HTTP, HTTPS, and HDFS URLs, you may optionally specify authentication information for the URL in the following parameters</sci:help>
								<sci:member>Username</sci:member>
								<sci:member>Password</sci:member>
								<sci:member>Authentication Method</sci:member>
								<sci:member>KDC Server</sci:member>
								<sci:member>KDC Realm</sci:member>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HTTP or HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^(https?|hdfs):&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Authentication Method" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>Determines which method to use during authentication with an HTTP, HTTPS, or HDFS URL.

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Use Username and Password Parameters&lt;/b&gt;: Use the values provided by the parameter group&apos;s &lt;i&gt;Username&lt;/i&gt; and &lt;i&gt;Password&lt;/i&gt; parameters.
&lt;li&gt;&lt;b&gt;Use Pipeline Pilot Credentials&lt;/b&gt;: Use the username and password that were provided when the user logged into Pipeline Pilot if available.  NOTE: if the &lt;i&gt;Username&lt;/i&gt; parameter is provided, its value will override the user&apos;s logged in username.
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">Use Username and Password Parameters</sci:legalval>
								<sci:legalval>Use Pipeline Pilot Credentials</sci:legalval>
							</sci:arg>
							<sci:arg name="Username" type="UserNameType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>&lt;p&gt;
The username used to connect to the supplied URL.
&lt;/p&gt;
&lt;p&gt;
If the Authentication Method is set to &apos;Use Username and Password Parameters&apos;, then this parameter
must be filled in to log into the remote server.
&lt;/p&gt;
&lt;p&gt; 
If the Authentication Method is set to &apos;Use Pipeline Pilot Credentials&apos;, then this parameter can be left empty
and the logged in username is used. As an override option, if the username is filled in, this
username will be used along with the user&apos;s Pipeline Pilot password.
&lt;/p&gt;
</sci:help>
							</sci:arg>
							<sci:arg name="Password" type="xpass" encrypt="bf_1" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>The password used to authenticate to the URL.  This parameter is disabled if Authentication Method is not set to &apos;Use Username and Password Parameters&apos;.
</sci:help>
								<sci:enabledscript>SetDisabledDetails(&quot;To enable, set Authentication Method to &apos;Use Username and Password Parameters&apos;&quot;);
Parameter(&apos;Authentication Method&apos;) eq &apos;Use Username and Password Parameters&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Server" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Realm" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
								<sci:help>The maximum number of data records to read. If empty, all records are read.</sci:help>
								<sci:value>$(Maximum)</sci:value>
							</sci:arg>
							<sci:arg name="SourceTag" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies a tag format for identifying the source of data records. Causes a property named &lt;b&gt;SourceTag&lt;/b&gt; to be created to hold the value. Options and their associated tag values are:
&lt;ul&gt;
&lt;li&gt;None: No &lt;b&gt;SourceTag&lt;/b&gt; property is created and any existing &lt;b&gt;SourceTag&lt;/b&gt; properties are removed.
&lt;li&gt;Filename: The name of the file excluding its extension
&lt;li&gt;FilenameAndExtension: The name of the file including its file extension
&lt;li&gt;FullFilename: The name of the file, including its extension and directory path
&lt;li&gt;ZipFilename: When reading a compressed zip file, the filename within the compressed archive
&lt;li&gt;Number: When multiple files are read, a number (1, 2, 3...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;Letter: When multiple files are read , a letter (A, B, C...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;KeepCurrent: Keeps the current value of &lt;b&gt;SourceTag&lt;/b&gt; if present
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Filename</sci:legalval>
								<sci:legalval>FilenameAndExtension</sci:legalval>
								<sci:legalval>FullFilename</sci:legalval>
								<sci:legalval>ZipFilename</sci:legalval>
								<sci:legalval>Number</sci:legalval>
								<sci:legalval>Letter</sci:legalval>
								<sci:legalval>KeepCurrent</sci:legalval>
							</sci:arg>
							<sci:arg name="Keep Properties" type="PropertyPreviewType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies properties from &lt;i&gt;Source&lt;/i&gt; to retain for each output data record. If not specified, all properties are retained. A value of &quot;-&quot; (minus sign) specifies that no properties are retained.</sci:help>
							</sci:arg>
							<sci:arg name="UTF-8 Auto Detect" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies whether to attempt to infer the use of UTF-8 encoding in &lt;i&gt;Source&lt;/i&gt; files when a byte order mark (BOM) is absent from them.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;UTF-8 is a type of character encoding which represents international characters with multiple bytes, while basic Latin characters remain as a single byte.  If a file begins with a BOM, then the encoding can be inferred with confidence. If not, an indirect approach is necessary. This approach is not 100% reliable.  In some cases, valid text stored in different character encodings can appear to be valid UTF-8.  In these cases, the automatic detection will result in garbled text.  When this occurs, consider using the &lt;a href=&quot;javascript:DoLink(&apos;{B0B1B56C-3DF6-444C-BB78-B43211188F63}&apos;)&quot;&gt;Binary Reader&lt;/a&gt; to read the raw bytes from the file, then convert the data using the Pilotscript function &lt;b&gt;ConvertBytesToString&lt;/b&gt;, which allows you to specify the encoding.
&lt;/ul&gt;

</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="HasColumnNames" type="BoolType" required="true" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>If True, property names are taken from the first line of data in &lt;i&gt;Source&lt;/i&gt; files. If False, the first line is assumed to contain data, and properties are given names &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, etc.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Column Name Lines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>If the column name is part of the file, you can specify which line (or lines) are used to construct the property name. So &quot;4&quot; would declare the fourth line to contain the column names, and &quot;4-5&quot; means the values from both lines 4 and 5 will be used to construct the column names.

If not provided, the first non-comment line becomes the column name line.

Any other lines less than the largest column name line are considered comment lines and are ignored.</sci:help>
								<sci:enabledscript>parameter(&apos;HasColumnNames&apos;)</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Delimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies the character that separates fields. Options include:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;FigureOut:&lt;/b&gt; Determines the type automatically (looks for, in order: tab, comma, space, colon, semicolon).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Tab:&lt;/b&gt; For tab-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Space:&lt;/b&gt; For space-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Comma:&lt;/b&gt; For comma-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Colon:&lt;/b&gt; For colon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Semicolon:&lt;/b&gt; For semicolon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;$:&lt;/b&gt; For fields delimited bty the &quot;$&quot; character.&lt;/li&gt;
&lt;/ul&gt;
</sci:help>
								<sci:member>MultipleValueDelimiter</sci:member>
								<sci:member>ParseNDimensionalArrayStrings</sci:member>
								<sci:legalval selected="true">FigureOut</sci:legalval>
								<sci:legalval>Tab</sci:legalval>
								<sci:legalval>Space</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>$</sci:legalval>
							</sci:arg>
							<sci:arg name="MultipleValueDelimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The delimiter to use between multiple values contained in a single property. If the multiple value delimiter exists in any of the input strings in any property, they are separated into an array of values. If &quot;None&quot;, 
values are never separated into multiple values.</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Linefeed</sci:legalval>
							</sci:arg>
							<sci:arg name="ParseNDimensionalArrayStrings" type="BoolType" required="false" visibility="visible" multi="false">
								<sci:help>Toggles whether to parse delimited N-Dimensional Array strings into N-Dimensional Array values.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false">
								<sci:help>Contains less commonly used parameters</sci:help>
								<sci:member>UndefinedString</sci:member>
								<sci:member>AllLines</sci:member>
								<sci:member>TrimWhitespace</sci:member>
								<sci:member>CheckSyntax</sci:member>
								<sci:member>CommentLines</sci:member>
								<sci:member>AddEmptyProperties</sci:member>
							</sci:arg>
							<sci:arg name="CommentLines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>A comma-separated list of line numbers and
line ranges to specify which lines should be 
ignored by the parser (column headers are read from the line that comes next).</sci:help>
							</sci:arg>
							<sci:arg name="UndefinedString" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Character or string to represent an undefined string read in the file. To make an empty string to be treated as an undefined value, set the parameter value to &quot;EmptyString&quot;.</sci:help>
							</sci:arg>
							<sci:arg name="AllLines" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, all lines of the text file become part of a single data record. The values for a column from each row become multiple [array] values for the property (column).</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="TrimWhitespace" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Trims whitespace from the left and right ends of each value</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="CheckSyntax" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Whether to perform a quick syntax check at the beginning of the file when it is opened, and if a problem is found, throw an error.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="AddEmptyProperties" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, then if a row does not have as many values as the number of columns, the missing properties are added to the data record as empty properties</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Join Behavior" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>&lt;p&gt;How to merge the created data record onto the incoming data record. Options are:&lt;/p&gt;
 
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;OverwriteOrCreate&lt;/i&gt;: Copies all properties from the joining data onto the base data, overwriting the values of any properties that already exist.
&lt;li&gt;&lt;i&gt;OverwriteExisting&lt;/i&gt;: Copies only those properties from the joining data to the base data that already exist on the base.
&lt;li&gt;&lt;i&gt;CreateIfNew&lt;/i&gt;: Copies only those properties from the joining data to the base data that do not already exist on the base data.
&lt;li&gt;&lt;i&gt;AppendOrCreate&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  The other joining properties that are not already present in the base data are copied there.
&lt;li&gt;&lt;i&gt;AppendExisting&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  No other properties are copied. 
&lt;li&gt;&lt;i&gt;Replace&lt;/i&gt;: The input data record is replaced by the created data record. &lt;/ul&gt;

</sci:help>
								<sci:legalval>OverwriteOrCreate</sci:legalval>
								<sci:legalval>OverwriteExisting</sci:legalval>
								<sci:legalval>CreateIfNew</sci:legalval>
								<sci:legalval>AppendOrCreate</sci:legalval>
								<sci:legalval>AppendExisting</sci:legalval>
								<sci:legalval selected="true">Replace</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval>ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Sep 07 15:31:15 2017</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Source&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>
#displayNames := Parameter(&apos;Source&apos;, 2);
if (#displayNames ne &apos;&apos;) then
  Expand(&apos;,&apos;, #displayNames);
end if;
#displayName := Trim(#displayNames[1]);
#dots := &apos;&apos;;
if (NumValues(#displayNames) &gt; 1) then
	#dots := &apos;...&apos;;
end if;
if(StrLength(#displayName) &gt; 0) then	
	/* Find the last slash or backslash, extract the end */
	#name := #displayName;
	#ls1 := FindLastSubstring(#name, &apos;/&apos;);
	#ls2 := FindLastSubstring(#name, &apos;\&apos;);
	if (#ls1 &gt; #ls2) then
		#name := Substring(#name, #ls1+1);
	elsif (#ls2 &gt; #ls1) then
		#name := Substring(#name, #ls2+1);
	end if;

	if (#name eq &apos;&apos;) then
		&apos;&apos;;
	elsif (Substring(#displayName, 1, 9) eq &apos;global://&apos;) then
		&apos;Read from @&apos; . #name . #dots;
	elsif (Substring(#displayName, 1, 11) eq &apos;property://&apos;) then
		&apos;Read from property &apos; . #name . #dots;
	else
		&apos;Read &apos; . #name . #dots;
	end if;
else
	&apos;&apos;;
end if;
			</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component that this component is based upon.</sci:help>
								<sci:value>Delimited Reader</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>DOCUMENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>4</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{7D2AF7C7-A077-4201-B10B-8E8283A5EADD}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>90 -470</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Reads data from text files containing one record per line with data separated by delimiters</sci:value>
								<sci:value>&lt;p&gt;The file or files are specified by &lt;i&gt;Source&lt;/i&gt;. The file(s) should contain textual data formatted with a single record per line. Individual property values on each line should be separated by a delimiter character (such as, space, comma, tab), as specified by &lt;i&gt;Delimiter&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;i&gt;HasColumnNames&lt;/i&gt; is True, the values on the first line of the file are treated as the property names. Otherwise, &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, and so on, are used as the property names.&lt;/p&gt;

Cells containing array data can be read by setting the &lt;i&gt;MultipleValueDelimiter&lt;/i&gt; option to the character that separates the array elements. (Of course, this cannot be the same as the delimiter character.) You can now use the &lt;i&gt;Unmerge Data&lt;/i&gt; component to unmerge these arrays into separate records.
&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;The new, recommended component for Excel (.xlsx or .xls) files that does not require Excel to be installed on the server machine, and therefore is operational on Linux and Windows platforms - &lt;a href=&quot;javascript:DoLink(&apos;{14D98B18-C990-432C-834B-7026565E5ABF}&apos;)&quot;&gt;Excel Reader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For non-delimited textual data, use &lt;a href=&quot;javascript:DoLink(&apos;{8056E8AD-33EA-42BB-9099-EAB24C3D08E6}&apos;)&quot;&gt;Text Reader&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>18.1.0.1581</sci:value>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>15</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\File Readers\Delimited Text Reader</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.DelimitedReader.1">
						<sci:component name="Delimited Text Reader" version="2">
							<sci:arg name="Source" type="URLType" required="true" visibility="visible" multi="false" expanded="true" legalvalsenforced="false">
								<sci:help>&lt;p&gt;
The location from which to read the data. Can be a file, a network resource, a global property, or a data record property.
&lt;/p&gt; 
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;For a file, enter a path.&lt;/li&gt;
&lt;li&gt;For a network resource, enter a network URL in the form &lt;b&gt;protocol://server:port/...&lt;/b&gt;. (If port is omitted, a default is used.) Protocols supported are:
	&lt;ul&gt;
	&lt;li&gt;http, https&lt;/li&gt;
	&lt;li&gt;ftp&lt;/li&gt;
	&lt;li&gt;hdfs (Hadoop Distributed File System)&lt;/li&gt;
	&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For a global property, enter &quot;global://property-name&quot;, or select &quot;Global Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;For a data record property, enter &quot;property://property-name&quot;, or add an input port and select &quot;Data Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;To read multiple files, enter a comma-separated list of any of the above.&lt;/i&gt;
&lt;/ul&gt;</sci:help>
								<sci:member>Maximum</sci:member>
								<sci:member>Keep Properties</sci:member>
								<sci:member>UTF-8 Auto Detect</sci:member>
								<sci:member>SourceTag</sci:member>
								<sci:member>HasColumnNames</sci:member>
								<sci:member>Column Name Lines</sci:member>
								<sci:member>Authentication Options</sci:member>
								<sci:value>/zfsdata/data/datasets/REAL_database_2018-08-25/Enamine_REAL_full_smiles_Part_03.zip</sci:value>
							</sci:arg>
							<sci:arg name="Authentication Options" type="GroupType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>For HTTP, HTTPS, and HDFS URLs, you may optionally specify authentication information for the URL in the following parameters</sci:help>
								<sci:member>Username</sci:member>
								<sci:member>Password</sci:member>
								<sci:member>Authentication Method</sci:member>
								<sci:member>KDC Server</sci:member>
								<sci:member>KDC Realm</sci:member>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HTTP or HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^(https?|hdfs):&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Authentication Method" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>Determines which method to use during authentication with an HTTP, HTTPS, or HDFS URL.

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Use Username and Password Parameters&lt;/b&gt;: Use the values provided by the parameter group&apos;s &lt;i&gt;Username&lt;/i&gt; and &lt;i&gt;Password&lt;/i&gt; parameters.
&lt;li&gt;&lt;b&gt;Use Pipeline Pilot Credentials&lt;/b&gt;: Use the username and password that were provided when the user logged into Pipeline Pilot if available.  NOTE: if the &lt;i&gt;Username&lt;/i&gt; parameter is provided, its value will override the user&apos;s logged in username.
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">Use Username and Password Parameters</sci:legalval>
								<sci:legalval>Use Pipeline Pilot Credentials</sci:legalval>
							</sci:arg>
							<sci:arg name="Username" type="UserNameType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>&lt;p&gt;
The username used to connect to the supplied URL.
&lt;/p&gt;
&lt;p&gt;
If the Authentication Method is set to &apos;Use Username and Password Parameters&apos;, then this parameter
must be filled in to log into the remote server.
&lt;/p&gt;
&lt;p&gt; 
If the Authentication Method is set to &apos;Use Pipeline Pilot Credentials&apos;, then this parameter can be left empty
and the logged in username is used. As an override option, if the username is filled in, this
username will be used along with the user&apos;s Pipeline Pilot password.
&lt;/p&gt;
</sci:help>
							</sci:arg>
							<sci:arg name="Password" type="xpass" encrypt="bf_1" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>The password used to authenticate to the URL.  This parameter is disabled if Authentication Method is not set to &apos;Use Username and Password Parameters&apos;.
</sci:help>
								<sci:enabledscript>SetDisabledDetails(&quot;To enable, set Authentication Method to &apos;Use Username and Password Parameters&apos;&quot;);
Parameter(&apos;Authentication Method&apos;) eq &apos;Use Username and Password Parameters&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Server" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Realm" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
								<sci:help>The maximum number of data records to read. If empty, all records are read.</sci:help>
								<sci:value>$(Maximum)</sci:value>
							</sci:arg>
							<sci:arg name="SourceTag" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies a tag format for identifying the source of data records. Causes a property named &lt;b&gt;SourceTag&lt;/b&gt; to be created to hold the value. Options and their associated tag values are:
&lt;ul&gt;
&lt;li&gt;None: No &lt;b&gt;SourceTag&lt;/b&gt; property is created and any existing &lt;b&gt;SourceTag&lt;/b&gt; properties are removed.
&lt;li&gt;Filename: The name of the file excluding its extension
&lt;li&gt;FilenameAndExtension: The name of the file including its file extension
&lt;li&gt;FullFilename: The name of the file, including its extension and directory path
&lt;li&gt;ZipFilename: When reading a compressed zip file, the filename within the compressed archive
&lt;li&gt;Number: When multiple files are read, a number (1, 2, 3...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;Letter: When multiple files are read , a letter (A, B, C...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;KeepCurrent: Keeps the current value of &lt;b&gt;SourceTag&lt;/b&gt; if present
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Filename</sci:legalval>
								<sci:legalval>FilenameAndExtension</sci:legalval>
								<sci:legalval>FullFilename</sci:legalval>
								<sci:legalval>ZipFilename</sci:legalval>
								<sci:legalval>Number</sci:legalval>
								<sci:legalval>Letter</sci:legalval>
								<sci:legalval>KeepCurrent</sci:legalval>
							</sci:arg>
							<sci:arg name="Keep Properties" type="PropertyPreviewType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies properties from &lt;i&gt;Source&lt;/i&gt; to retain for each output data record. If not specified, all properties are retained. A value of &quot;-&quot; (minus sign) specifies that no properties are retained.</sci:help>
							</sci:arg>
							<sci:arg name="UTF-8 Auto Detect" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies whether to attempt to infer the use of UTF-8 encoding in &lt;i&gt;Source&lt;/i&gt; files when a byte order mark (BOM) is absent from them.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;UTF-8 is a type of character encoding which represents international characters with multiple bytes, while basic Latin characters remain as a single byte.  If a file begins with a BOM, then the encoding can be inferred with confidence. If not, an indirect approach is necessary. This approach is not 100% reliable.  In some cases, valid text stored in different character encodings can appear to be valid UTF-8.  In these cases, the automatic detection will result in garbled text.  When this occurs, consider using the &lt;a href=&quot;javascript:DoLink(&apos;{B0B1B56C-3DF6-444C-BB78-B43211188F63}&apos;)&quot;&gt;Binary Reader&lt;/a&gt; to read the raw bytes from the file, then convert the data using the Pilotscript function &lt;b&gt;ConvertBytesToString&lt;/b&gt;, which allows you to specify the encoding.
&lt;/ul&gt;

</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="HasColumnNames" type="BoolType" required="true" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>If True, property names are taken from the first line of data in &lt;i&gt;Source&lt;/i&gt; files. If False, the first line is assumed to contain data, and properties are given names &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, etc.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Column Name Lines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>If the column name is part of the file, you can specify which line (or lines) are used to construct the property name. So &quot;4&quot; would declare the fourth line to contain the column names, and &quot;4-5&quot; means the values from both lines 4 and 5 will be used to construct the column names.

If not provided, the first non-comment line becomes the column name line.

Any other lines less than the largest column name line are considered comment lines and are ignored.</sci:help>
								<sci:enabledscript>parameter(&apos;HasColumnNames&apos;)</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Delimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies the character that separates fields. Options include:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;FigureOut:&lt;/b&gt; Determines the type automatically (looks for, in order: tab, comma, space, colon, semicolon).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Tab:&lt;/b&gt; For tab-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Space:&lt;/b&gt; For space-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Comma:&lt;/b&gt; For comma-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Colon:&lt;/b&gt; For colon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Semicolon:&lt;/b&gt; For semicolon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;$:&lt;/b&gt; For fields delimited bty the &quot;$&quot; character.&lt;/li&gt;
&lt;/ul&gt;
</sci:help>
								<sci:member>MultipleValueDelimiter</sci:member>
								<sci:member>ParseNDimensionalArrayStrings</sci:member>
								<sci:legalval selected="true">FigureOut</sci:legalval>
								<sci:legalval>Tab</sci:legalval>
								<sci:legalval>Space</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>$</sci:legalval>
							</sci:arg>
							<sci:arg name="MultipleValueDelimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The delimiter to use between multiple values contained in a single property. If the multiple value delimiter exists in any of the input strings in any property, they are separated into an array of values. If &quot;None&quot;, 
values are never separated into multiple values.</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Linefeed</sci:legalval>
							</sci:arg>
							<sci:arg name="ParseNDimensionalArrayStrings" type="BoolType" required="false" visibility="visible" multi="false">
								<sci:help>Toggles whether to parse delimited N-Dimensional Array strings into N-Dimensional Array values.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false">
								<sci:help>Contains less commonly used parameters</sci:help>
								<sci:member>UndefinedString</sci:member>
								<sci:member>AllLines</sci:member>
								<sci:member>TrimWhitespace</sci:member>
								<sci:member>CheckSyntax</sci:member>
								<sci:member>CommentLines</sci:member>
								<sci:member>AddEmptyProperties</sci:member>
							</sci:arg>
							<sci:arg name="CommentLines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>A comma-separated list of line numbers and
line ranges to specify which lines should be 
ignored by the parser (column headers are read from the line that comes next).</sci:help>
							</sci:arg>
							<sci:arg name="UndefinedString" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Character or string to represent an undefined string read in the file. To make an empty string to be treated as an undefined value, set the parameter value to &quot;EmptyString&quot;.</sci:help>
							</sci:arg>
							<sci:arg name="AllLines" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, all lines of the text file become part of a single data record. The values for a column from each row become multiple [array] values for the property (column).</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="TrimWhitespace" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Trims whitespace from the left and right ends of each value</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="CheckSyntax" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Whether to perform a quick syntax check at the beginning of the file when it is opened, and if a problem is found, throw an error.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="AddEmptyProperties" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, then if a row does not have as many values as the number of columns, the missing properties are added to the data record as empty properties</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Join Behavior" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>&lt;p&gt;How to merge the created data record onto the incoming data record. Options are:&lt;/p&gt;
 
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;OverwriteOrCreate&lt;/i&gt;: Copies all properties from the joining data onto the base data, overwriting the values of any properties that already exist.
&lt;li&gt;&lt;i&gt;OverwriteExisting&lt;/i&gt;: Copies only those properties from the joining data to the base data that already exist on the base.
&lt;li&gt;&lt;i&gt;CreateIfNew&lt;/i&gt;: Copies only those properties from the joining data to the base data that do not already exist on the base data.
&lt;li&gt;&lt;i&gt;AppendOrCreate&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  The other joining properties that are not already present in the base data are copied there.
&lt;li&gt;&lt;i&gt;AppendExisting&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  No other properties are copied. 
&lt;li&gt;&lt;i&gt;Replace&lt;/i&gt;: The input data record is replaced by the created data record. &lt;/ul&gt;

</sci:help>
								<sci:legalval>OverwriteOrCreate</sci:legalval>
								<sci:legalval>OverwriteExisting</sci:legalval>
								<sci:legalval>CreateIfNew</sci:legalval>
								<sci:legalval>AppendOrCreate</sci:legalval>
								<sci:legalval>AppendExisting</sci:legalval>
								<sci:legalval selected="true">Replace</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval>ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Sep 07 15:31:15 2017</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Source&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>
#displayNames := Parameter(&apos;Source&apos;, 2);
if (#displayNames ne &apos;&apos;) then
  Expand(&apos;,&apos;, #displayNames);
end if;
#displayName := Trim(#displayNames[1]);
#dots := &apos;&apos;;
if (NumValues(#displayNames) &gt; 1) then
	#dots := &apos;...&apos;;
end if;
if(StrLength(#displayName) &gt; 0) then	
	/* Find the last slash or backslash, extract the end */
	#name := #displayName;
	#ls1 := FindLastSubstring(#name, &apos;/&apos;);
	#ls2 := FindLastSubstring(#name, &apos;\&apos;);
	if (#ls1 &gt; #ls2) then
		#name := Substring(#name, #ls1+1);
	elsif (#ls2 &gt; #ls1) then
		#name := Substring(#name, #ls2+1);
	end if;

	if (#name eq &apos;&apos;) then
		&apos;&apos;;
	elsif (Substring(#displayName, 1, 9) eq &apos;global://&apos;) then
		&apos;Read from @&apos; . #name . #dots;
	elsif (Substring(#displayName, 1, 11) eq &apos;property://&apos;) then
		&apos;Read from property &apos; . #name . #dots;
	else
		&apos;Read &apos; . #name . #dots;
	end if;
else
	&apos;&apos;;
end if;
			</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component that this component is based upon.</sci:help>
								<sci:value>Delimited Reader</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>DOCUMENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>4</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{7D2AF7C7-A077-4201-B10B-8E8283A5EADD}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>90 -820</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Reads data from text files containing one record per line with data separated by delimiters</sci:value>
								<sci:value>&lt;p&gt;The file or files are specified by &lt;i&gt;Source&lt;/i&gt;. The file(s) should contain textual data formatted with a single record per line. Individual property values on each line should be separated by a delimiter character (such as, space, comma, tab), as specified by &lt;i&gt;Delimiter&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;i&gt;HasColumnNames&lt;/i&gt; is True, the values on the first line of the file are treated as the property names. Otherwise, &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, and so on, are used as the property names.&lt;/p&gt;

Cells containing array data can be read by setting the &lt;i&gt;MultipleValueDelimiter&lt;/i&gt; option to the character that separates the array elements. (Of course, this cannot be the same as the delimiter character.) You can now use the &lt;i&gt;Unmerge Data&lt;/i&gt; component to unmerge these arrays into separate records.
&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;The new, recommended component for Excel (.xlsx or .xls) files that does not require Excel to be installed on the server machine, and therefore is operational on Linux and Windows platforms - &lt;a href=&quot;javascript:DoLink(&apos;{14D98B18-C990-432C-834B-7026565E5ABF}&apos;)&quot;&gt;Excel Reader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For non-delimited textual data, use &lt;a href=&quot;javascript:DoLink(&apos;{8056E8AD-33EA-42BB-9099-EAB24C3D08E6}&apos;)&quot;&gt;Text Reader&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>18.1.0.1581</sci:value>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>16</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\File Readers\Delimited Text Reader</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.DelimitedReader.1">
						<sci:component name="Delimited Text Reader" version="2">
							<sci:arg name="Source" type="URLType" required="true" visibility="visible" multi="false" expanded="true" legalvalsenforced="false">
								<sci:help>&lt;p&gt;
The location from which to read the data. Can be a file, a network resource, a global property, or a data record property.
&lt;/p&gt; 
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;For a file, enter a path.&lt;/li&gt;
&lt;li&gt;For a network resource, enter a network URL in the form &lt;b&gt;protocol://server:port/...&lt;/b&gt;. (If port is omitted, a default is used.) Protocols supported are:
	&lt;ul&gt;
	&lt;li&gt;http, https&lt;/li&gt;
	&lt;li&gt;ftp&lt;/li&gt;
	&lt;li&gt;hdfs (Hadoop Distributed File System)&lt;/li&gt;
	&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For a global property, enter &quot;global://property-name&quot;, or select &quot;Global Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;For a data record property, enter &quot;property://property-name&quot;, or add an input port and select &quot;Data Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;To read multiple files, enter a comma-separated list of any of the above.&lt;/i&gt;
&lt;/ul&gt;</sci:help>
								<sci:member>Maximum</sci:member>
								<sci:member>Keep Properties</sci:member>
								<sci:member>UTF-8 Auto Detect</sci:member>
								<sci:member>SourceTag</sci:member>
								<sci:member>HasColumnNames</sci:member>
								<sci:member>Column Name Lines</sci:member>
								<sci:member>Authentication Options</sci:member>
								<sci:value>/zfsdata/data/datasets/REAL_database_2018-08-25/Enamine_REAL_full_smiles_Part_04.zip</sci:value>
							</sci:arg>
							<sci:arg name="Authentication Options" type="GroupType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>For HTTP, HTTPS, and HDFS URLs, you may optionally specify authentication information for the URL in the following parameters</sci:help>
								<sci:member>Username</sci:member>
								<sci:member>Password</sci:member>
								<sci:member>Authentication Method</sci:member>
								<sci:member>KDC Server</sci:member>
								<sci:member>KDC Realm</sci:member>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HTTP or HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^(https?|hdfs):&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Authentication Method" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>Determines which method to use during authentication with an HTTP, HTTPS, or HDFS URL.

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Use Username and Password Parameters&lt;/b&gt;: Use the values provided by the parameter group&apos;s &lt;i&gt;Username&lt;/i&gt; and &lt;i&gt;Password&lt;/i&gt; parameters.
&lt;li&gt;&lt;b&gt;Use Pipeline Pilot Credentials&lt;/b&gt;: Use the username and password that were provided when the user logged into Pipeline Pilot if available.  NOTE: if the &lt;i&gt;Username&lt;/i&gt; parameter is provided, its value will override the user&apos;s logged in username.
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">Use Username and Password Parameters</sci:legalval>
								<sci:legalval>Use Pipeline Pilot Credentials</sci:legalval>
							</sci:arg>
							<sci:arg name="Username" type="UserNameType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>&lt;p&gt;
The username used to connect to the supplied URL.
&lt;/p&gt;
&lt;p&gt;
If the Authentication Method is set to &apos;Use Username and Password Parameters&apos;, then this parameter
must be filled in to log into the remote server.
&lt;/p&gt;
&lt;p&gt; 
If the Authentication Method is set to &apos;Use Pipeline Pilot Credentials&apos;, then this parameter can be left empty
and the logged in username is used. As an override option, if the username is filled in, this
username will be used along with the user&apos;s Pipeline Pilot password.
&lt;/p&gt;
</sci:help>
							</sci:arg>
							<sci:arg name="Password" type="xpass" encrypt="bf_1" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>The password used to authenticate to the URL.  This parameter is disabled if Authentication Method is not set to &apos;Use Username and Password Parameters&apos;.
</sci:help>
								<sci:enabledscript>SetDisabledDetails(&quot;To enable, set Authentication Method to &apos;Use Username and Password Parameters&apos;&quot;);
Parameter(&apos;Authentication Method&apos;) eq &apos;Use Username and Password Parameters&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Server" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Realm" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
								<sci:help>The maximum number of data records to read. If empty, all records are read.</sci:help>
								<sci:value>$(Maximum)</sci:value>
							</sci:arg>
							<sci:arg name="SourceTag" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies a tag format for identifying the source of data records. Causes a property named &lt;b&gt;SourceTag&lt;/b&gt; to be created to hold the value. Options and their associated tag values are:
&lt;ul&gt;
&lt;li&gt;None: No &lt;b&gt;SourceTag&lt;/b&gt; property is created and any existing &lt;b&gt;SourceTag&lt;/b&gt; properties are removed.
&lt;li&gt;Filename: The name of the file excluding its extension
&lt;li&gt;FilenameAndExtension: The name of the file including its file extension
&lt;li&gt;FullFilename: The name of the file, including its extension and directory path
&lt;li&gt;ZipFilename: When reading a compressed zip file, the filename within the compressed archive
&lt;li&gt;Number: When multiple files are read, a number (1, 2, 3...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;Letter: When multiple files are read , a letter (A, B, C...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;KeepCurrent: Keeps the current value of &lt;b&gt;SourceTag&lt;/b&gt; if present
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Filename</sci:legalval>
								<sci:legalval>FilenameAndExtension</sci:legalval>
								<sci:legalval>FullFilename</sci:legalval>
								<sci:legalval>ZipFilename</sci:legalval>
								<sci:legalval>Number</sci:legalval>
								<sci:legalval>Letter</sci:legalval>
								<sci:legalval>KeepCurrent</sci:legalval>
							</sci:arg>
							<sci:arg name="Keep Properties" type="PropertyPreviewType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies properties from &lt;i&gt;Source&lt;/i&gt; to retain for each output data record. If not specified, all properties are retained. A value of &quot;-&quot; (minus sign) specifies that no properties are retained.</sci:help>
							</sci:arg>
							<sci:arg name="UTF-8 Auto Detect" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies whether to attempt to infer the use of UTF-8 encoding in &lt;i&gt;Source&lt;/i&gt; files when a byte order mark (BOM) is absent from them.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;UTF-8 is a type of character encoding which represents international characters with multiple bytes, while basic Latin characters remain as a single byte.  If a file begins with a BOM, then the encoding can be inferred with confidence. If not, an indirect approach is necessary. This approach is not 100% reliable.  In some cases, valid text stored in different character encodings can appear to be valid UTF-8.  In these cases, the automatic detection will result in garbled text.  When this occurs, consider using the &lt;a href=&quot;javascript:DoLink(&apos;{B0B1B56C-3DF6-444C-BB78-B43211188F63}&apos;)&quot;&gt;Binary Reader&lt;/a&gt; to read the raw bytes from the file, then convert the data using the Pilotscript function &lt;b&gt;ConvertBytesToString&lt;/b&gt;, which allows you to specify the encoding.
&lt;/ul&gt;

</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="HasColumnNames" type="BoolType" required="true" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>If True, property names are taken from the first line of data in &lt;i&gt;Source&lt;/i&gt; files. If False, the first line is assumed to contain data, and properties are given names &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, etc.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Column Name Lines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>If the column name is part of the file, you can specify which line (or lines) are used to construct the property name. So &quot;4&quot; would declare the fourth line to contain the column names, and &quot;4-5&quot; means the values from both lines 4 and 5 will be used to construct the column names.

If not provided, the first non-comment line becomes the column name line.

Any other lines less than the largest column name line are considered comment lines and are ignored.</sci:help>
								<sci:enabledscript>parameter(&apos;HasColumnNames&apos;)</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Delimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies the character that separates fields. Options include:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;FigureOut:&lt;/b&gt; Determines the type automatically (looks for, in order: tab, comma, space, colon, semicolon).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Tab:&lt;/b&gt; For tab-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Space:&lt;/b&gt; For space-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Comma:&lt;/b&gt; For comma-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Colon:&lt;/b&gt; For colon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Semicolon:&lt;/b&gt; For semicolon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;$:&lt;/b&gt; For fields delimited bty the &quot;$&quot; character.&lt;/li&gt;
&lt;/ul&gt;
</sci:help>
								<sci:member>MultipleValueDelimiter</sci:member>
								<sci:member>ParseNDimensionalArrayStrings</sci:member>
								<sci:legalval selected="true">FigureOut</sci:legalval>
								<sci:legalval>Tab</sci:legalval>
								<sci:legalval>Space</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>$</sci:legalval>
							</sci:arg>
							<sci:arg name="MultipleValueDelimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The delimiter to use between multiple values contained in a single property. If the multiple value delimiter exists in any of the input strings in any property, they are separated into an array of values. If &quot;None&quot;, 
values are never separated into multiple values.</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Linefeed</sci:legalval>
							</sci:arg>
							<sci:arg name="ParseNDimensionalArrayStrings" type="BoolType" required="false" visibility="visible" multi="false">
								<sci:help>Toggles whether to parse delimited N-Dimensional Array strings into N-Dimensional Array values.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false">
								<sci:help>Contains less commonly used parameters</sci:help>
								<sci:member>UndefinedString</sci:member>
								<sci:member>AllLines</sci:member>
								<sci:member>TrimWhitespace</sci:member>
								<sci:member>CheckSyntax</sci:member>
								<sci:member>CommentLines</sci:member>
								<sci:member>AddEmptyProperties</sci:member>
							</sci:arg>
							<sci:arg name="CommentLines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>A comma-separated list of line numbers and
line ranges to specify which lines should be 
ignored by the parser (column headers are read from the line that comes next).</sci:help>
							</sci:arg>
							<sci:arg name="UndefinedString" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Character or string to represent an undefined string read in the file. To make an empty string to be treated as an undefined value, set the parameter value to &quot;EmptyString&quot;.</sci:help>
							</sci:arg>
							<sci:arg name="AllLines" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, all lines of the text file become part of a single data record. The values for a column from each row become multiple [array] values for the property (column).</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="TrimWhitespace" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Trims whitespace from the left and right ends of each value</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="CheckSyntax" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Whether to perform a quick syntax check at the beginning of the file when it is opened, and if a problem is found, throw an error.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="AddEmptyProperties" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, then if a row does not have as many values as the number of columns, the missing properties are added to the data record as empty properties</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Join Behavior" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>&lt;p&gt;How to merge the created data record onto the incoming data record. Options are:&lt;/p&gt;
 
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;OverwriteOrCreate&lt;/i&gt;: Copies all properties from the joining data onto the base data, overwriting the values of any properties that already exist.
&lt;li&gt;&lt;i&gt;OverwriteExisting&lt;/i&gt;: Copies only those properties from the joining data to the base data that already exist on the base.
&lt;li&gt;&lt;i&gt;CreateIfNew&lt;/i&gt;: Copies only those properties from the joining data to the base data that do not already exist on the base data.
&lt;li&gt;&lt;i&gt;AppendOrCreate&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  The other joining properties that are not already present in the base data are copied there.
&lt;li&gt;&lt;i&gt;AppendExisting&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  No other properties are copied. 
&lt;li&gt;&lt;i&gt;Replace&lt;/i&gt;: The input data record is replaced by the created data record. &lt;/ul&gt;

</sci:help>
								<sci:legalval>OverwriteOrCreate</sci:legalval>
								<sci:legalval>OverwriteExisting</sci:legalval>
								<sci:legalval>CreateIfNew</sci:legalval>
								<sci:legalval>AppendOrCreate</sci:legalval>
								<sci:legalval>AppendExisting</sci:legalval>
								<sci:legalval selected="true">Replace</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval>ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Sep 07 15:31:15 2017</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Source&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>
#displayNames := Parameter(&apos;Source&apos;, 2);
if (#displayNames ne &apos;&apos;) then
  Expand(&apos;,&apos;, #displayNames);
end if;
#displayName := Trim(#displayNames[1]);
#dots := &apos;&apos;;
if (NumValues(#displayNames) &gt; 1) then
	#dots := &apos;...&apos;;
end if;
if(StrLength(#displayName) &gt; 0) then	
	/* Find the last slash or backslash, extract the end */
	#name := #displayName;
	#ls1 := FindLastSubstring(#name, &apos;/&apos;);
	#ls2 := FindLastSubstring(#name, &apos;\&apos;);
	if (#ls1 &gt; #ls2) then
		#name := Substring(#name, #ls1+1);
	elsif (#ls2 &gt; #ls1) then
		#name := Substring(#name, #ls2+1);
	end if;

	if (#name eq &apos;&apos;) then
		&apos;&apos;;
	elsif (Substring(#displayName, 1, 9) eq &apos;global://&apos;) then
		&apos;Read from @&apos; . #name . #dots;
	elsif (Substring(#displayName, 1, 11) eq &apos;property://&apos;) then
		&apos;Read from property &apos; . #name . #dots;
	else
		&apos;Read &apos; . #name . #dots;
	end if;
else
	&apos;&apos;;
end if;
			</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component that this component is based upon.</sci:help>
								<sci:value>Delimited Reader</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>DOCUMENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>4</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{7D2AF7C7-A077-4201-B10B-8E8283A5EADD}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>90 -1195</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Reads data from text files containing one record per line with data separated by delimiters</sci:value>
								<sci:value>&lt;p&gt;The file or files are specified by &lt;i&gt;Source&lt;/i&gt;. The file(s) should contain textual data formatted with a single record per line. Individual property values on each line should be separated by a delimiter character (such as, space, comma, tab), as specified by &lt;i&gt;Delimiter&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;i&gt;HasColumnNames&lt;/i&gt; is True, the values on the first line of the file are treated as the property names. Otherwise, &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, and so on, are used as the property names.&lt;/p&gt;

Cells containing array data can be read by setting the &lt;i&gt;MultipleValueDelimiter&lt;/i&gt; option to the character that separates the array elements. (Of course, this cannot be the same as the delimiter character.) You can now use the &lt;i&gt;Unmerge Data&lt;/i&gt; component to unmerge these arrays into separate records.
&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;The new, recommended component for Excel (.xlsx or .xls) files that does not require Excel to be installed on the server machine, and therefore is operational on Linux and Windows platforms - &lt;a href=&quot;javascript:DoLink(&apos;{14D98B18-C990-432C-834B-7026565E5ABF}&apos;)&quot;&gt;Excel Reader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For non-delimited textual data, use &lt;a href=&quot;javascript:DoLink(&apos;{8056E8AD-33EA-42BB-9099-EAB24C3D08E6}&apos;)&quot;&gt;Text Reader&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>18.1.0.1581</sci:value>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>17</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\File Readers\Delimited Text Reader</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.DelimitedReader.1">
						<sci:component name="Delimited Text Reader" version="2">
							<sci:arg name="Source" type="URLType" required="true" visibility="visible" multi="false" expanded="true" legalvalsenforced="false">
								<sci:help>&lt;p&gt;
The location from which to read the data. Can be a file, a network resource, a global property, or a data record property.
&lt;/p&gt; 
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;For a file, enter a path.&lt;/li&gt;
&lt;li&gt;For a network resource, enter a network URL in the form &lt;b&gt;protocol://server:port/...&lt;/b&gt;. (If port is omitted, a default is used.) Protocols supported are:
	&lt;ul&gt;
	&lt;li&gt;http, https&lt;/li&gt;
	&lt;li&gt;ftp&lt;/li&gt;
	&lt;li&gt;hdfs (Hadoop Distributed File System)&lt;/li&gt;
	&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For a global property, enter &quot;global://property-name&quot;, or select &quot;Global Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;For a data record property, enter &quot;property://property-name&quot;, or add an input port and select &quot;Data Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;To read multiple files, enter a comma-separated list of any of the above.&lt;/i&gt;
&lt;/ul&gt;</sci:help>
								<sci:member>Maximum</sci:member>
								<sci:member>Keep Properties</sci:member>
								<sci:member>UTF-8 Auto Detect</sci:member>
								<sci:member>SourceTag</sci:member>
								<sci:member>HasColumnNames</sci:member>
								<sci:member>Column Name Lines</sci:member>
								<sci:member>Authentication Options</sci:member>
								<sci:value>/zfsdata/data/datasets/REAL_database_2018-08-25/Enamine_REAL_full_smiles_Part_05.zip</sci:value>
							</sci:arg>
							<sci:arg name="Authentication Options" type="GroupType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>For HTTP, HTTPS, and HDFS URLs, you may optionally specify authentication information for the URL in the following parameters</sci:help>
								<sci:member>Username</sci:member>
								<sci:member>Password</sci:member>
								<sci:member>Authentication Method</sci:member>
								<sci:member>KDC Server</sci:member>
								<sci:member>KDC Realm</sci:member>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HTTP or HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^(https?|hdfs):&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Authentication Method" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>Determines which method to use during authentication with an HTTP, HTTPS, or HDFS URL.

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Use Username and Password Parameters&lt;/b&gt;: Use the values provided by the parameter group&apos;s &lt;i&gt;Username&lt;/i&gt; and &lt;i&gt;Password&lt;/i&gt; parameters.
&lt;li&gt;&lt;b&gt;Use Pipeline Pilot Credentials&lt;/b&gt;: Use the username and password that were provided when the user logged into Pipeline Pilot if available.  NOTE: if the &lt;i&gt;Username&lt;/i&gt; parameter is provided, its value will override the user&apos;s logged in username.
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">Use Username and Password Parameters</sci:legalval>
								<sci:legalval>Use Pipeline Pilot Credentials</sci:legalval>
							</sci:arg>
							<sci:arg name="Username" type="UserNameType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>&lt;p&gt;
The username used to connect to the supplied URL.
&lt;/p&gt;
&lt;p&gt;
If the Authentication Method is set to &apos;Use Username and Password Parameters&apos;, then this parameter
must be filled in to log into the remote server.
&lt;/p&gt;
&lt;p&gt; 
If the Authentication Method is set to &apos;Use Pipeline Pilot Credentials&apos;, then this parameter can be left empty
and the logged in username is used. As an override option, if the username is filled in, this
username will be used along with the user&apos;s Pipeline Pilot password.
&lt;/p&gt;
</sci:help>
							</sci:arg>
							<sci:arg name="Password" type="xpass" encrypt="bf_1" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>The password used to authenticate to the URL.  This parameter is disabled if Authentication Method is not set to &apos;Use Username and Password Parameters&apos;.
</sci:help>
								<sci:enabledscript>SetDisabledDetails(&quot;To enable, set Authentication Method to &apos;Use Username and Password Parameters&apos;&quot;);
Parameter(&apos;Authentication Method&apos;) eq &apos;Use Username and Password Parameters&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Server" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Realm" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
								<sci:help>The maximum number of data records to read. If empty, all records are read.</sci:help>
								<sci:value>$(Maximum)</sci:value>
							</sci:arg>
							<sci:arg name="SourceTag" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies a tag format for identifying the source of data records. Causes a property named &lt;b&gt;SourceTag&lt;/b&gt; to be created to hold the value. Options and their associated tag values are:
&lt;ul&gt;
&lt;li&gt;None: No &lt;b&gt;SourceTag&lt;/b&gt; property is created and any existing &lt;b&gt;SourceTag&lt;/b&gt; properties are removed.
&lt;li&gt;Filename: The name of the file excluding its extension
&lt;li&gt;FilenameAndExtension: The name of the file including its file extension
&lt;li&gt;FullFilename: The name of the file, including its extension and directory path
&lt;li&gt;ZipFilename: When reading a compressed zip file, the filename within the compressed archive
&lt;li&gt;Number: When multiple files are read, a number (1, 2, 3...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;Letter: When multiple files are read , a letter (A, B, C...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;KeepCurrent: Keeps the current value of &lt;b&gt;SourceTag&lt;/b&gt; if present
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Filename</sci:legalval>
								<sci:legalval>FilenameAndExtension</sci:legalval>
								<sci:legalval>FullFilename</sci:legalval>
								<sci:legalval>ZipFilename</sci:legalval>
								<sci:legalval>Number</sci:legalval>
								<sci:legalval>Letter</sci:legalval>
								<sci:legalval>KeepCurrent</sci:legalval>
							</sci:arg>
							<sci:arg name="Keep Properties" type="PropertyPreviewType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies properties from &lt;i&gt;Source&lt;/i&gt; to retain for each output data record. If not specified, all properties are retained. A value of &quot;-&quot; (minus sign) specifies that no properties are retained.</sci:help>
							</sci:arg>
							<sci:arg name="UTF-8 Auto Detect" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies whether to attempt to infer the use of UTF-8 encoding in &lt;i&gt;Source&lt;/i&gt; files when a byte order mark (BOM) is absent from them.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;UTF-8 is a type of character encoding which represents international characters with multiple bytes, while basic Latin characters remain as a single byte.  If a file begins with a BOM, then the encoding can be inferred with confidence. If not, an indirect approach is necessary. This approach is not 100% reliable.  In some cases, valid text stored in different character encodings can appear to be valid UTF-8.  In these cases, the automatic detection will result in garbled text.  When this occurs, consider using the &lt;a href=&quot;javascript:DoLink(&apos;{B0B1B56C-3DF6-444C-BB78-B43211188F63}&apos;)&quot;&gt;Binary Reader&lt;/a&gt; to read the raw bytes from the file, then convert the data using the Pilotscript function &lt;b&gt;ConvertBytesToString&lt;/b&gt;, which allows you to specify the encoding.
&lt;/ul&gt;

</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="HasColumnNames" type="BoolType" required="true" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>If True, property names are taken from the first line of data in &lt;i&gt;Source&lt;/i&gt; files. If False, the first line is assumed to contain data, and properties are given names &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, etc.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Column Name Lines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>If the column name is part of the file, you can specify which line (or lines) are used to construct the property name. So &quot;4&quot; would declare the fourth line to contain the column names, and &quot;4-5&quot; means the values from both lines 4 and 5 will be used to construct the column names.

If not provided, the first non-comment line becomes the column name line.

Any other lines less than the largest column name line are considered comment lines and are ignored.</sci:help>
								<sci:enabledscript>parameter(&apos;HasColumnNames&apos;)</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Delimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies the character that separates fields. Options include:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;FigureOut:&lt;/b&gt; Determines the type automatically (looks for, in order: tab, comma, space, colon, semicolon).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Tab:&lt;/b&gt; For tab-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Space:&lt;/b&gt; For space-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Comma:&lt;/b&gt; For comma-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Colon:&lt;/b&gt; For colon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Semicolon:&lt;/b&gt; For semicolon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;$:&lt;/b&gt; For fields delimited bty the &quot;$&quot; character.&lt;/li&gt;
&lt;/ul&gt;
</sci:help>
								<sci:member>MultipleValueDelimiter</sci:member>
								<sci:member>ParseNDimensionalArrayStrings</sci:member>
								<sci:legalval selected="true">FigureOut</sci:legalval>
								<sci:legalval>Tab</sci:legalval>
								<sci:legalval>Space</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>$</sci:legalval>
							</sci:arg>
							<sci:arg name="MultipleValueDelimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The delimiter to use between multiple values contained in a single property. If the multiple value delimiter exists in any of the input strings in any property, they are separated into an array of values. If &quot;None&quot;, 
values are never separated into multiple values.</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Linefeed</sci:legalval>
							</sci:arg>
							<sci:arg name="ParseNDimensionalArrayStrings" type="BoolType" required="false" visibility="visible" multi="false">
								<sci:help>Toggles whether to parse delimited N-Dimensional Array strings into N-Dimensional Array values.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false">
								<sci:help>Contains less commonly used parameters</sci:help>
								<sci:member>UndefinedString</sci:member>
								<sci:member>AllLines</sci:member>
								<sci:member>TrimWhitespace</sci:member>
								<sci:member>CheckSyntax</sci:member>
								<sci:member>CommentLines</sci:member>
								<sci:member>AddEmptyProperties</sci:member>
							</sci:arg>
							<sci:arg name="CommentLines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>A comma-separated list of line numbers and
line ranges to specify which lines should be 
ignored by the parser (column headers are read from the line that comes next).</sci:help>
							</sci:arg>
							<sci:arg name="UndefinedString" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Character or string to represent an undefined string read in the file. To make an empty string to be treated as an undefined value, set the parameter value to &quot;EmptyString&quot;.</sci:help>
							</sci:arg>
							<sci:arg name="AllLines" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, all lines of the text file become part of a single data record. The values for a column from each row become multiple [array] values for the property (column).</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="TrimWhitespace" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Trims whitespace from the left and right ends of each value</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="CheckSyntax" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Whether to perform a quick syntax check at the beginning of the file when it is opened, and if a problem is found, throw an error.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="AddEmptyProperties" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, then if a row does not have as many values as the number of columns, the missing properties are added to the data record as empty properties</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Join Behavior" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>&lt;p&gt;How to merge the created data record onto the incoming data record. Options are:&lt;/p&gt;
 
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;OverwriteOrCreate&lt;/i&gt;: Copies all properties from the joining data onto the base data, overwriting the values of any properties that already exist.
&lt;li&gt;&lt;i&gt;OverwriteExisting&lt;/i&gt;: Copies only those properties from the joining data to the base data that already exist on the base.
&lt;li&gt;&lt;i&gt;CreateIfNew&lt;/i&gt;: Copies only those properties from the joining data to the base data that do not already exist on the base data.
&lt;li&gt;&lt;i&gt;AppendOrCreate&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  The other joining properties that are not already present in the base data are copied there.
&lt;li&gt;&lt;i&gt;AppendExisting&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  No other properties are copied. 
&lt;li&gt;&lt;i&gt;Replace&lt;/i&gt;: The input data record is replaced by the created data record. &lt;/ul&gt;

</sci:help>
								<sci:legalval>OverwriteOrCreate</sci:legalval>
								<sci:legalval>OverwriteExisting</sci:legalval>
								<sci:legalval>CreateIfNew</sci:legalval>
								<sci:legalval>AppendOrCreate</sci:legalval>
								<sci:legalval>AppendExisting</sci:legalval>
								<sci:legalval selected="true">Replace</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval>ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Sep 07 15:31:15 2017</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Source&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>
#displayNames := Parameter(&apos;Source&apos;, 2);
if (#displayNames ne &apos;&apos;) then
  Expand(&apos;,&apos;, #displayNames);
end if;
#displayName := Trim(#displayNames[1]);
#dots := &apos;&apos;;
if (NumValues(#displayNames) &gt; 1) then
	#dots := &apos;...&apos;;
end if;
if(StrLength(#displayName) &gt; 0) then	
	/* Find the last slash or backslash, extract the end */
	#name := #displayName;
	#ls1 := FindLastSubstring(#name, &apos;/&apos;);
	#ls2 := FindLastSubstring(#name, &apos;\&apos;);
	if (#ls1 &gt; #ls2) then
		#name := Substring(#name, #ls1+1);
	elsif (#ls2 &gt; #ls1) then
		#name := Substring(#name, #ls2+1);
	end if;

	if (#name eq &apos;&apos;) then
		&apos;&apos;;
	elsif (Substring(#displayName, 1, 9) eq &apos;global://&apos;) then
		&apos;Read from @&apos; . #name . #dots;
	elsif (Substring(#displayName, 1, 11) eq &apos;property://&apos;) then
		&apos;Read from property &apos; . #name . #dots;
	else
		&apos;Read &apos; . #name . #dots;
	end if;
else
	&apos;&apos;;
end if;
			</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component that this component is based upon.</sci:help>
								<sci:value>Delimited Reader</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>DOCUMENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>4</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{7D2AF7C7-A077-4201-B10B-8E8283A5EADD}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>90 -1545</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Reads data from text files containing one record per line with data separated by delimiters</sci:value>
								<sci:value>&lt;p&gt;The file or files are specified by &lt;i&gt;Source&lt;/i&gt;. The file(s) should contain textual data formatted with a single record per line. Individual property values on each line should be separated by a delimiter character (such as, space, comma, tab), as specified by &lt;i&gt;Delimiter&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;i&gt;HasColumnNames&lt;/i&gt; is True, the values on the first line of the file are treated as the property names. Otherwise, &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, and so on, are used as the property names.&lt;/p&gt;

Cells containing array data can be read by setting the &lt;i&gt;MultipleValueDelimiter&lt;/i&gt; option to the character that separates the array elements. (Of course, this cannot be the same as the delimiter character.) You can now use the &lt;i&gt;Unmerge Data&lt;/i&gt; component to unmerge these arrays into separate records.
&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;The new, recommended component for Excel (.xlsx or .xls) files that does not require Excel to be installed on the server machine, and therefore is operational on Linux and Windows platforms - &lt;a href=&quot;javascript:DoLink(&apos;{14D98B18-C990-432C-834B-7026565E5ABF}&apos;)&quot;&gt;Excel Reader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For non-delimited textual data, use &lt;a href=&quot;javascript:DoLink(&apos;{8056E8AD-33EA-42BB-9099-EAB24C3D08E6}&apos;)&quot;&gt;Text Reader&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>18.1.0.1581</sci:value>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>18</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\File Readers\Delimited Text Reader</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.DelimitedReader.1">
						<sci:component name="Delimited Text Reader" version="2">
							<sci:arg name="Source" type="URLType" required="true" visibility="visible" multi="false" expanded="true" legalvalsenforced="false">
								<sci:help>&lt;p&gt;
The location from which to read the data. Can be a file, a network resource, a global property, or a data record property.
&lt;/p&gt; 
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;For a file, enter a path.&lt;/li&gt;
&lt;li&gt;For a network resource, enter a network URL in the form &lt;b&gt;protocol://server:port/...&lt;/b&gt;. (If port is omitted, a default is used.) Protocols supported are:
	&lt;ul&gt;
	&lt;li&gt;http, https&lt;/li&gt;
	&lt;li&gt;ftp&lt;/li&gt;
	&lt;li&gt;hdfs (Hadoop Distributed File System)&lt;/li&gt;
	&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For a global property, enter &quot;global://property-name&quot;, or select &quot;Global Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;For a data record property, enter &quot;property://property-name&quot;, or add an input port and select &quot;Data Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;To read multiple files, enter a comma-separated list of any of the above.&lt;/i&gt;
&lt;/ul&gt;</sci:help>
								<sci:member>Maximum</sci:member>
								<sci:member>Keep Properties</sci:member>
								<sci:member>UTF-8 Auto Detect</sci:member>
								<sci:member>SourceTag</sci:member>
								<sci:member>HasColumnNames</sci:member>
								<sci:member>Column Name Lines</sci:member>
								<sci:member>Authentication Options</sci:member>
								<sci:value>/zfsdata/data/datasets/REAL_database_2018-08-25/Enamine_REAL_full_smiles_Part_06.zip</sci:value>
							</sci:arg>
							<sci:arg name="Authentication Options" type="GroupType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>For HTTP, HTTPS, and HDFS URLs, you may optionally specify authentication information for the URL in the following parameters</sci:help>
								<sci:member>Username</sci:member>
								<sci:member>Password</sci:member>
								<sci:member>Authentication Method</sci:member>
								<sci:member>KDC Server</sci:member>
								<sci:member>KDC Realm</sci:member>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HTTP or HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^(https?|hdfs):&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Authentication Method" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>Determines which method to use during authentication with an HTTP, HTTPS, or HDFS URL.

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Use Username and Password Parameters&lt;/b&gt;: Use the values provided by the parameter group&apos;s &lt;i&gt;Username&lt;/i&gt; and &lt;i&gt;Password&lt;/i&gt; parameters.
&lt;li&gt;&lt;b&gt;Use Pipeline Pilot Credentials&lt;/b&gt;: Use the username and password that were provided when the user logged into Pipeline Pilot if available.  NOTE: if the &lt;i&gt;Username&lt;/i&gt; parameter is provided, its value will override the user&apos;s logged in username.
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">Use Username and Password Parameters</sci:legalval>
								<sci:legalval>Use Pipeline Pilot Credentials</sci:legalval>
							</sci:arg>
							<sci:arg name="Username" type="UserNameType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>&lt;p&gt;
The username used to connect to the supplied URL.
&lt;/p&gt;
&lt;p&gt;
If the Authentication Method is set to &apos;Use Username and Password Parameters&apos;, then this parameter
must be filled in to log into the remote server.
&lt;/p&gt;
&lt;p&gt; 
If the Authentication Method is set to &apos;Use Pipeline Pilot Credentials&apos;, then this parameter can be left empty
and the logged in username is used. As an override option, if the username is filled in, this
username will be used along with the user&apos;s Pipeline Pilot password.
&lt;/p&gt;
</sci:help>
							</sci:arg>
							<sci:arg name="Password" type="xpass" encrypt="bf_1" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>The password used to authenticate to the URL.  This parameter is disabled if Authentication Method is not set to &apos;Use Username and Password Parameters&apos;.
</sci:help>
								<sci:enabledscript>SetDisabledDetails(&quot;To enable, set Authentication Method to &apos;Use Username and Password Parameters&apos;&quot;);
Parameter(&apos;Authentication Method&apos;) eq &apos;Use Username and Password Parameters&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Server" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Realm" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
								<sci:help>The maximum number of data records to read. If empty, all records are read.</sci:help>
								<sci:value>$(Maximum)</sci:value>
							</sci:arg>
							<sci:arg name="SourceTag" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies a tag format for identifying the source of data records. Causes a property named &lt;b&gt;SourceTag&lt;/b&gt; to be created to hold the value. Options and their associated tag values are:
&lt;ul&gt;
&lt;li&gt;None: No &lt;b&gt;SourceTag&lt;/b&gt; property is created and any existing &lt;b&gt;SourceTag&lt;/b&gt; properties are removed.
&lt;li&gt;Filename: The name of the file excluding its extension
&lt;li&gt;FilenameAndExtension: The name of the file including its file extension
&lt;li&gt;FullFilename: The name of the file, including its extension and directory path
&lt;li&gt;ZipFilename: When reading a compressed zip file, the filename within the compressed archive
&lt;li&gt;Number: When multiple files are read, a number (1, 2, 3...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;Letter: When multiple files are read , a letter (A, B, C...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;KeepCurrent: Keeps the current value of &lt;b&gt;SourceTag&lt;/b&gt; if present
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Filename</sci:legalval>
								<sci:legalval>FilenameAndExtension</sci:legalval>
								<sci:legalval>FullFilename</sci:legalval>
								<sci:legalval>ZipFilename</sci:legalval>
								<sci:legalval>Number</sci:legalval>
								<sci:legalval>Letter</sci:legalval>
								<sci:legalval>KeepCurrent</sci:legalval>
							</sci:arg>
							<sci:arg name="Keep Properties" type="PropertyPreviewType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies properties from &lt;i&gt;Source&lt;/i&gt; to retain for each output data record. If not specified, all properties are retained. A value of &quot;-&quot; (minus sign) specifies that no properties are retained.</sci:help>
							</sci:arg>
							<sci:arg name="UTF-8 Auto Detect" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies whether to attempt to infer the use of UTF-8 encoding in &lt;i&gt;Source&lt;/i&gt; files when a byte order mark (BOM) is absent from them.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;UTF-8 is a type of character encoding which represents international characters with multiple bytes, while basic Latin characters remain as a single byte.  If a file begins with a BOM, then the encoding can be inferred with confidence. If not, an indirect approach is necessary. This approach is not 100% reliable.  In some cases, valid text stored in different character encodings can appear to be valid UTF-8.  In these cases, the automatic detection will result in garbled text.  When this occurs, consider using the &lt;a href=&quot;javascript:DoLink(&apos;{B0B1B56C-3DF6-444C-BB78-B43211188F63}&apos;)&quot;&gt;Binary Reader&lt;/a&gt; to read the raw bytes from the file, then convert the data using the Pilotscript function &lt;b&gt;ConvertBytesToString&lt;/b&gt;, which allows you to specify the encoding.
&lt;/ul&gt;

</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="HasColumnNames" type="BoolType" required="true" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>If True, property names are taken from the first line of data in &lt;i&gt;Source&lt;/i&gt; files. If False, the first line is assumed to contain data, and properties are given names &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, etc.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Column Name Lines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>If the column name is part of the file, you can specify which line (or lines) are used to construct the property name. So &quot;4&quot; would declare the fourth line to contain the column names, and &quot;4-5&quot; means the values from both lines 4 and 5 will be used to construct the column names.

If not provided, the first non-comment line becomes the column name line.

Any other lines less than the largest column name line are considered comment lines and are ignored.</sci:help>
								<sci:enabledscript>parameter(&apos;HasColumnNames&apos;)</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Delimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies the character that separates fields. Options include:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;FigureOut:&lt;/b&gt; Determines the type automatically (looks for, in order: tab, comma, space, colon, semicolon).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Tab:&lt;/b&gt; For tab-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Space:&lt;/b&gt; For space-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Comma:&lt;/b&gt; For comma-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Colon:&lt;/b&gt; For colon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Semicolon:&lt;/b&gt; For semicolon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;$:&lt;/b&gt; For fields delimited bty the &quot;$&quot; character.&lt;/li&gt;
&lt;/ul&gt;
</sci:help>
								<sci:member>MultipleValueDelimiter</sci:member>
								<sci:member>ParseNDimensionalArrayStrings</sci:member>
								<sci:legalval selected="true">FigureOut</sci:legalval>
								<sci:legalval>Tab</sci:legalval>
								<sci:legalval>Space</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>$</sci:legalval>
							</sci:arg>
							<sci:arg name="MultipleValueDelimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The delimiter to use between multiple values contained in a single property. If the multiple value delimiter exists in any of the input strings in any property, they are separated into an array of values. If &quot;None&quot;, 
values are never separated into multiple values.</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Linefeed</sci:legalval>
							</sci:arg>
							<sci:arg name="ParseNDimensionalArrayStrings" type="BoolType" required="false" visibility="visible" multi="false">
								<sci:help>Toggles whether to parse delimited N-Dimensional Array strings into N-Dimensional Array values.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false">
								<sci:help>Contains less commonly used parameters</sci:help>
								<sci:member>UndefinedString</sci:member>
								<sci:member>AllLines</sci:member>
								<sci:member>TrimWhitespace</sci:member>
								<sci:member>CheckSyntax</sci:member>
								<sci:member>CommentLines</sci:member>
								<sci:member>AddEmptyProperties</sci:member>
							</sci:arg>
							<sci:arg name="CommentLines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>A comma-separated list of line numbers and
line ranges to specify which lines should be 
ignored by the parser (column headers are read from the line that comes next).</sci:help>
							</sci:arg>
							<sci:arg name="UndefinedString" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Character or string to represent an undefined string read in the file. To make an empty string to be treated as an undefined value, set the parameter value to &quot;EmptyString&quot;.</sci:help>
							</sci:arg>
							<sci:arg name="AllLines" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, all lines of the text file become part of a single data record. The values for a column from each row become multiple [array] values for the property (column).</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="TrimWhitespace" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Trims whitespace from the left and right ends of each value</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="CheckSyntax" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Whether to perform a quick syntax check at the beginning of the file when it is opened, and if a problem is found, throw an error.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="AddEmptyProperties" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, then if a row does not have as many values as the number of columns, the missing properties are added to the data record as empty properties</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Join Behavior" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>&lt;p&gt;How to merge the created data record onto the incoming data record. Options are:&lt;/p&gt;
 
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;OverwriteOrCreate&lt;/i&gt;: Copies all properties from the joining data onto the base data, overwriting the values of any properties that already exist.
&lt;li&gt;&lt;i&gt;OverwriteExisting&lt;/i&gt;: Copies only those properties from the joining data to the base data that already exist on the base.
&lt;li&gt;&lt;i&gt;CreateIfNew&lt;/i&gt;: Copies only those properties from the joining data to the base data that do not already exist on the base data.
&lt;li&gt;&lt;i&gt;AppendOrCreate&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  The other joining properties that are not already present in the base data are copied there.
&lt;li&gt;&lt;i&gt;AppendExisting&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  No other properties are copied. 
&lt;li&gt;&lt;i&gt;Replace&lt;/i&gt;: The input data record is replaced by the created data record. &lt;/ul&gt;

</sci:help>
								<sci:legalval>OverwriteOrCreate</sci:legalval>
								<sci:legalval>OverwriteExisting</sci:legalval>
								<sci:legalval>CreateIfNew</sci:legalval>
								<sci:legalval>AppendOrCreate</sci:legalval>
								<sci:legalval>AppendExisting</sci:legalval>
								<sci:legalval selected="true">Replace</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval>ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Sep 07 15:31:15 2017</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Source&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>
#displayNames := Parameter(&apos;Source&apos;, 2);
if (#displayNames ne &apos;&apos;) then
  Expand(&apos;,&apos;, #displayNames);
end if;
#displayName := Trim(#displayNames[1]);
#dots := &apos;&apos;;
if (NumValues(#displayNames) &gt; 1) then
	#dots := &apos;...&apos;;
end if;
if(StrLength(#displayName) &gt; 0) then	
	/* Find the last slash or backslash, extract the end */
	#name := #displayName;
	#ls1 := FindLastSubstring(#name, &apos;/&apos;);
	#ls2 := FindLastSubstring(#name, &apos;\&apos;);
	if (#ls1 &gt; #ls2) then
		#name := Substring(#name, #ls1+1);
	elsif (#ls2 &gt; #ls1) then
		#name := Substring(#name, #ls2+1);
	end if;

	if (#name eq &apos;&apos;) then
		&apos;&apos;;
	elsif (Substring(#displayName, 1, 9) eq &apos;global://&apos;) then
		&apos;Read from @&apos; . #name . #dots;
	elsif (Substring(#displayName, 1, 11) eq &apos;property://&apos;) then
		&apos;Read from property &apos; . #name . #dots;
	else
		&apos;Read &apos; . #name . #dots;
	end if;
else
	&apos;&apos;;
end if;
			</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component that this component is based upon.</sci:help>
								<sci:value>Delimited Reader</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>DOCUMENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>4</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{7D2AF7C7-A077-4201-B10B-8E8283A5EADD}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>90 -1920</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Reads data from text files containing one record per line with data separated by delimiters</sci:value>
								<sci:value>&lt;p&gt;The file or files are specified by &lt;i&gt;Source&lt;/i&gt;. The file(s) should contain textual data formatted with a single record per line. Individual property values on each line should be separated by a delimiter character (such as, space, comma, tab), as specified by &lt;i&gt;Delimiter&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;i&gt;HasColumnNames&lt;/i&gt; is True, the values on the first line of the file are treated as the property names. Otherwise, &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, and so on, are used as the property names.&lt;/p&gt;

Cells containing array data can be read by setting the &lt;i&gt;MultipleValueDelimiter&lt;/i&gt; option to the character that separates the array elements. (Of course, this cannot be the same as the delimiter character.) You can now use the &lt;i&gt;Unmerge Data&lt;/i&gt; component to unmerge these arrays into separate records.
&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;The new, recommended component for Excel (.xlsx or .xls) files that does not require Excel to be installed on the server machine, and therefore is operational on Linux and Windows platforms - &lt;a href=&quot;javascript:DoLink(&apos;{14D98B18-C990-432C-834B-7026565E5ABF}&apos;)&quot;&gt;Excel Reader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For non-delimited textual data, use &lt;a href=&quot;javascript:DoLink(&apos;{8056E8AD-33EA-42BB-9099-EAB24C3D08E6}&apos;)&quot;&gt;Text Reader&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>18.1.0.1581</sci:value>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>19</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\File Readers\Delimited Text Reader</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.DelimitedReader.1">
						<sci:component name="Delimited Text Reader" version="2">
							<sci:arg name="Source" type="URLType" required="true" visibility="visible" multi="false" expanded="true" legalvalsenforced="false">
								<sci:help>&lt;p&gt;
The location from which to read the data. Can be a file, a network resource, a global property, or a data record property.
&lt;/p&gt; 
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;For a file, enter a path.&lt;/li&gt;
&lt;li&gt;For a network resource, enter a network URL in the form &lt;b&gt;protocol://server:port/...&lt;/b&gt;. (If port is omitted, a default is used.) Protocols supported are:
	&lt;ul&gt;
	&lt;li&gt;http, https&lt;/li&gt;
	&lt;li&gt;ftp&lt;/li&gt;
	&lt;li&gt;hdfs (Hadoop Distributed File System)&lt;/li&gt;
	&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For a global property, enter &quot;global://property-name&quot;, or select &quot;Global Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;For a data record property, enter &quot;property://property-name&quot;, or add an input port and select &quot;Data Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;To read multiple files, enter a comma-separated list of any of the above.&lt;/i&gt;
&lt;/ul&gt;</sci:help>
								<sci:member>Maximum</sci:member>
								<sci:member>Keep Properties</sci:member>
								<sci:member>UTF-8 Auto Detect</sci:member>
								<sci:member>SourceTag</sci:member>
								<sci:member>HasColumnNames</sci:member>
								<sci:member>Column Name Lines</sci:member>
								<sci:member>Authentication Options</sci:member>
								<sci:value>/zfsdata/data/datasets/REAL_database_2018-08-25/Enamine_REAL_full_smiles_Part_07.zip</sci:value>
							</sci:arg>
							<sci:arg name="Authentication Options" type="GroupType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>For HTTP, HTTPS, and HDFS URLs, you may optionally specify authentication information for the URL in the following parameters</sci:help>
								<sci:member>Username</sci:member>
								<sci:member>Password</sci:member>
								<sci:member>Authentication Method</sci:member>
								<sci:member>KDC Server</sci:member>
								<sci:member>KDC Realm</sci:member>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HTTP or HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^(https?|hdfs):&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Authentication Method" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>Determines which method to use during authentication with an HTTP, HTTPS, or HDFS URL.

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Use Username and Password Parameters&lt;/b&gt;: Use the values provided by the parameter group&apos;s &lt;i&gt;Username&lt;/i&gt; and &lt;i&gt;Password&lt;/i&gt; parameters.
&lt;li&gt;&lt;b&gt;Use Pipeline Pilot Credentials&lt;/b&gt;: Use the username and password that were provided when the user logged into Pipeline Pilot if available.  NOTE: if the &lt;i&gt;Username&lt;/i&gt; parameter is provided, its value will override the user&apos;s logged in username.
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">Use Username and Password Parameters</sci:legalval>
								<sci:legalval>Use Pipeline Pilot Credentials</sci:legalval>
							</sci:arg>
							<sci:arg name="Username" type="UserNameType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>&lt;p&gt;
The username used to connect to the supplied URL.
&lt;/p&gt;
&lt;p&gt;
If the Authentication Method is set to &apos;Use Username and Password Parameters&apos;, then this parameter
must be filled in to log into the remote server.
&lt;/p&gt;
&lt;p&gt; 
If the Authentication Method is set to &apos;Use Pipeline Pilot Credentials&apos;, then this parameter can be left empty
and the logged in username is used. As an override option, if the username is filled in, this
username will be used along with the user&apos;s Pipeline Pilot password.
&lt;/p&gt;
</sci:help>
							</sci:arg>
							<sci:arg name="Password" type="xpass" encrypt="bf_1" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>The password used to authenticate to the URL.  This parameter is disabled if Authentication Method is not set to &apos;Use Username and Password Parameters&apos;.
</sci:help>
								<sci:enabledscript>SetDisabledDetails(&quot;To enable, set Authentication Method to &apos;Use Username and Password Parameters&apos;&quot;);
Parameter(&apos;Authentication Method&apos;) eq &apos;Use Username and Password Parameters&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Server" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Realm" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
								<sci:help>The maximum number of data records to read. If empty, all records are read.</sci:help>
								<sci:value>$(Maximum)</sci:value>
							</sci:arg>
							<sci:arg name="SourceTag" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies a tag format for identifying the source of data records. Causes a property named &lt;b&gt;SourceTag&lt;/b&gt; to be created to hold the value. Options and their associated tag values are:
&lt;ul&gt;
&lt;li&gt;None: No &lt;b&gt;SourceTag&lt;/b&gt; property is created and any existing &lt;b&gt;SourceTag&lt;/b&gt; properties are removed.
&lt;li&gt;Filename: The name of the file excluding its extension
&lt;li&gt;FilenameAndExtension: The name of the file including its file extension
&lt;li&gt;FullFilename: The name of the file, including its extension and directory path
&lt;li&gt;ZipFilename: When reading a compressed zip file, the filename within the compressed archive
&lt;li&gt;Number: When multiple files are read, a number (1, 2, 3...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;Letter: When multiple files are read , a letter (A, B, C...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;KeepCurrent: Keeps the current value of &lt;b&gt;SourceTag&lt;/b&gt; if present
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Filename</sci:legalval>
								<sci:legalval>FilenameAndExtension</sci:legalval>
								<sci:legalval>FullFilename</sci:legalval>
								<sci:legalval>ZipFilename</sci:legalval>
								<sci:legalval>Number</sci:legalval>
								<sci:legalval>Letter</sci:legalval>
								<sci:legalval>KeepCurrent</sci:legalval>
							</sci:arg>
							<sci:arg name="Keep Properties" type="PropertyPreviewType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies properties from &lt;i&gt;Source&lt;/i&gt; to retain for each output data record. If not specified, all properties are retained. A value of &quot;-&quot; (minus sign) specifies that no properties are retained.</sci:help>
							</sci:arg>
							<sci:arg name="UTF-8 Auto Detect" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies whether to attempt to infer the use of UTF-8 encoding in &lt;i&gt;Source&lt;/i&gt; files when a byte order mark (BOM) is absent from them.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;UTF-8 is a type of character encoding which represents international characters with multiple bytes, while basic Latin characters remain as a single byte.  If a file begins with a BOM, then the encoding can be inferred with confidence. If not, an indirect approach is necessary. This approach is not 100% reliable.  In some cases, valid text stored in different character encodings can appear to be valid UTF-8.  In these cases, the automatic detection will result in garbled text.  When this occurs, consider using the &lt;a href=&quot;javascript:DoLink(&apos;{B0B1B56C-3DF6-444C-BB78-B43211188F63}&apos;)&quot;&gt;Binary Reader&lt;/a&gt; to read the raw bytes from the file, then convert the data using the Pilotscript function &lt;b&gt;ConvertBytesToString&lt;/b&gt;, which allows you to specify the encoding.
&lt;/ul&gt;

</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="HasColumnNames" type="BoolType" required="true" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>If True, property names are taken from the first line of data in &lt;i&gt;Source&lt;/i&gt; files. If False, the first line is assumed to contain data, and properties are given names &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, etc.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Column Name Lines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>If the column name is part of the file, you can specify which line (or lines) are used to construct the property name. So &quot;4&quot; would declare the fourth line to contain the column names, and &quot;4-5&quot; means the values from both lines 4 and 5 will be used to construct the column names.

If not provided, the first non-comment line becomes the column name line.

Any other lines less than the largest column name line are considered comment lines and are ignored.</sci:help>
								<sci:enabledscript>parameter(&apos;HasColumnNames&apos;)</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Delimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies the character that separates fields. Options include:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;FigureOut:&lt;/b&gt; Determines the type automatically (looks for, in order: tab, comma, space, colon, semicolon).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Tab:&lt;/b&gt; For tab-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Space:&lt;/b&gt; For space-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Comma:&lt;/b&gt; For comma-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Colon:&lt;/b&gt; For colon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Semicolon:&lt;/b&gt; For semicolon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;$:&lt;/b&gt; For fields delimited bty the &quot;$&quot; character.&lt;/li&gt;
&lt;/ul&gt;
</sci:help>
								<sci:member>MultipleValueDelimiter</sci:member>
								<sci:member>ParseNDimensionalArrayStrings</sci:member>
								<sci:legalval selected="true">FigureOut</sci:legalval>
								<sci:legalval>Tab</sci:legalval>
								<sci:legalval>Space</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>$</sci:legalval>
							</sci:arg>
							<sci:arg name="MultipleValueDelimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The delimiter to use between multiple values contained in a single property. If the multiple value delimiter exists in any of the input strings in any property, they are separated into an array of values. If &quot;None&quot;, 
values are never separated into multiple values.</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Linefeed</sci:legalval>
							</sci:arg>
							<sci:arg name="ParseNDimensionalArrayStrings" type="BoolType" required="false" visibility="visible" multi="false">
								<sci:help>Toggles whether to parse delimited N-Dimensional Array strings into N-Dimensional Array values.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false">
								<sci:help>Contains less commonly used parameters</sci:help>
								<sci:member>UndefinedString</sci:member>
								<sci:member>AllLines</sci:member>
								<sci:member>TrimWhitespace</sci:member>
								<sci:member>CheckSyntax</sci:member>
								<sci:member>CommentLines</sci:member>
								<sci:member>AddEmptyProperties</sci:member>
							</sci:arg>
							<sci:arg name="CommentLines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>A comma-separated list of line numbers and
line ranges to specify which lines should be 
ignored by the parser (column headers are read from the line that comes next).</sci:help>
							</sci:arg>
							<sci:arg name="UndefinedString" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Character or string to represent an undefined string read in the file. To make an empty string to be treated as an undefined value, set the parameter value to &quot;EmptyString&quot;.</sci:help>
							</sci:arg>
							<sci:arg name="AllLines" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, all lines of the text file become part of a single data record. The values for a column from each row become multiple [array] values for the property (column).</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="TrimWhitespace" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Trims whitespace from the left and right ends of each value</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="CheckSyntax" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Whether to perform a quick syntax check at the beginning of the file when it is opened, and if a problem is found, throw an error.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="AddEmptyProperties" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, then if a row does not have as many values as the number of columns, the missing properties are added to the data record as empty properties</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Join Behavior" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>&lt;p&gt;How to merge the created data record onto the incoming data record. Options are:&lt;/p&gt;
 
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;OverwriteOrCreate&lt;/i&gt;: Copies all properties from the joining data onto the base data, overwriting the values of any properties that already exist.
&lt;li&gt;&lt;i&gt;OverwriteExisting&lt;/i&gt;: Copies only those properties from the joining data to the base data that already exist on the base.
&lt;li&gt;&lt;i&gt;CreateIfNew&lt;/i&gt;: Copies only those properties from the joining data to the base data that do not already exist on the base data.
&lt;li&gt;&lt;i&gt;AppendOrCreate&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  The other joining properties that are not already present in the base data are copied there.
&lt;li&gt;&lt;i&gt;AppendExisting&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  No other properties are copied. 
&lt;li&gt;&lt;i&gt;Replace&lt;/i&gt;: The input data record is replaced by the created data record. &lt;/ul&gt;

</sci:help>
								<sci:legalval>OverwriteOrCreate</sci:legalval>
								<sci:legalval>OverwriteExisting</sci:legalval>
								<sci:legalval>CreateIfNew</sci:legalval>
								<sci:legalval>AppendOrCreate</sci:legalval>
								<sci:legalval>AppendExisting</sci:legalval>
								<sci:legalval selected="true">Replace</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval>ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Sep 07 15:31:15 2017</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Source&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>
#displayNames := Parameter(&apos;Source&apos;, 2);
if (#displayNames ne &apos;&apos;) then
  Expand(&apos;,&apos;, #displayNames);
end if;
#displayName := Trim(#displayNames[1]);
#dots := &apos;&apos;;
if (NumValues(#displayNames) &gt; 1) then
	#dots := &apos;...&apos;;
end if;
if(StrLength(#displayName) &gt; 0) then	
	/* Find the last slash or backslash, extract the end */
	#name := #displayName;
	#ls1 := FindLastSubstring(#name, &apos;/&apos;);
	#ls2 := FindLastSubstring(#name, &apos;\&apos;);
	if (#ls1 &gt; #ls2) then
		#name := Substring(#name, #ls1+1);
	elsif (#ls2 &gt; #ls1) then
		#name := Substring(#name, #ls2+1);
	end if;

	if (#name eq &apos;&apos;) then
		&apos;&apos;;
	elsif (Substring(#displayName, 1, 9) eq &apos;global://&apos;) then
		&apos;Read from @&apos; . #name . #dots;
	elsif (Substring(#displayName, 1, 11) eq &apos;property://&apos;) then
		&apos;Read from property &apos; . #name . #dots;
	else
		&apos;Read &apos; . #name . #dots;
	end if;
else
	&apos;&apos;;
end if;
			</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component that this component is based upon.</sci:help>
								<sci:value>Delimited Reader</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>DOCUMENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>4</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{7D2AF7C7-A077-4201-B10B-8E8283A5EADD}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>90 -2295</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Reads data from text files containing one record per line with data separated by delimiters</sci:value>
								<sci:value>&lt;p&gt;The file or files are specified by &lt;i&gt;Source&lt;/i&gt;. The file(s) should contain textual data formatted with a single record per line. Individual property values on each line should be separated by a delimiter character (such as, space, comma, tab), as specified by &lt;i&gt;Delimiter&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;i&gt;HasColumnNames&lt;/i&gt; is True, the values on the first line of the file are treated as the property names. Otherwise, &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, and so on, are used as the property names.&lt;/p&gt;

Cells containing array data can be read by setting the &lt;i&gt;MultipleValueDelimiter&lt;/i&gt; option to the character that separates the array elements. (Of course, this cannot be the same as the delimiter character.) You can now use the &lt;i&gt;Unmerge Data&lt;/i&gt; component to unmerge these arrays into separate records.
&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;The new, recommended component for Excel (.xlsx or .xls) files that does not require Excel to be installed on the server machine, and therefore is operational on Linux and Windows platforms - &lt;a href=&quot;javascript:DoLink(&apos;{14D98B18-C990-432C-834B-7026565E5ABF}&apos;)&quot;&gt;Excel Reader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For non-delimited textual data, use &lt;a href=&quot;javascript:DoLink(&apos;{8056E8AD-33EA-42BB-9099-EAB24C3D08E6}&apos;)&quot;&gt;Text Reader&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>18.1.0.1581</sci:value>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>20</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\File Readers\Delimited Text Reader</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.DelimitedReader.1">
						<sci:component name="Delimited Text Reader" version="2">
							<sci:arg name="Source" type="URLType" required="true" visibility="visible" multi="false" expanded="true" legalvalsenforced="false">
								<sci:help>&lt;p&gt;
The location from which to read the data. Can be a file, a network resource, a global property, or a data record property.
&lt;/p&gt; 
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;For a file, enter a path.&lt;/li&gt;
&lt;li&gt;For a network resource, enter a network URL in the form &lt;b&gt;protocol://server:port/...&lt;/b&gt;. (If port is omitted, a default is used.) Protocols supported are:
	&lt;ul&gt;
	&lt;li&gt;http, https&lt;/li&gt;
	&lt;li&gt;ftp&lt;/li&gt;
	&lt;li&gt;hdfs (Hadoop Distributed File System)&lt;/li&gt;
	&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For a global property, enter &quot;global://property-name&quot;, or select &quot;Global Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;For a data record property, enter &quot;property://property-name&quot;, or add an input port and select &quot;Data Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;To read multiple files, enter a comma-separated list of any of the above.&lt;/i&gt;
&lt;/ul&gt;</sci:help>
								<sci:member>Maximum</sci:member>
								<sci:member>Keep Properties</sci:member>
								<sci:member>UTF-8 Auto Detect</sci:member>
								<sci:member>SourceTag</sci:member>
								<sci:member>HasColumnNames</sci:member>
								<sci:member>Column Name Lines</sci:member>
								<sci:member>Authentication Options</sci:member>
								<sci:value>/zfsdata/data/datasets/REAL_database_2018-08-25/Enamine_REAL_full_smiles_Part_08.zip</sci:value>
							</sci:arg>
							<sci:arg name="Authentication Options" type="GroupType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>For HTTP, HTTPS, and HDFS URLs, you may optionally specify authentication information for the URL in the following parameters</sci:help>
								<sci:member>Username</sci:member>
								<sci:member>Password</sci:member>
								<sci:member>Authentication Method</sci:member>
								<sci:member>KDC Server</sci:member>
								<sci:member>KDC Realm</sci:member>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HTTP or HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^(https?|hdfs):&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Authentication Method" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>Determines which method to use during authentication with an HTTP, HTTPS, or HDFS URL.

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Use Username and Password Parameters&lt;/b&gt;: Use the values provided by the parameter group&apos;s &lt;i&gt;Username&lt;/i&gt; and &lt;i&gt;Password&lt;/i&gt; parameters.
&lt;li&gt;&lt;b&gt;Use Pipeline Pilot Credentials&lt;/b&gt;: Use the username and password that were provided when the user logged into Pipeline Pilot if available.  NOTE: if the &lt;i&gt;Username&lt;/i&gt; parameter is provided, its value will override the user&apos;s logged in username.
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">Use Username and Password Parameters</sci:legalval>
								<sci:legalval>Use Pipeline Pilot Credentials</sci:legalval>
							</sci:arg>
							<sci:arg name="Username" type="UserNameType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>&lt;p&gt;
The username used to connect to the supplied URL.
&lt;/p&gt;
&lt;p&gt;
If the Authentication Method is set to &apos;Use Username and Password Parameters&apos;, then this parameter
must be filled in to log into the remote server.
&lt;/p&gt;
&lt;p&gt; 
If the Authentication Method is set to &apos;Use Pipeline Pilot Credentials&apos;, then this parameter can be left empty
and the logged in username is used. As an override option, if the username is filled in, this
username will be used along with the user&apos;s Pipeline Pilot password.
&lt;/p&gt;
</sci:help>
							</sci:arg>
							<sci:arg name="Password" type="xpass" encrypt="bf_1" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>The password used to authenticate to the URL.  This parameter is disabled if Authentication Method is not set to &apos;Use Username and Password Parameters&apos;.
</sci:help>
								<sci:enabledscript>SetDisabledDetails(&quot;To enable, set Authentication Method to &apos;Use Username and Password Parameters&apos;&quot;);
Parameter(&apos;Authentication Method&apos;) eq &apos;Use Username and Password Parameters&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Server" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Realm" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
								<sci:help>The maximum number of data records to read. If empty, all records are read.</sci:help>
								<sci:value>$(Maximum)</sci:value>
							</sci:arg>
							<sci:arg name="SourceTag" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies a tag format for identifying the source of data records. Causes a property named &lt;b&gt;SourceTag&lt;/b&gt; to be created to hold the value. Options and their associated tag values are:
&lt;ul&gt;
&lt;li&gt;None: No &lt;b&gt;SourceTag&lt;/b&gt; property is created and any existing &lt;b&gt;SourceTag&lt;/b&gt; properties are removed.
&lt;li&gt;Filename: The name of the file excluding its extension
&lt;li&gt;FilenameAndExtension: The name of the file including its file extension
&lt;li&gt;FullFilename: The name of the file, including its extension and directory path
&lt;li&gt;ZipFilename: When reading a compressed zip file, the filename within the compressed archive
&lt;li&gt;Number: When multiple files are read, a number (1, 2, 3...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;Letter: When multiple files are read , a letter (A, B, C...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;KeepCurrent: Keeps the current value of &lt;b&gt;SourceTag&lt;/b&gt; if present
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Filename</sci:legalval>
								<sci:legalval>FilenameAndExtension</sci:legalval>
								<sci:legalval>FullFilename</sci:legalval>
								<sci:legalval>ZipFilename</sci:legalval>
								<sci:legalval>Number</sci:legalval>
								<sci:legalval>Letter</sci:legalval>
								<sci:legalval>KeepCurrent</sci:legalval>
							</sci:arg>
							<sci:arg name="Keep Properties" type="PropertyPreviewType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies properties from &lt;i&gt;Source&lt;/i&gt; to retain for each output data record. If not specified, all properties are retained. A value of &quot;-&quot; (minus sign) specifies that no properties are retained.</sci:help>
							</sci:arg>
							<sci:arg name="UTF-8 Auto Detect" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies whether to attempt to infer the use of UTF-8 encoding in &lt;i&gt;Source&lt;/i&gt; files when a byte order mark (BOM) is absent from them.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;UTF-8 is a type of character encoding which represents international characters with multiple bytes, while basic Latin characters remain as a single byte.  If a file begins with a BOM, then the encoding can be inferred with confidence. If not, an indirect approach is necessary. This approach is not 100% reliable.  In some cases, valid text stored in different character encodings can appear to be valid UTF-8.  In these cases, the automatic detection will result in garbled text.  When this occurs, consider using the &lt;a href=&quot;javascript:DoLink(&apos;{B0B1B56C-3DF6-444C-BB78-B43211188F63}&apos;)&quot;&gt;Binary Reader&lt;/a&gt; to read the raw bytes from the file, then convert the data using the Pilotscript function &lt;b&gt;ConvertBytesToString&lt;/b&gt;, which allows you to specify the encoding.
&lt;/ul&gt;

</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="HasColumnNames" type="BoolType" required="true" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>If True, property names are taken from the first line of data in &lt;i&gt;Source&lt;/i&gt; files. If False, the first line is assumed to contain data, and properties are given names &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, etc.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Column Name Lines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>If the column name is part of the file, you can specify which line (or lines) are used to construct the property name. So &quot;4&quot; would declare the fourth line to contain the column names, and &quot;4-5&quot; means the values from both lines 4 and 5 will be used to construct the column names.

If not provided, the first non-comment line becomes the column name line.

Any other lines less than the largest column name line are considered comment lines and are ignored.</sci:help>
								<sci:enabledscript>parameter(&apos;HasColumnNames&apos;)</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Delimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies the character that separates fields. Options include:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;FigureOut:&lt;/b&gt; Determines the type automatically (looks for, in order: tab, comma, space, colon, semicolon).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Tab:&lt;/b&gt; For tab-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Space:&lt;/b&gt; For space-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Comma:&lt;/b&gt; For comma-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Colon:&lt;/b&gt; For colon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Semicolon:&lt;/b&gt; For semicolon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;$:&lt;/b&gt; For fields delimited bty the &quot;$&quot; character.&lt;/li&gt;
&lt;/ul&gt;
</sci:help>
								<sci:member>MultipleValueDelimiter</sci:member>
								<sci:member>ParseNDimensionalArrayStrings</sci:member>
								<sci:legalval selected="true">FigureOut</sci:legalval>
								<sci:legalval>Tab</sci:legalval>
								<sci:legalval>Space</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>$</sci:legalval>
							</sci:arg>
							<sci:arg name="MultipleValueDelimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The delimiter to use between multiple values contained in a single property. If the multiple value delimiter exists in any of the input strings in any property, they are separated into an array of values. If &quot;None&quot;, 
values are never separated into multiple values.</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Linefeed</sci:legalval>
							</sci:arg>
							<sci:arg name="ParseNDimensionalArrayStrings" type="BoolType" required="false" visibility="visible" multi="false">
								<sci:help>Toggles whether to parse delimited N-Dimensional Array strings into N-Dimensional Array values.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false">
								<sci:help>Contains less commonly used parameters</sci:help>
								<sci:member>UndefinedString</sci:member>
								<sci:member>AllLines</sci:member>
								<sci:member>TrimWhitespace</sci:member>
								<sci:member>CheckSyntax</sci:member>
								<sci:member>CommentLines</sci:member>
								<sci:member>AddEmptyProperties</sci:member>
							</sci:arg>
							<sci:arg name="CommentLines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>A comma-separated list of line numbers and
line ranges to specify which lines should be 
ignored by the parser (column headers are read from the line that comes next).</sci:help>
							</sci:arg>
							<sci:arg name="UndefinedString" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Character or string to represent an undefined string read in the file. To make an empty string to be treated as an undefined value, set the parameter value to &quot;EmptyString&quot;.</sci:help>
							</sci:arg>
							<sci:arg name="AllLines" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, all lines of the text file become part of a single data record. The values for a column from each row become multiple [array] values for the property (column).</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="TrimWhitespace" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Trims whitespace from the left and right ends of each value</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="CheckSyntax" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Whether to perform a quick syntax check at the beginning of the file when it is opened, and if a problem is found, throw an error.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="AddEmptyProperties" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, then if a row does not have as many values as the number of columns, the missing properties are added to the data record as empty properties</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Join Behavior" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>&lt;p&gt;How to merge the created data record onto the incoming data record. Options are:&lt;/p&gt;
 
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;OverwriteOrCreate&lt;/i&gt;: Copies all properties from the joining data onto the base data, overwriting the values of any properties that already exist.
&lt;li&gt;&lt;i&gt;OverwriteExisting&lt;/i&gt;: Copies only those properties from the joining data to the base data that already exist on the base.
&lt;li&gt;&lt;i&gt;CreateIfNew&lt;/i&gt;: Copies only those properties from the joining data to the base data that do not already exist on the base data.
&lt;li&gt;&lt;i&gt;AppendOrCreate&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  The other joining properties that are not already present in the base data are copied there.
&lt;li&gt;&lt;i&gt;AppendExisting&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  No other properties are copied. 
&lt;li&gt;&lt;i&gt;Replace&lt;/i&gt;: The input data record is replaced by the created data record. &lt;/ul&gt;

</sci:help>
								<sci:legalval>OverwriteOrCreate</sci:legalval>
								<sci:legalval>OverwriteExisting</sci:legalval>
								<sci:legalval>CreateIfNew</sci:legalval>
								<sci:legalval>AppendOrCreate</sci:legalval>
								<sci:legalval>AppendExisting</sci:legalval>
								<sci:legalval selected="true">Replace</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval>ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Sep 07 15:31:15 2017</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Source&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>
#displayNames := Parameter(&apos;Source&apos;, 2);
if (#displayNames ne &apos;&apos;) then
  Expand(&apos;,&apos;, #displayNames);
end if;
#displayName := Trim(#displayNames[1]);
#dots := &apos;&apos;;
if (NumValues(#displayNames) &gt; 1) then
	#dots := &apos;...&apos;;
end if;
if(StrLength(#displayName) &gt; 0) then	
	/* Find the last slash or backslash, extract the end */
	#name := #displayName;
	#ls1 := FindLastSubstring(#name, &apos;/&apos;);
	#ls2 := FindLastSubstring(#name, &apos;\&apos;);
	if (#ls1 &gt; #ls2) then
		#name := Substring(#name, #ls1+1);
	elsif (#ls2 &gt; #ls1) then
		#name := Substring(#name, #ls2+1);
	end if;

	if (#name eq &apos;&apos;) then
		&apos;&apos;;
	elsif (Substring(#displayName, 1, 9) eq &apos;global://&apos;) then
		&apos;Read from @&apos; . #name . #dots;
	elsif (Substring(#displayName, 1, 11) eq &apos;property://&apos;) then
		&apos;Read from property &apos; . #name . #dots;
	else
		&apos;Read &apos; . #name . #dots;
	end if;
else
	&apos;&apos;;
end if;
			</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component that this component is based upon.</sci:help>
								<sci:value>Delimited Reader</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>DOCUMENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>4</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{7D2AF7C7-A077-4201-B10B-8E8283A5EADD}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>90 -2645</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Reads data from text files containing one record per line with data separated by delimiters</sci:value>
								<sci:value>&lt;p&gt;The file or files are specified by &lt;i&gt;Source&lt;/i&gt;. The file(s) should contain textual data formatted with a single record per line. Individual property values on each line should be separated by a delimiter character (such as, space, comma, tab), as specified by &lt;i&gt;Delimiter&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;i&gt;HasColumnNames&lt;/i&gt; is True, the values on the first line of the file are treated as the property names. Otherwise, &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, and so on, are used as the property names.&lt;/p&gt;

Cells containing array data can be read by setting the &lt;i&gt;MultipleValueDelimiter&lt;/i&gt; option to the character that separates the array elements. (Of course, this cannot be the same as the delimiter character.) You can now use the &lt;i&gt;Unmerge Data&lt;/i&gt; component to unmerge these arrays into separate records.
&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;The new, recommended component for Excel (.xlsx or .xls) files that does not require Excel to be installed on the server machine, and therefore is operational on Linux and Windows platforms - &lt;a href=&quot;javascript:DoLink(&apos;{14D98B18-C990-432C-834B-7026565E5ABF}&apos;)&quot;&gt;Excel Reader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For non-delimited textual data, use &lt;a href=&quot;javascript:DoLink(&apos;{8056E8AD-33EA-42BB-9099-EAB24C3D08E6}&apos;)&quot;&gt;Text Reader&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>18.1.0.1581</sci:value>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>21</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\File Readers\Delimited Text Reader</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.DelimitedReader.1">
						<sci:component name="Delimited Text Reader" version="2">
							<sci:arg name="Source" type="URLType" required="true" visibility="visible" multi="false" expanded="true" legalvalsenforced="false">
								<sci:help>&lt;p&gt;
The location from which to read the data. Can be a file, a network resource, a global property, or a data record property.
&lt;/p&gt; 
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;For a file, enter a path.&lt;/li&gt;
&lt;li&gt;For a network resource, enter a network URL in the form &lt;b&gt;protocol://server:port/...&lt;/b&gt;. (If port is omitted, a default is used.) Protocols supported are:
	&lt;ul&gt;
	&lt;li&gt;http, https&lt;/li&gt;
	&lt;li&gt;ftp&lt;/li&gt;
	&lt;li&gt;hdfs (Hadoop Distributed File System)&lt;/li&gt;
	&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For a global property, enter &quot;global://property-name&quot;, or select &quot;Global Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;For a data record property, enter &quot;property://property-name&quot;, or add an input port and select &quot;Data Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;To read multiple files, enter a comma-separated list of any of the above.&lt;/i&gt;
&lt;/ul&gt;</sci:help>
								<sci:member>Maximum</sci:member>
								<sci:member>Keep Properties</sci:member>
								<sci:member>UTF-8 Auto Detect</sci:member>
								<sci:member>SourceTag</sci:member>
								<sci:member>HasColumnNames</sci:member>
								<sci:member>Column Name Lines</sci:member>
								<sci:member>Authentication Options</sci:member>
								<sci:value>/zfsdata/data/datasets/REAL_database_2018-08-25/Enamine_REAL_full_smiles_Part_09.zip</sci:value>
							</sci:arg>
							<sci:arg name="Authentication Options" type="GroupType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>For HTTP, HTTPS, and HDFS URLs, you may optionally specify authentication information for the URL in the following parameters</sci:help>
								<sci:member>Username</sci:member>
								<sci:member>Password</sci:member>
								<sci:member>Authentication Method</sci:member>
								<sci:member>KDC Server</sci:member>
								<sci:member>KDC Realm</sci:member>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HTTP or HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^(https?|hdfs):&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Authentication Method" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>Determines which method to use during authentication with an HTTP, HTTPS, or HDFS URL.

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Use Username and Password Parameters&lt;/b&gt;: Use the values provided by the parameter group&apos;s &lt;i&gt;Username&lt;/i&gt; and &lt;i&gt;Password&lt;/i&gt; parameters.
&lt;li&gt;&lt;b&gt;Use Pipeline Pilot Credentials&lt;/b&gt;: Use the username and password that were provided when the user logged into Pipeline Pilot if available.  NOTE: if the &lt;i&gt;Username&lt;/i&gt; parameter is provided, its value will override the user&apos;s logged in username.
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">Use Username and Password Parameters</sci:legalval>
								<sci:legalval>Use Pipeline Pilot Credentials</sci:legalval>
							</sci:arg>
							<sci:arg name="Username" type="UserNameType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>&lt;p&gt;
The username used to connect to the supplied URL.
&lt;/p&gt;
&lt;p&gt;
If the Authentication Method is set to &apos;Use Username and Password Parameters&apos;, then this parameter
must be filled in to log into the remote server.
&lt;/p&gt;
&lt;p&gt; 
If the Authentication Method is set to &apos;Use Pipeline Pilot Credentials&apos;, then this parameter can be left empty
and the logged in username is used. As an override option, if the username is filled in, this
username will be used along with the user&apos;s Pipeline Pilot password.
&lt;/p&gt;
</sci:help>
							</sci:arg>
							<sci:arg name="Password" type="xpass" encrypt="bf_1" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>The password used to authenticate to the URL.  This parameter is disabled if Authentication Method is not set to &apos;Use Username and Password Parameters&apos;.
</sci:help>
								<sci:enabledscript>SetDisabledDetails(&quot;To enable, set Authentication Method to &apos;Use Username and Password Parameters&apos;&quot;);
Parameter(&apos;Authentication Method&apos;) eq &apos;Use Username and Password Parameters&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Server" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Realm" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
								<sci:help>The maximum number of data records to read. If empty, all records are read.</sci:help>
								<sci:value>$(Maximum)</sci:value>
							</sci:arg>
							<sci:arg name="SourceTag" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies a tag format for identifying the source of data records. Causes a property named &lt;b&gt;SourceTag&lt;/b&gt; to be created to hold the value. Options and their associated tag values are:
&lt;ul&gt;
&lt;li&gt;None: No &lt;b&gt;SourceTag&lt;/b&gt; property is created and any existing &lt;b&gt;SourceTag&lt;/b&gt; properties are removed.
&lt;li&gt;Filename: The name of the file excluding its extension
&lt;li&gt;FilenameAndExtension: The name of the file including its file extension
&lt;li&gt;FullFilename: The name of the file, including its extension and directory path
&lt;li&gt;ZipFilename: When reading a compressed zip file, the filename within the compressed archive
&lt;li&gt;Number: When multiple files are read, a number (1, 2, 3...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;Letter: When multiple files are read , a letter (A, B, C...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;KeepCurrent: Keeps the current value of &lt;b&gt;SourceTag&lt;/b&gt; if present
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Filename</sci:legalval>
								<sci:legalval>FilenameAndExtension</sci:legalval>
								<sci:legalval>FullFilename</sci:legalval>
								<sci:legalval>ZipFilename</sci:legalval>
								<sci:legalval>Number</sci:legalval>
								<sci:legalval>Letter</sci:legalval>
								<sci:legalval>KeepCurrent</sci:legalval>
							</sci:arg>
							<sci:arg name="Keep Properties" type="PropertyPreviewType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies properties from &lt;i&gt;Source&lt;/i&gt; to retain for each output data record. If not specified, all properties are retained. A value of &quot;-&quot; (minus sign) specifies that no properties are retained.</sci:help>
							</sci:arg>
							<sci:arg name="UTF-8 Auto Detect" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies whether to attempt to infer the use of UTF-8 encoding in &lt;i&gt;Source&lt;/i&gt; files when a byte order mark (BOM) is absent from them.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;UTF-8 is a type of character encoding which represents international characters with multiple bytes, while basic Latin characters remain as a single byte.  If a file begins with a BOM, then the encoding can be inferred with confidence. If not, an indirect approach is necessary. This approach is not 100% reliable.  In some cases, valid text stored in different character encodings can appear to be valid UTF-8.  In these cases, the automatic detection will result in garbled text.  When this occurs, consider using the &lt;a href=&quot;javascript:DoLink(&apos;{B0B1B56C-3DF6-444C-BB78-B43211188F63}&apos;)&quot;&gt;Binary Reader&lt;/a&gt; to read the raw bytes from the file, then convert the data using the Pilotscript function &lt;b&gt;ConvertBytesToString&lt;/b&gt;, which allows you to specify the encoding.
&lt;/ul&gt;

</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="HasColumnNames" type="BoolType" required="true" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>If True, property names are taken from the first line of data in &lt;i&gt;Source&lt;/i&gt; files. If False, the first line is assumed to contain data, and properties are given names &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, etc.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Column Name Lines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>If the column name is part of the file, you can specify which line (or lines) are used to construct the property name. So &quot;4&quot; would declare the fourth line to contain the column names, and &quot;4-5&quot; means the values from both lines 4 and 5 will be used to construct the column names.

If not provided, the first non-comment line becomes the column name line.

Any other lines less than the largest column name line are considered comment lines and are ignored.</sci:help>
								<sci:enabledscript>parameter(&apos;HasColumnNames&apos;)</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Delimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies the character that separates fields. Options include:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;FigureOut:&lt;/b&gt; Determines the type automatically (looks for, in order: tab, comma, space, colon, semicolon).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Tab:&lt;/b&gt; For tab-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Space:&lt;/b&gt; For space-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Comma:&lt;/b&gt; For comma-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Colon:&lt;/b&gt; For colon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Semicolon:&lt;/b&gt; For semicolon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;$:&lt;/b&gt; For fields delimited bty the &quot;$&quot; character.&lt;/li&gt;
&lt;/ul&gt;
</sci:help>
								<sci:member>MultipleValueDelimiter</sci:member>
								<sci:member>ParseNDimensionalArrayStrings</sci:member>
								<sci:legalval selected="true">FigureOut</sci:legalval>
								<sci:legalval>Tab</sci:legalval>
								<sci:legalval>Space</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>$</sci:legalval>
							</sci:arg>
							<sci:arg name="MultipleValueDelimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The delimiter to use between multiple values contained in a single property. If the multiple value delimiter exists in any of the input strings in any property, they are separated into an array of values. If &quot;None&quot;, 
values are never separated into multiple values.</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Linefeed</sci:legalval>
							</sci:arg>
							<sci:arg name="ParseNDimensionalArrayStrings" type="BoolType" required="false" visibility="visible" multi="false">
								<sci:help>Toggles whether to parse delimited N-Dimensional Array strings into N-Dimensional Array values.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false">
								<sci:help>Contains less commonly used parameters</sci:help>
								<sci:member>UndefinedString</sci:member>
								<sci:member>AllLines</sci:member>
								<sci:member>TrimWhitespace</sci:member>
								<sci:member>CheckSyntax</sci:member>
								<sci:member>CommentLines</sci:member>
								<sci:member>AddEmptyProperties</sci:member>
							</sci:arg>
							<sci:arg name="CommentLines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>A comma-separated list of line numbers and
line ranges to specify which lines should be 
ignored by the parser (column headers are read from the line that comes next).</sci:help>
							</sci:arg>
							<sci:arg name="UndefinedString" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Character or string to represent an undefined string read in the file. To make an empty string to be treated as an undefined value, set the parameter value to &quot;EmptyString&quot;.</sci:help>
							</sci:arg>
							<sci:arg name="AllLines" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, all lines of the text file become part of a single data record. The values for a column from each row become multiple [array] values for the property (column).</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="TrimWhitespace" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Trims whitespace from the left and right ends of each value</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="CheckSyntax" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Whether to perform a quick syntax check at the beginning of the file when it is opened, and if a problem is found, throw an error.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="AddEmptyProperties" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, then if a row does not have as many values as the number of columns, the missing properties are added to the data record as empty properties</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Join Behavior" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>&lt;p&gt;How to merge the created data record onto the incoming data record. Options are:&lt;/p&gt;
 
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;OverwriteOrCreate&lt;/i&gt;: Copies all properties from the joining data onto the base data, overwriting the values of any properties that already exist.
&lt;li&gt;&lt;i&gt;OverwriteExisting&lt;/i&gt;: Copies only those properties from the joining data to the base data that already exist on the base.
&lt;li&gt;&lt;i&gt;CreateIfNew&lt;/i&gt;: Copies only those properties from the joining data to the base data that do not already exist on the base data.
&lt;li&gt;&lt;i&gt;AppendOrCreate&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  The other joining properties that are not already present in the base data are copied there.
&lt;li&gt;&lt;i&gt;AppendExisting&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  No other properties are copied. 
&lt;li&gt;&lt;i&gt;Replace&lt;/i&gt;: The input data record is replaced by the created data record. &lt;/ul&gt;

</sci:help>
								<sci:legalval>OverwriteOrCreate</sci:legalval>
								<sci:legalval>OverwriteExisting</sci:legalval>
								<sci:legalval>CreateIfNew</sci:legalval>
								<sci:legalval>AppendOrCreate</sci:legalval>
								<sci:legalval>AppendExisting</sci:legalval>
								<sci:legalval selected="true">Replace</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval>ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Sep 07 15:31:15 2017</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Source&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>
#displayNames := Parameter(&apos;Source&apos;, 2);
if (#displayNames ne &apos;&apos;) then
  Expand(&apos;,&apos;, #displayNames);
end if;
#displayName := Trim(#displayNames[1]);
#dots := &apos;&apos;;
if (NumValues(#displayNames) &gt; 1) then
	#dots := &apos;...&apos;;
end if;
if(StrLength(#displayName) &gt; 0) then	
	/* Find the last slash or backslash, extract the end */
	#name := #displayName;
	#ls1 := FindLastSubstring(#name, &apos;/&apos;);
	#ls2 := FindLastSubstring(#name, &apos;\&apos;);
	if (#ls1 &gt; #ls2) then
		#name := Substring(#name, #ls1+1);
	elsif (#ls2 &gt; #ls1) then
		#name := Substring(#name, #ls2+1);
	end if;

	if (#name eq &apos;&apos;) then
		&apos;&apos;;
	elsif (Substring(#displayName, 1, 9) eq &apos;global://&apos;) then
		&apos;Read from @&apos; . #name . #dots;
	elsif (Substring(#displayName, 1, 11) eq &apos;property://&apos;) then
		&apos;Read from property &apos; . #name . #dots;
	else
		&apos;Read &apos; . #name . #dots;
	end if;
else
	&apos;&apos;;
end if;
			</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component that this component is based upon.</sci:help>
								<sci:value>Delimited Reader</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>DOCUMENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>4</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{7D2AF7C7-A077-4201-B10B-8E8283A5EADD}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>90 -3020</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Reads data from text files containing one record per line with data separated by delimiters</sci:value>
								<sci:value>&lt;p&gt;The file or files are specified by &lt;i&gt;Source&lt;/i&gt;. The file(s) should contain textual data formatted with a single record per line. Individual property values on each line should be separated by a delimiter character (such as, space, comma, tab), as specified by &lt;i&gt;Delimiter&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;i&gt;HasColumnNames&lt;/i&gt; is True, the values on the first line of the file are treated as the property names. Otherwise, &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, and so on, are used as the property names.&lt;/p&gt;

Cells containing array data can be read by setting the &lt;i&gt;MultipleValueDelimiter&lt;/i&gt; option to the character that separates the array elements. (Of course, this cannot be the same as the delimiter character.) You can now use the &lt;i&gt;Unmerge Data&lt;/i&gt; component to unmerge these arrays into separate records.
&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;The new, recommended component for Excel (.xlsx or .xls) files that does not require Excel to be installed on the server machine, and therefore is operational on Linux and Windows platforms - &lt;a href=&quot;javascript:DoLink(&apos;{14D98B18-C990-432C-834B-7026565E5ABF}&apos;)&quot;&gt;Excel Reader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For non-delimited textual data, use &lt;a href=&quot;javascript:DoLink(&apos;{8056E8AD-33EA-42BB-9099-EAB24C3D08E6}&apos;)&quot;&gt;Text Reader&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>18.1.0.1581</sci:value>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>22</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\File Readers\Delimited Text Reader</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.DelimitedReader.1">
						<sci:component name="Delimited Text Reader" version="2">
							<sci:arg name="Source" type="URLType" required="true" visibility="visible" multi="false" expanded="true" legalvalsenforced="false">
								<sci:help>&lt;p&gt;
The location from which to read the data. Can be a file, a network resource, a global property, or a data record property.
&lt;/p&gt; 
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;For a file, enter a path.&lt;/li&gt;
&lt;li&gt;For a network resource, enter a network URL in the form &lt;b&gt;protocol://server:port/...&lt;/b&gt;. (If port is omitted, a default is used.) Protocols supported are:
	&lt;ul&gt;
	&lt;li&gt;http, https&lt;/li&gt;
	&lt;li&gt;ftp&lt;/li&gt;
	&lt;li&gt;hdfs (Hadoop Distributed File System)&lt;/li&gt;
	&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For a global property, enter &quot;global://property-name&quot;, or select &quot;Global Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;For a data record property, enter &quot;property://property-name&quot;, or add an input port and select &quot;Data Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;To read multiple files, enter a comma-separated list of any of the above.&lt;/i&gt;
&lt;/ul&gt;</sci:help>
								<sci:member>Maximum</sci:member>
								<sci:member>Keep Properties</sci:member>
								<sci:member>UTF-8 Auto Detect</sci:member>
								<sci:member>SourceTag</sci:member>
								<sci:member>HasColumnNames</sci:member>
								<sci:member>Column Name Lines</sci:member>
								<sci:member>Authentication Options</sci:member>
								<sci:value>/zfsdata/data/datasets/REAL_database_2018-08-25/Enamine_REAL_full_smiles_Part_10.zip</sci:value>
							</sci:arg>
							<sci:arg name="Authentication Options" type="GroupType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>For HTTP, HTTPS, and HDFS URLs, you may optionally specify authentication information for the URL in the following parameters</sci:help>
								<sci:member>Username</sci:member>
								<sci:member>Password</sci:member>
								<sci:member>Authentication Method</sci:member>
								<sci:member>KDC Server</sci:member>
								<sci:member>KDC Realm</sci:member>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HTTP or HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^(https?|hdfs):&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Authentication Method" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>Determines which method to use during authentication with an HTTP, HTTPS, or HDFS URL.

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Use Username and Password Parameters&lt;/b&gt;: Use the values provided by the parameter group&apos;s &lt;i&gt;Username&lt;/i&gt; and &lt;i&gt;Password&lt;/i&gt; parameters.
&lt;li&gt;&lt;b&gt;Use Pipeline Pilot Credentials&lt;/b&gt;: Use the username and password that were provided when the user logged into Pipeline Pilot if available.  NOTE: if the &lt;i&gt;Username&lt;/i&gt; parameter is provided, its value will override the user&apos;s logged in username.
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">Use Username and Password Parameters</sci:legalval>
								<sci:legalval>Use Pipeline Pilot Credentials</sci:legalval>
							</sci:arg>
							<sci:arg name="Username" type="UserNameType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>&lt;p&gt;
The username used to connect to the supplied URL.
&lt;/p&gt;
&lt;p&gt;
If the Authentication Method is set to &apos;Use Username and Password Parameters&apos;, then this parameter
must be filled in to log into the remote server.
&lt;/p&gt;
&lt;p&gt; 
If the Authentication Method is set to &apos;Use Pipeline Pilot Credentials&apos;, then this parameter can be left empty
and the logged in username is used. As an override option, if the username is filled in, this
username will be used along with the user&apos;s Pipeline Pilot password.
&lt;/p&gt;
</sci:help>
							</sci:arg>
							<sci:arg name="Password" type="xpass" encrypt="bf_1" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>The password used to authenticate to the URL.  This parameter is disabled if Authentication Method is not set to &apos;Use Username and Password Parameters&apos;.
</sci:help>
								<sci:enabledscript>SetDisabledDetails(&quot;To enable, set Authentication Method to &apos;Use Username and Password Parameters&apos;&quot;);
Parameter(&apos;Authentication Method&apos;) eq &apos;Use Username and Password Parameters&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Server" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Realm" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
								<sci:help>The maximum number of data records to read. If empty, all records are read.</sci:help>
								<sci:value>$(Maximum)</sci:value>
							</sci:arg>
							<sci:arg name="SourceTag" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies a tag format for identifying the source of data records. Causes a property named &lt;b&gt;SourceTag&lt;/b&gt; to be created to hold the value. Options and their associated tag values are:
&lt;ul&gt;
&lt;li&gt;None: No &lt;b&gt;SourceTag&lt;/b&gt; property is created and any existing &lt;b&gt;SourceTag&lt;/b&gt; properties are removed.
&lt;li&gt;Filename: The name of the file excluding its extension
&lt;li&gt;FilenameAndExtension: The name of the file including its file extension
&lt;li&gt;FullFilename: The name of the file, including its extension and directory path
&lt;li&gt;ZipFilename: When reading a compressed zip file, the filename within the compressed archive
&lt;li&gt;Number: When multiple files are read, a number (1, 2, 3...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;Letter: When multiple files are read , a letter (A, B, C...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;KeepCurrent: Keeps the current value of &lt;b&gt;SourceTag&lt;/b&gt; if present
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Filename</sci:legalval>
								<sci:legalval>FilenameAndExtension</sci:legalval>
								<sci:legalval>FullFilename</sci:legalval>
								<sci:legalval>ZipFilename</sci:legalval>
								<sci:legalval>Number</sci:legalval>
								<sci:legalval>Letter</sci:legalval>
								<sci:legalval>KeepCurrent</sci:legalval>
							</sci:arg>
							<sci:arg name="Keep Properties" type="PropertyPreviewType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies properties from &lt;i&gt;Source&lt;/i&gt; to retain for each output data record. If not specified, all properties are retained. A value of &quot;-&quot; (minus sign) specifies that no properties are retained.</sci:help>
							</sci:arg>
							<sci:arg name="UTF-8 Auto Detect" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies whether to attempt to infer the use of UTF-8 encoding in &lt;i&gt;Source&lt;/i&gt; files when a byte order mark (BOM) is absent from them.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;UTF-8 is a type of character encoding which represents international characters with multiple bytes, while basic Latin characters remain as a single byte.  If a file begins with a BOM, then the encoding can be inferred with confidence. If not, an indirect approach is necessary. This approach is not 100% reliable.  In some cases, valid text stored in different character encodings can appear to be valid UTF-8.  In these cases, the automatic detection will result in garbled text.  When this occurs, consider using the &lt;a href=&quot;javascript:DoLink(&apos;{B0B1B56C-3DF6-444C-BB78-B43211188F63}&apos;)&quot;&gt;Binary Reader&lt;/a&gt; to read the raw bytes from the file, then convert the data using the Pilotscript function &lt;b&gt;ConvertBytesToString&lt;/b&gt;, which allows you to specify the encoding.
&lt;/ul&gt;

</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="HasColumnNames" type="BoolType" required="true" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>If True, property names are taken from the first line of data in &lt;i&gt;Source&lt;/i&gt; files. If False, the first line is assumed to contain data, and properties are given names &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, etc.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Column Name Lines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>If the column name is part of the file, you can specify which line (or lines) are used to construct the property name. So &quot;4&quot; would declare the fourth line to contain the column names, and &quot;4-5&quot; means the values from both lines 4 and 5 will be used to construct the column names.

If not provided, the first non-comment line becomes the column name line.

Any other lines less than the largest column name line are considered comment lines and are ignored.</sci:help>
								<sci:enabledscript>parameter(&apos;HasColumnNames&apos;)</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Delimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies the character that separates fields. Options include:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;FigureOut:&lt;/b&gt; Determines the type automatically (looks for, in order: tab, comma, space, colon, semicolon).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Tab:&lt;/b&gt; For tab-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Space:&lt;/b&gt; For space-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Comma:&lt;/b&gt; For comma-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Colon:&lt;/b&gt; For colon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Semicolon:&lt;/b&gt; For semicolon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;$:&lt;/b&gt; For fields delimited bty the &quot;$&quot; character.&lt;/li&gt;
&lt;/ul&gt;
</sci:help>
								<sci:member>MultipleValueDelimiter</sci:member>
								<sci:member>ParseNDimensionalArrayStrings</sci:member>
								<sci:legalval selected="true">FigureOut</sci:legalval>
								<sci:legalval>Tab</sci:legalval>
								<sci:legalval>Space</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>$</sci:legalval>
							</sci:arg>
							<sci:arg name="MultipleValueDelimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The delimiter to use between multiple values contained in a single property. If the multiple value delimiter exists in any of the input strings in any property, they are separated into an array of values. If &quot;None&quot;, 
values are never separated into multiple values.</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Linefeed</sci:legalval>
							</sci:arg>
							<sci:arg name="ParseNDimensionalArrayStrings" type="BoolType" required="false" visibility="visible" multi="false">
								<sci:help>Toggles whether to parse delimited N-Dimensional Array strings into N-Dimensional Array values.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false">
								<sci:help>Contains less commonly used parameters</sci:help>
								<sci:member>UndefinedString</sci:member>
								<sci:member>AllLines</sci:member>
								<sci:member>TrimWhitespace</sci:member>
								<sci:member>CheckSyntax</sci:member>
								<sci:member>CommentLines</sci:member>
								<sci:member>AddEmptyProperties</sci:member>
							</sci:arg>
							<sci:arg name="CommentLines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>A comma-separated list of line numbers and
line ranges to specify which lines should be 
ignored by the parser (column headers are read from the line that comes next).</sci:help>
							</sci:arg>
							<sci:arg name="UndefinedString" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Character or string to represent an undefined string read in the file. To make an empty string to be treated as an undefined value, set the parameter value to &quot;EmptyString&quot;.</sci:help>
							</sci:arg>
							<sci:arg name="AllLines" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, all lines of the text file become part of a single data record. The values for a column from each row become multiple [array] values for the property (column).</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="TrimWhitespace" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Trims whitespace from the left and right ends of each value</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="CheckSyntax" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Whether to perform a quick syntax check at the beginning of the file when it is opened, and if a problem is found, throw an error.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="AddEmptyProperties" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, then if a row does not have as many values as the number of columns, the missing properties are added to the data record as empty properties</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Join Behavior" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>&lt;p&gt;How to merge the created data record onto the incoming data record. Options are:&lt;/p&gt;
 
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;OverwriteOrCreate&lt;/i&gt;: Copies all properties from the joining data onto the base data, overwriting the values of any properties that already exist.
&lt;li&gt;&lt;i&gt;OverwriteExisting&lt;/i&gt;: Copies only those properties from the joining data to the base data that already exist on the base.
&lt;li&gt;&lt;i&gt;CreateIfNew&lt;/i&gt;: Copies only those properties from the joining data to the base data that do not already exist on the base data.
&lt;li&gt;&lt;i&gt;AppendOrCreate&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  The other joining properties that are not already present in the base data are copied there.
&lt;li&gt;&lt;i&gt;AppendExisting&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  No other properties are copied. 
&lt;li&gt;&lt;i&gt;Replace&lt;/i&gt;: The input data record is replaced by the created data record. &lt;/ul&gt;

</sci:help>
								<sci:legalval>OverwriteOrCreate</sci:legalval>
								<sci:legalval>OverwriteExisting</sci:legalval>
								<sci:legalval>CreateIfNew</sci:legalval>
								<sci:legalval>AppendOrCreate</sci:legalval>
								<sci:legalval>AppendExisting</sci:legalval>
								<sci:legalval selected="true">Replace</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval>ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Sep 07 15:31:15 2017</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Source&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>
#displayNames := Parameter(&apos;Source&apos;, 2);
if (#displayNames ne &apos;&apos;) then
  Expand(&apos;,&apos;, #displayNames);
end if;
#displayName := Trim(#displayNames[1]);
#dots := &apos;&apos;;
if (NumValues(#displayNames) &gt; 1) then
	#dots := &apos;...&apos;;
end if;
if(StrLength(#displayName) &gt; 0) then	
	/* Find the last slash or backslash, extract the end */
	#name := #displayName;
	#ls1 := FindLastSubstring(#name, &apos;/&apos;);
	#ls2 := FindLastSubstring(#name, &apos;\&apos;);
	if (#ls1 &gt; #ls2) then
		#name := Substring(#name, #ls1+1);
	elsif (#ls2 &gt; #ls1) then
		#name := Substring(#name, #ls2+1);
	end if;

	if (#name eq &apos;&apos;) then
		&apos;&apos;;
	elsif (Substring(#displayName, 1, 9) eq &apos;global://&apos;) then
		&apos;Read from @&apos; . #name . #dots;
	elsif (Substring(#displayName, 1, 11) eq &apos;property://&apos;) then
		&apos;Read from property &apos; . #name . #dots;
	else
		&apos;Read &apos; . #name . #dots;
	end if;
else
	&apos;&apos;;
end if;
			</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component that this component is based upon.</sci:help>
								<sci:value>Delimited Reader</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>DOCUMENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>4</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{7D2AF7C7-A077-4201-B10B-8E8283A5EADD}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>90 -3370</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Reads data from text files containing one record per line with data separated by delimiters</sci:value>
								<sci:value>&lt;p&gt;The file or files are specified by &lt;i&gt;Source&lt;/i&gt;. The file(s) should contain textual data formatted with a single record per line. Individual property values on each line should be separated by a delimiter character (such as, space, comma, tab), as specified by &lt;i&gt;Delimiter&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;i&gt;HasColumnNames&lt;/i&gt; is True, the values on the first line of the file are treated as the property names. Otherwise, &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, and so on, are used as the property names.&lt;/p&gt;

Cells containing array data can be read by setting the &lt;i&gt;MultipleValueDelimiter&lt;/i&gt; option to the character that separates the array elements. (Of course, this cannot be the same as the delimiter character.) You can now use the &lt;i&gt;Unmerge Data&lt;/i&gt; component to unmerge these arrays into separate records.
&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;The new, recommended component for Excel (.xlsx or .xls) files that does not require Excel to be installed on the server machine, and therefore is operational on Linux and Windows platforms - &lt;a href=&quot;javascript:DoLink(&apos;{14D98B18-C990-432C-834B-7026565E5ABF}&apos;)&quot;&gt;Excel Reader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For non-delimited textual data, use &lt;a href=&quot;javascript:DoLink(&apos;{8056E8AD-33EA-42BB-9099-EAB24C3D08E6}&apos;)&quot;&gt;Text Reader&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>18.1.0.1581</sci:value>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>23</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\File Readers\Delimited Text Reader</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.DelimitedReader.1">
						<sci:component name="Delimited Text Reader" version="2">
							<sci:arg name="Source" type="URLType" required="true" visibility="visible" multi="false" expanded="true" legalvalsenforced="false">
								<sci:help>&lt;p&gt;
The location from which to read the data. Can be a file, a network resource, a global property, or a data record property.
&lt;/p&gt; 
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;For a file, enter a path.&lt;/li&gt;
&lt;li&gt;For a network resource, enter a network URL in the form &lt;b&gt;protocol://server:port/...&lt;/b&gt;. (If port is omitted, a default is used.) Protocols supported are:
	&lt;ul&gt;
	&lt;li&gt;http, https&lt;/li&gt;
	&lt;li&gt;ftp&lt;/li&gt;
	&lt;li&gt;hdfs (Hadoop Distributed File System)&lt;/li&gt;
	&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For a global property, enter &quot;global://property-name&quot;, or select &quot;Global Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;For a data record property, enter &quot;property://property-name&quot;, or add an input port and select &quot;Data Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;To read multiple files, enter a comma-separated list of any of the above.&lt;/i&gt;
&lt;/ul&gt;</sci:help>
								<sci:member>Maximum</sci:member>
								<sci:member>Keep Properties</sci:member>
								<sci:member>UTF-8 Auto Detect</sci:member>
								<sci:member>SourceTag</sci:member>
								<sci:member>HasColumnNames</sci:member>
								<sci:member>Column Name Lines</sci:member>
								<sci:member>Authentication Options</sci:member>
								<sci:value>/zfsdata/data/datasets/REAL_database_2018-08-25/Enamine_REAL_full_smiles_Part_11.zip</sci:value>
							</sci:arg>
							<sci:arg name="Authentication Options" type="GroupType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>For HTTP, HTTPS, and HDFS URLs, you may optionally specify authentication information for the URL in the following parameters</sci:help>
								<sci:member>Username</sci:member>
								<sci:member>Password</sci:member>
								<sci:member>Authentication Method</sci:member>
								<sci:member>KDC Server</sci:member>
								<sci:member>KDC Realm</sci:member>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HTTP or HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^(https?|hdfs):&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Authentication Method" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>Determines which method to use during authentication with an HTTP, HTTPS, or HDFS URL.

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Use Username and Password Parameters&lt;/b&gt;: Use the values provided by the parameter group&apos;s &lt;i&gt;Username&lt;/i&gt; and &lt;i&gt;Password&lt;/i&gt; parameters.
&lt;li&gt;&lt;b&gt;Use Pipeline Pilot Credentials&lt;/b&gt;: Use the username and password that were provided when the user logged into Pipeline Pilot if available.  NOTE: if the &lt;i&gt;Username&lt;/i&gt; parameter is provided, its value will override the user&apos;s logged in username.
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">Use Username and Password Parameters</sci:legalval>
								<sci:legalval>Use Pipeline Pilot Credentials</sci:legalval>
							</sci:arg>
							<sci:arg name="Username" type="UserNameType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>&lt;p&gt;
The username used to connect to the supplied URL.
&lt;/p&gt;
&lt;p&gt;
If the Authentication Method is set to &apos;Use Username and Password Parameters&apos;, then this parameter
must be filled in to log into the remote server.
&lt;/p&gt;
&lt;p&gt; 
If the Authentication Method is set to &apos;Use Pipeline Pilot Credentials&apos;, then this parameter can be left empty
and the logged in username is used. As an override option, if the username is filled in, this
username will be used along with the user&apos;s Pipeline Pilot password.
&lt;/p&gt;
</sci:help>
							</sci:arg>
							<sci:arg name="Password" type="xpass" encrypt="bf_1" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>The password used to authenticate to the URL.  This parameter is disabled if Authentication Method is not set to &apos;Use Username and Password Parameters&apos;.
</sci:help>
								<sci:enabledscript>SetDisabledDetails(&quot;To enable, set Authentication Method to &apos;Use Username and Password Parameters&apos;&quot;);
Parameter(&apos;Authentication Method&apos;) eq &apos;Use Username and Password Parameters&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Server" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Realm" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
								<sci:help>The maximum number of data records to read. If empty, all records are read.</sci:help>
								<sci:value>$(Maximum)</sci:value>
							</sci:arg>
							<sci:arg name="SourceTag" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies a tag format for identifying the source of data records. Causes a property named &lt;b&gt;SourceTag&lt;/b&gt; to be created to hold the value. Options and their associated tag values are:
&lt;ul&gt;
&lt;li&gt;None: No &lt;b&gt;SourceTag&lt;/b&gt; property is created and any existing &lt;b&gt;SourceTag&lt;/b&gt; properties are removed.
&lt;li&gt;Filename: The name of the file excluding its extension
&lt;li&gt;FilenameAndExtension: The name of the file including its file extension
&lt;li&gt;FullFilename: The name of the file, including its extension and directory path
&lt;li&gt;ZipFilename: When reading a compressed zip file, the filename within the compressed archive
&lt;li&gt;Number: When multiple files are read, a number (1, 2, 3...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;Letter: When multiple files are read , a letter (A, B, C...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;KeepCurrent: Keeps the current value of &lt;b&gt;SourceTag&lt;/b&gt; if present
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Filename</sci:legalval>
								<sci:legalval>FilenameAndExtension</sci:legalval>
								<sci:legalval>FullFilename</sci:legalval>
								<sci:legalval>ZipFilename</sci:legalval>
								<sci:legalval>Number</sci:legalval>
								<sci:legalval>Letter</sci:legalval>
								<sci:legalval>KeepCurrent</sci:legalval>
							</sci:arg>
							<sci:arg name="Keep Properties" type="PropertyPreviewType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies properties from &lt;i&gt;Source&lt;/i&gt; to retain for each output data record. If not specified, all properties are retained. A value of &quot;-&quot; (minus sign) specifies that no properties are retained.</sci:help>
							</sci:arg>
							<sci:arg name="UTF-8 Auto Detect" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies whether to attempt to infer the use of UTF-8 encoding in &lt;i&gt;Source&lt;/i&gt; files when a byte order mark (BOM) is absent from them.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;UTF-8 is a type of character encoding which represents international characters with multiple bytes, while basic Latin characters remain as a single byte.  If a file begins with a BOM, then the encoding can be inferred with confidence. If not, an indirect approach is necessary. This approach is not 100% reliable.  In some cases, valid text stored in different character encodings can appear to be valid UTF-8.  In these cases, the automatic detection will result in garbled text.  When this occurs, consider using the &lt;a href=&quot;javascript:DoLink(&apos;{B0B1B56C-3DF6-444C-BB78-B43211188F63}&apos;)&quot;&gt;Binary Reader&lt;/a&gt; to read the raw bytes from the file, then convert the data using the Pilotscript function &lt;b&gt;ConvertBytesToString&lt;/b&gt;, which allows you to specify the encoding.
&lt;/ul&gt;

</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="HasColumnNames" type="BoolType" required="true" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>If True, property names are taken from the first line of data in &lt;i&gt;Source&lt;/i&gt; files. If False, the first line is assumed to contain data, and properties are given names &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, etc.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Column Name Lines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>If the column name is part of the file, you can specify which line (or lines) are used to construct the property name. So &quot;4&quot; would declare the fourth line to contain the column names, and &quot;4-5&quot; means the values from both lines 4 and 5 will be used to construct the column names.

If not provided, the first non-comment line becomes the column name line.

Any other lines less than the largest column name line are considered comment lines and are ignored.</sci:help>
								<sci:enabledscript>parameter(&apos;HasColumnNames&apos;)</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Delimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies the character that separates fields. Options include:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;FigureOut:&lt;/b&gt; Determines the type automatically (looks for, in order: tab, comma, space, colon, semicolon).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Tab:&lt;/b&gt; For tab-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Space:&lt;/b&gt; For space-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Comma:&lt;/b&gt; For comma-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Colon:&lt;/b&gt; For colon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Semicolon:&lt;/b&gt; For semicolon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;$:&lt;/b&gt; For fields delimited bty the &quot;$&quot; character.&lt;/li&gt;
&lt;/ul&gt;
</sci:help>
								<sci:member>MultipleValueDelimiter</sci:member>
								<sci:member>ParseNDimensionalArrayStrings</sci:member>
								<sci:legalval selected="true">FigureOut</sci:legalval>
								<sci:legalval>Tab</sci:legalval>
								<sci:legalval>Space</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>$</sci:legalval>
							</sci:arg>
							<sci:arg name="MultipleValueDelimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The delimiter to use between multiple values contained in a single property. If the multiple value delimiter exists in any of the input strings in any property, they are separated into an array of values. If &quot;None&quot;, 
values are never separated into multiple values.</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Linefeed</sci:legalval>
							</sci:arg>
							<sci:arg name="ParseNDimensionalArrayStrings" type="BoolType" required="false" visibility="visible" multi="false">
								<sci:help>Toggles whether to parse delimited N-Dimensional Array strings into N-Dimensional Array values.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false">
								<sci:help>Contains less commonly used parameters</sci:help>
								<sci:member>UndefinedString</sci:member>
								<sci:member>AllLines</sci:member>
								<sci:member>TrimWhitespace</sci:member>
								<sci:member>CheckSyntax</sci:member>
								<sci:member>CommentLines</sci:member>
								<sci:member>AddEmptyProperties</sci:member>
							</sci:arg>
							<sci:arg name="CommentLines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>A comma-separated list of line numbers and
line ranges to specify which lines should be 
ignored by the parser (column headers are read from the line that comes next).</sci:help>
							</sci:arg>
							<sci:arg name="UndefinedString" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Character or string to represent an undefined string read in the file. To make an empty string to be treated as an undefined value, set the parameter value to &quot;EmptyString&quot;.</sci:help>
							</sci:arg>
							<sci:arg name="AllLines" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, all lines of the text file become part of a single data record. The values for a column from each row become multiple [array] values for the property (column).</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="TrimWhitespace" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Trims whitespace from the left and right ends of each value</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="CheckSyntax" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Whether to perform a quick syntax check at the beginning of the file when it is opened, and if a problem is found, throw an error.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="AddEmptyProperties" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, then if a row does not have as many values as the number of columns, the missing properties are added to the data record as empty properties</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Join Behavior" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>&lt;p&gt;How to merge the created data record onto the incoming data record. Options are:&lt;/p&gt;
 
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;OverwriteOrCreate&lt;/i&gt;: Copies all properties from the joining data onto the base data, overwriting the values of any properties that already exist.
&lt;li&gt;&lt;i&gt;OverwriteExisting&lt;/i&gt;: Copies only those properties from the joining data to the base data that already exist on the base.
&lt;li&gt;&lt;i&gt;CreateIfNew&lt;/i&gt;: Copies only those properties from the joining data to the base data that do not already exist on the base data.
&lt;li&gt;&lt;i&gt;AppendOrCreate&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  The other joining properties that are not already present in the base data are copied there.
&lt;li&gt;&lt;i&gt;AppendExisting&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  No other properties are copied. 
&lt;li&gt;&lt;i&gt;Replace&lt;/i&gt;: The input data record is replaced by the created data record. &lt;/ul&gt;

</sci:help>
								<sci:legalval>OverwriteOrCreate</sci:legalval>
								<sci:legalval>OverwriteExisting</sci:legalval>
								<sci:legalval>CreateIfNew</sci:legalval>
								<sci:legalval>AppendOrCreate</sci:legalval>
								<sci:legalval>AppendExisting</sci:legalval>
								<sci:legalval selected="true">Replace</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval>ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Sep 07 15:31:15 2017</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Source&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>
#displayNames := Parameter(&apos;Source&apos;, 2);
if (#displayNames ne &apos;&apos;) then
  Expand(&apos;,&apos;, #displayNames);
end if;
#displayName := Trim(#displayNames[1]);
#dots := &apos;&apos;;
if (NumValues(#displayNames) &gt; 1) then
	#dots := &apos;...&apos;;
end if;
if(StrLength(#displayName) &gt; 0) then	
	/* Find the last slash or backslash, extract the end */
	#name := #displayName;
	#ls1 := FindLastSubstring(#name, &apos;/&apos;);
	#ls2 := FindLastSubstring(#name, &apos;\&apos;);
	if (#ls1 &gt; #ls2) then
		#name := Substring(#name, #ls1+1);
	elsif (#ls2 &gt; #ls1) then
		#name := Substring(#name, #ls2+1);
	end if;

	if (#name eq &apos;&apos;) then
		&apos;&apos;;
	elsif (Substring(#displayName, 1, 9) eq &apos;global://&apos;) then
		&apos;Read from @&apos; . #name . #dots;
	elsif (Substring(#displayName, 1, 11) eq &apos;property://&apos;) then
		&apos;Read from property &apos; . #name . #dots;
	else
		&apos;Read &apos; . #name . #dots;
	end if;
else
	&apos;&apos;;
end if;
			</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component that this component is based upon.</sci:help>
								<sci:value>Delimited Reader</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>DOCUMENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>4</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{7D2AF7C7-A077-4201-B10B-8E8283A5EADD}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>90 -3745</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Reads data from text files containing one record per line with data separated by delimiters</sci:value>
								<sci:value>&lt;p&gt;The file or files are specified by &lt;i&gt;Source&lt;/i&gt;. The file(s) should contain textual data formatted with a single record per line. Individual property values on each line should be separated by a delimiter character (such as, space, comma, tab), as specified by &lt;i&gt;Delimiter&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;i&gt;HasColumnNames&lt;/i&gt; is True, the values on the first line of the file are treated as the property names. Otherwise, &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, and so on, are used as the property names.&lt;/p&gt;

Cells containing array data can be read by setting the &lt;i&gt;MultipleValueDelimiter&lt;/i&gt; option to the character that separates the array elements. (Of course, this cannot be the same as the delimiter character.) You can now use the &lt;i&gt;Unmerge Data&lt;/i&gt; component to unmerge these arrays into separate records.
&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;The new, recommended component for Excel (.xlsx or .xls) files that does not require Excel to be installed on the server machine, and therefore is operational on Linux and Windows platforms - &lt;a href=&quot;javascript:DoLink(&apos;{14D98B18-C990-432C-834B-7026565E5ABF}&apos;)&quot;&gt;Excel Reader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For non-delimited textual data, use &lt;a href=&quot;javascript:DoLink(&apos;{8056E8AD-33EA-42BB-9099-EAB24C3D08E6}&apos;)&quot;&gt;Text Reader&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>18.1.0.1581</sci:value>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>24</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\File Readers\Delimited Text Reader</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.DelimitedReader.1">
						<sci:component name="Delimited Text Reader" version="2">
							<sci:arg name="Source" type="URLType" required="true" visibility="visible" multi="false" expanded="true" legalvalsenforced="false">
								<sci:help>&lt;p&gt;
The location from which to read the data. Can be a file, a network resource, a global property, or a data record property.
&lt;/p&gt; 
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;For a file, enter a path.&lt;/li&gt;
&lt;li&gt;For a network resource, enter a network URL in the form &lt;b&gt;protocol://server:port/...&lt;/b&gt;. (If port is omitted, a default is used.) Protocols supported are:
	&lt;ul&gt;
	&lt;li&gt;http, https&lt;/li&gt;
	&lt;li&gt;ftp&lt;/li&gt;
	&lt;li&gt;hdfs (Hadoop Distributed File System)&lt;/li&gt;
	&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For a global property, enter &quot;global://property-name&quot;, or select &quot;Global Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;For a data record property, enter &quot;property://property-name&quot;, or add an input port and select &quot;Data Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;To read multiple files, enter a comma-separated list of any of the above.&lt;/i&gt;
&lt;/ul&gt;</sci:help>
								<sci:member>Maximum</sci:member>
								<sci:member>Keep Properties</sci:member>
								<sci:member>UTF-8 Auto Detect</sci:member>
								<sci:member>SourceTag</sci:member>
								<sci:member>HasColumnNames</sci:member>
								<sci:member>Column Name Lines</sci:member>
								<sci:member>Authentication Options</sci:member>
								<sci:value>/zfsdata/data/datasets/REAL_database_2018-08-25/Enamine_REAL_full_smiles_Part_12.zip</sci:value>
							</sci:arg>
							<sci:arg name="Authentication Options" type="GroupType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>For HTTP, HTTPS, and HDFS URLs, you may optionally specify authentication information for the URL in the following parameters</sci:help>
								<sci:member>Username</sci:member>
								<sci:member>Password</sci:member>
								<sci:member>Authentication Method</sci:member>
								<sci:member>KDC Server</sci:member>
								<sci:member>KDC Realm</sci:member>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HTTP or HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^(https?|hdfs):&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Authentication Method" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>Determines which method to use during authentication with an HTTP, HTTPS, or HDFS URL.

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Use Username and Password Parameters&lt;/b&gt;: Use the values provided by the parameter group&apos;s &lt;i&gt;Username&lt;/i&gt; and &lt;i&gt;Password&lt;/i&gt; parameters.
&lt;li&gt;&lt;b&gt;Use Pipeline Pilot Credentials&lt;/b&gt;: Use the username and password that were provided when the user logged into Pipeline Pilot if available.  NOTE: if the &lt;i&gt;Username&lt;/i&gt; parameter is provided, its value will override the user&apos;s logged in username.
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">Use Username and Password Parameters</sci:legalval>
								<sci:legalval>Use Pipeline Pilot Credentials</sci:legalval>
							</sci:arg>
							<sci:arg name="Username" type="UserNameType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>&lt;p&gt;
The username used to connect to the supplied URL.
&lt;/p&gt;
&lt;p&gt;
If the Authentication Method is set to &apos;Use Username and Password Parameters&apos;, then this parameter
must be filled in to log into the remote server.
&lt;/p&gt;
&lt;p&gt; 
If the Authentication Method is set to &apos;Use Pipeline Pilot Credentials&apos;, then this parameter can be left empty
and the logged in username is used. As an override option, if the username is filled in, this
username will be used along with the user&apos;s Pipeline Pilot password.
&lt;/p&gt;
</sci:help>
							</sci:arg>
							<sci:arg name="Password" type="xpass" encrypt="bf_1" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>The password used to authenticate to the URL.  This parameter is disabled if Authentication Method is not set to &apos;Use Username and Password Parameters&apos;.
</sci:help>
								<sci:enabledscript>SetDisabledDetails(&quot;To enable, set Authentication Method to &apos;Use Username and Password Parameters&apos;&quot;);
Parameter(&apos;Authentication Method&apos;) eq &apos;Use Username and Password Parameters&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Server" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="KDC Realm" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
								<sci:help>The maximum number of data records to read. If empty, all records are read.</sci:help>
								<sci:value>$(Maximum)</sci:value>
							</sci:arg>
							<sci:arg name="SourceTag" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies a tag format for identifying the source of data records. Causes a property named &lt;b&gt;SourceTag&lt;/b&gt; to be created to hold the value. Options and their associated tag values are:
&lt;ul&gt;
&lt;li&gt;None: No &lt;b&gt;SourceTag&lt;/b&gt; property is created and any existing &lt;b&gt;SourceTag&lt;/b&gt; properties are removed.
&lt;li&gt;Filename: The name of the file excluding its extension
&lt;li&gt;FilenameAndExtension: The name of the file including its file extension
&lt;li&gt;FullFilename: The name of the file, including its extension and directory path
&lt;li&gt;ZipFilename: When reading a compressed zip file, the filename within the compressed archive
&lt;li&gt;Number: When multiple files are read, a number (1, 2, 3...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;Letter: When multiple files are read , a letter (A, B, C...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;KeepCurrent: Keeps the current value of &lt;b&gt;SourceTag&lt;/b&gt; if present
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Filename</sci:legalval>
								<sci:legalval>FilenameAndExtension</sci:legalval>
								<sci:legalval>FullFilename</sci:legalval>
								<sci:legalval>ZipFilename</sci:legalval>
								<sci:legalval>Number</sci:legalval>
								<sci:legalval>Letter</sci:legalval>
								<sci:legalval>KeepCurrent</sci:legalval>
							</sci:arg>
							<sci:arg name="Keep Properties" type="PropertyPreviewType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies properties from &lt;i&gt;Source&lt;/i&gt; to retain for each output data record. If not specified, all properties are retained. A value of &quot;-&quot; (minus sign) specifies that no properties are retained.</sci:help>
							</sci:arg>
							<sci:arg name="UTF-8 Auto Detect" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Specifies whether to attempt to infer the use of UTF-8 encoding in &lt;i&gt;Source&lt;/i&gt; files when a byte order mark (BOM) is absent from them.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;UTF-8 is a type of character encoding which represents international characters with multiple bytes, while basic Latin characters remain as a single byte.  If a file begins with a BOM, then the encoding can be inferred with confidence. If not, an indirect approach is necessary. This approach is not 100% reliable.  In some cases, valid text stored in different character encodings can appear to be valid UTF-8.  In these cases, the automatic detection will result in garbled text.  When this occurs, consider using the &lt;a href=&quot;javascript:DoLink(&apos;{B0B1B56C-3DF6-444C-BB78-B43211188F63}&apos;)&quot;&gt;Binary Reader&lt;/a&gt; to read the raw bytes from the file, then convert the data using the Pilotscript function &lt;b&gt;ConvertBytesToString&lt;/b&gt;, which allows you to specify the encoding.
&lt;/ul&gt;

</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="HasColumnNames" type="BoolType" required="true" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>If True, property names are taken from the first line of data in &lt;i&gt;Source&lt;/i&gt; files. If False, the first line is assumed to contain data, and properties are given names &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, etc.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Column Name Lines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>If the column name is part of the file, you can specify which line (or lines) are used to construct the property name. So &quot;4&quot; would declare the fourth line to contain the column names, and &quot;4-5&quot; means the values from both lines 4 and 5 will be used to construct the column names.

If not provided, the first non-comment line becomes the column name line.

Any other lines less than the largest column name line are considered comment lines and are ignored.</sci:help>
								<sci:enabledscript>parameter(&apos;HasColumnNames&apos;)</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Delimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Specifies the character that separates fields. Options include:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;FigureOut:&lt;/b&gt; Determines the type automatically (looks for, in order: tab, comma, space, colon, semicolon).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Tab:&lt;/b&gt; For tab-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Space:&lt;/b&gt; For space-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Comma:&lt;/b&gt; For comma-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Colon:&lt;/b&gt; For colon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Semicolon:&lt;/b&gt; For semicolon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;$:&lt;/b&gt; For fields delimited bty the &quot;$&quot; character.&lt;/li&gt;
&lt;/ul&gt;
</sci:help>
								<sci:member>MultipleValueDelimiter</sci:member>
								<sci:member>ParseNDimensionalArrayStrings</sci:member>
								<sci:legalval selected="true">FigureOut</sci:legalval>
								<sci:legalval>Tab</sci:legalval>
								<sci:legalval>Space</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>$</sci:legalval>
							</sci:arg>
							<sci:arg name="MultipleValueDelimiter" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The delimiter to use between multiple values contained in a single property. If the multiple value delimiter exists in any of the input strings in any property, they are separated into an array of values. If &quot;None&quot;, 
values are never separated into multiple values.</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Semicolon</sci:legalval>
								<sci:legalval>Colon</sci:legalval>
								<sci:legalval>Comma</sci:legalval>
								<sci:legalval>Linefeed</sci:legalval>
							</sci:arg>
							<sci:arg name="ParseNDimensionalArrayStrings" type="BoolType" required="false" visibility="visible" multi="false">
								<sci:help>Toggles whether to parse delimited N-Dimensional Array strings into N-Dimensional Array values.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false">
								<sci:help>Contains less commonly used parameters</sci:help>
								<sci:member>UndefinedString</sci:member>
								<sci:member>AllLines</sci:member>
								<sci:member>TrimWhitespace</sci:member>
								<sci:member>CheckSyntax</sci:member>
								<sci:member>CommentLines</sci:member>
								<sci:member>AddEmptyProperties</sci:member>
							</sci:arg>
							<sci:arg name="CommentLines" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>A comma-separated list of line numbers and
line ranges to specify which lines should be 
ignored by the parser (column headers are read from the line that comes next).</sci:help>
							</sci:arg>
							<sci:arg name="UndefinedString" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Character or string to represent an undefined string read in the file. To make an empty string to be treated as an undefined value, set the parameter value to &quot;EmptyString&quot;.</sci:help>
							</sci:arg>
							<sci:arg name="AllLines" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, all lines of the text file become part of a single data record. The values for a column from each row become multiple [array] values for the property (column).</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="TrimWhitespace" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Trims whitespace from the left and right ends of each value</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="CheckSyntax" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Whether to perform a quick syntax check at the beginning of the file when it is opened, and if a problem is found, throw an error.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="AddEmptyProperties" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, then if a row does not have as many values as the number of columns, the missing properties are added to the data record as empty properties</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Join Behavior" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
								<sci:help>&lt;p&gt;How to merge the created data record onto the incoming data record. Options are:&lt;/p&gt;
 
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;OverwriteOrCreate&lt;/i&gt;: Copies all properties from the joining data onto the base data, overwriting the values of any properties that already exist.
&lt;li&gt;&lt;i&gt;OverwriteExisting&lt;/i&gt;: Copies only those properties from the joining data to the base data that already exist on the base.
&lt;li&gt;&lt;i&gt;CreateIfNew&lt;/i&gt;: Copies only those properties from the joining data to the base data that do not already exist on the base data.
&lt;li&gt;&lt;i&gt;AppendOrCreate&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  The other joining properties that are not already present in the base data are copied there.
&lt;li&gt;&lt;i&gt;AppendExisting&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  No other properties are copied. 
&lt;li&gt;&lt;i&gt;Replace&lt;/i&gt;: The input data record is replaced by the created data record. &lt;/ul&gt;

</sci:help>
								<sci:legalval>OverwriteOrCreate</sci:legalval>
								<sci:legalval>OverwriteExisting</sci:legalval>
								<sci:legalval>CreateIfNew</sci:legalval>
								<sci:legalval>AppendOrCreate</sci:legalval>
								<sci:legalval>AppendExisting</sci:legalval>
								<sci:legalval selected="true">Replace</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval>ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Sep 07 15:31:15 2017</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Source&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>
#displayNames := Parameter(&apos;Source&apos;, 2);
if (#displayNames ne &apos;&apos;) then
  Expand(&apos;,&apos;, #displayNames);
end if;
#displayName := Trim(#displayNames[1]);
#dots := &apos;&apos;;
if (NumValues(#displayNames) &gt; 1) then
	#dots := &apos;...&apos;;
end if;
if(StrLength(#displayName) &gt; 0) then	
	/* Find the last slash or backslash, extract the end */
	#name := #displayName;
	#ls1 := FindLastSubstring(#name, &apos;/&apos;);
	#ls2 := FindLastSubstring(#name, &apos;\&apos;);
	if (#ls1 &gt; #ls2) then
		#name := Substring(#name, #ls1+1);
	elsif (#ls2 &gt; #ls1) then
		#name := Substring(#name, #ls2+1);
	end if;

	if (#name eq &apos;&apos;) then
		&apos;&apos;;
	elsif (Substring(#displayName, 1, 9) eq &apos;global://&apos;) then
		&apos;Read from @&apos; . #name . #dots;
	elsif (Substring(#displayName, 1, 11) eq &apos;property://&apos;) then
		&apos;Read from property &apos; . #name . #dots;
	else
		&apos;Read &apos; . #name . #dots;
	end if;
else
	&apos;&apos;;
end if;
			</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component that this component is based upon.</sci:help>
								<sci:value>Delimited Reader</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>DOCUMENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{7D2AF7C7-A077-4201-B10B-8E8283A5EADD}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>90 -4095</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Reads data from text files containing one record per line with data separated by delimiters</sci:value>
								<sci:value>&lt;p&gt;The file or files are specified by &lt;i&gt;Source&lt;/i&gt;. The file(s) should contain textual data formatted with a single record per line. Individual property values on each line should be separated by a delimiter character (such as, space, comma, tab), as specified by &lt;i&gt;Delimiter&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;i&gt;HasColumnNames&lt;/i&gt; is True, the values on the first line of the file are treated as the property names. Otherwise, &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, and so on, are used as the property names.&lt;/p&gt;

Cells containing array data can be read by setting the &lt;i&gt;MultipleValueDelimiter&lt;/i&gt; option to the character that separates the array elements. (Of course, this cannot be the same as the delimiter character.) You can now use the &lt;i&gt;Unmerge Data&lt;/i&gt; component to unmerge these arrays into separate records.
&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;The new, recommended component for Excel (.xlsx or .xls) files that does not require Excel to be installed on the server machine, and therefore is operational on Linux and Windows platforms - &lt;a href=&quot;javascript:DoLink(&apos;{14D98B18-C990-432C-834B-7026565E5ABF}&apos;)&quot;&gt;Excel Reader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For non-delimited textual data, use &lt;a href=&quot;javascript:DoLink(&apos;{8056E8AD-33EA-42BB-9099-EAB24C3D08E6}&apos;)&quot;&gt;Text Reader&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>18.1.0.1581</sci:value>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>25</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\File Readers\Delimited Text Reader</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:connectid from="14" to="26" type="true"/>
					<sci:connectid from="15" to="26" type="true"/>
					<sci:connectid from="16" to="26" type="true"/>
					<sci:connectid from="17" to="26" type="true"/>
					<sci:connectid from="18" to="26" type="true"/>
					<sci:connectid from="19" to="26" type="true"/>
					<sci:connectid from="20" to="26" type="true"/>
					<sci:connectid from="21" to="26" type="true"/>
					<sci:connectid from="22" to="26" type="true"/>
					<sci:connectid from="23" to="26" type="true"/>
					<sci:connectid from="24" to="26" type="true"/>
					<sci:connectid from="25" to="26" type="true"/>
				</sci:protocol>
			</sci:data>
			<sci:data object="SciTegic.Protocol.1">
				<sci:component name="Subprotocol" version="2">
					<sci:arg name="RunToCompletion" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - For Each Data Record&quot;, the subprotocol is re-initialized and executed in its entirety for each individual data record it processes.
&lt;p&gt;
When set to &quot;True - For Each Category&quot;, the data records are divided into categories based on the value of the Categorize Using parameter and then the subprotocol is re-initialized and executed in its entirety for each category of data records. When used in conjunction with &lt;i&gt;Parallel Processing Options&lt;/i&gt;, each category of data records will be sent to the remote server as part of one single batch.</sci:help>
						<sci:member>RunToCompletion Categorize Using</sci:member>
						<sci:legalval selected="true">False</sci:legalval>
						<sci:legalval>True - For Each Data Record</sci:legalval>
						<sci:legalval>True - For Each Category</sci:legalval>
					</sci:arg>
					<sci:arg name="RunToCompletion Categorize Using" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Required when RunToCompletion is set to &lt;i&gt;True - For Each Category&lt;/i&gt;, this parameter specifies the property or properties used to define the categories.</sci:help>
						<sci:validscript>SetInvalidDetails(&apos;This parameter is required when RunToCompletion is set to True - For Each Category&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
						<sci:enabledscript>SetDisabledDetails(&apos;To Enable, Set RunToCompletion to True - For Each Category&apos;);
Parameter(&apos;RunToCompletion&apos;) eq &apos;True - For Each Category&apos;;</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options" type="BoolType" required="false" visibility="visible" multi="false" expanded="true" uimpl="false">
						<sci:help>&lt;p&gt;
When set to True, this set of options allows the subprotocol to execute in parallel on one or more independent Pipeline Pilot servers, running locally or remotely.  Additional parameters control the number of data records to send in each process batch, the list of Pipeline Pilot servers to use, the number of protocol processes that can be executed on each server, and whether to preserve the order of the processed data records.
&lt;/p&gt;&lt;p&gt;
Use this option with care, since it will not increase throughput in all circumstances. Generally speaking, it yields improved performance when the parallelization benefits outweigh the data transfer overhead for the specified batch size.  As a rough guide, performance can be improved when each individual batch requires at least 10 seconds to execute, although this can be affected by the size of each data record.
&lt;/p&gt;&lt;p&gt;
When running the protocol with debugging, the subprotocol will provide debugging messages to detail each of the various steps of execution.  Also, components located within the parallel subprotocol will display their debugging messages as well.
&lt;/p&gt;&lt;p&gt;
For more information on the parallel subprotocol options, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_parallel_processing.htm&apos;)&quot;&gt;Parallel Processing Subprotocols&lt;/a&gt;.
&lt;/p&gt;
</sci:help>
						<sci:member>Parallel Processing Options Batch Size</sci:member>
						<sci:member>Parallel Processing Options Server</sci:member>
						<sci:member>Parallel Processing Options Preserve Order</sci:member>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Batch Size" type="LongType" required="true" visibility="visible" multi="false" uimpl="false">
						<sci:help>&lt;p&gt;The number of records to send to the remote server(s) for each subprotocol execution.  In general, performance is optimized when the amount of time required to process each batch is at least 10 seconds (note that this can vary depending on the characteristics of the remote server&apos;s hardware).  Use a batch size of -1 to pass all data in a single batch.&lt;/p&gt;
&lt;p&gt;When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - for each category&quot;, the batch sizes will be determined by the number of records in each individual category.  Therefore, the &lt;i&gt;Batch Size&lt;/i&gt; parameter is not applicable.</sci:help>
						<sci:enabledscript>#parallel := Parameter(&apos;Parallel Processing Options&apos;);
if (not #parallel) then
	SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
end if;
#parallel;</sci:enabledscript>
						<sci:value>300000</sci:value>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server" type="StringType" required="false" visibility="visible" multi="true" expanded="true" legalvalsenforced="false" uimpl="false">
						<sci:help>&lt;p&gt;
A comma-separated list of Pipeline Pilot servers on which to execute the parallel subprotocol.  The server names should be in the same format as the Pipeline Pilot Client&apos;s change server dialog (that is, server-name:port-number).
&lt;/p&gt;&lt;p&gt;
Specifying &lt;b&gt;localhost&lt;/b&gt; as a server will cause the subprotocol to use its own Pipeline Pilot server.  This can be useful on multi-CPU/multi-core systems (where the subprotocol jobs are spawned on the same machine) and Pipeline Pilot Linux clusters (where &apos;localhost&apos; requests spawning the subprotocol jobs on the same cluster).
&lt;/p&gt;</sci:help>
						<sci:member>Parallel Processing Options Server Processes</sci:member>
						<sci:member>Parallel Processing Options Server Run On Grid</sci:member>
						<sci:validscript>SetInvalidDetails(&apos;This parameter is required.&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:value>localhost</sci:value>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Processes" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>A comma-separated list of the maximum number of batches that can be simultaneously executed on each remote server.  The number of entries in this parameter must equal the number of servers. If &apos;*&apos; is specified as the number of processes, then that server will only launch as many batches as the administrator of the remote server has permitted.&lt;/br&gt;&lt;/br&gt;For non-Grid Engine job, the number of jobs will be limited to the value for the maximum number of simultaneous subprotocol jobs as defined in the Admin Console even if this value is higher than the value entered here or &apos;*&apos;.&lt;/br&gt;&lt;/br&gt;For Grid Engine jobs, the number of jobs will be limited to the value for the maximum number of simultaneous subprotocol grid jobs as defined in the Admin Console even if this value is higher than the value entered here or &apos;*&apos;.&lt;/br&gt;&lt;/br&gt;</sci:help>
						<sci:validscript>/* Server Processes must have the same number of comma separated entries as the Server parameter and must have a value*/
#processes := parameter();
expand(&apos;,&apos;, #processes);
#servers := parameter(&apos;Parallel Processing Options Server&apos;);
expand(&apos;,&apos;, #servers);

if (numvalues(#processes) == 0) then
	SetInvalidDetails(&apos;This parameter is required.&apos;);
else
	SetInvalidDetails(&apos;The number of server processes (&apos; . numvalues(#processes) . &apos;) must equal the number of servers (&apos; . numvalues(#servers) . &apos;).&apos;);
end if;
numvalues(#processes) &gt; 0 and numvalues(#processes) == numvalues(#servers);</sci:validscript>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Run On Grid" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Run subprotocol on grid engine if available.  Note: If no grid engine is configured the subprotocol will still run even if this parameter is set to true.</sci:help>
						<sci:member>Parallel Processing Options Server Run On Grid Queue Name</sci:member>
						<sci:member>Parallel Processing Options Server Run On Grid Grid Options</sci:member>
						<sci:enabledscript>parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Run On Grid Queue Name" type="StringType" required="false" visibility="visible" multi="false" legalvalsenforced="false" uimpl="false">
						<sci:help>Select the queue name on the grid to submit jobs to. Leave blank to use default queue name.</sci:help>
						<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Run On Grid Grid Options" type="StringType" required="false" visibility="visible" multi="true" uimpl="false">
						<sci:help>&lt;p&gt;This is an array of command line options to send to the Grid engine submit command.&lt;/p&gt;
&lt;p&gt;If you just include one line, whatever you enter will be sent &quot;as is&quot; to the submission command.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Just sending options directly to command line - PBS&lt;/b&gt;
&lt;p&gt;-l procs=16 -l walltime=08:00:00 -A PROJECTID&lt;/p&gt;
&lt;/br&gt;
&lt;p&gt;There are a number of parameters that Pipeline Pilot will translate to the correct command line options for whichever supported Grid Engine you are using.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Supported parameters&lt;/b&gt;
&lt;p&gt;Account=&amp;lt;Project/Account name&amp;gt;&lt;/p&gt;
&lt;p&gt;Maximum Execution Time=&amp;lt;DD:MM:SS&amp;gt; - LSF ignores seconds&lt;/p&gt;
&lt;p&gt;Number of Cores=&amp;lt;16&amp;gt;&lt;/p&gt;
&lt;p&gt;Parallel Environment=&amp;lt;The Parallel Environment to use&amp;gt; - Only needed for SGE&lt;/p&gt;
&lt;p&gt;Other=&amp;lt;Additional Parameters sent directly to submit command line&amp;gt;&lt;/p&gt;</sci:help>
						<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Preserve Order" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Whether to preserve the order of the data as it enters and leaves the remote subprotocol.</sci:help>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Tempfiles" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>&lt;p&gt;A comma-delimited list of global properties, each of which is automatically populated with the name of a file in the job&apos;s temporary folder, which always has a unique name.&lt;p/&gt;For each global name, an additional global is created (with the suffix &lt;i&gt;_Filename&lt;/i&gt;) that hold only the leaf file name of the temporary file.&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="DeclareLocal" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>&lt;p&gt;Lists a set of properties (without the @) to create on the global property list for this subprotocol. Separate property names with commas. Such properties can only be accessed within the scope of this subprotocol and its descendent subprotocols.&lt;p/&gt;

&lt;p&gt;Any global property not declared in this way is created on the top-level global property list and is accessible from all subprotocols, but breaks the encapsulation of the subprotocol and may collide with another property of the same name.&lt;/p&gt;

&lt;p&gt;Therefore, you should always declare a new global property in the &lt;i&gt;DeclareLocal&lt;/i&gt; parameter, to minimize the scope of the global property to the subprotocol where it is used.&lt;/p&gt;

&lt;p&gt;The example &lt;i&gt;DeclareLocal&lt;/i&gt; value below creates 3 global properties in the subprotocol scope. Note that you can initialize the declared global value with a scalar value using the &quot;:=&quot; syntax, as shown. You can surround text string values with quotes to aid clarity.&lt;/p&gt;
&lt;pre&gt;
    SubP_Counter := 0, SubP_NameHash, SubP_TitleText:=&quot;Sample 1&quot;
&lt;/pre&gt;
</sci:help>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Custom Error Message</sci:help>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>DataPrep</sci:value>
					</sci:arg>
					<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol AutoLayout</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>ExpressionNode</sci:value>
					</sci:arg>
					<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
						<sci:help>Component Revision</sci:help>
						<sci:value>790</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{17001C74-63CE-4B4B-B37C-F0EAA19CE4AA}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>378 -470</sci:value>
					</sci:arg>
					<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>By Ref</sci:help>
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Builds subprotocols in Pipeline Pilot.</sci:value>
						<sci:value>&lt;p&gt;
Use a subprotocol to collapse one or more components into a single item. Open 
a subprotocol to view or edit its contents. 
&lt;/p&gt;&lt;p&gt;
To define input and output ports, display 
icon, and parameter settings, right-click and select Edit. You can save subprotocols and reuse them. 
For more information, see the User Guide help for &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_overview.htm&apos;)&quot;&gt;Subprotocols 
Overview&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;
For more information on the parallel subprotocol options, see 
&lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_parallel_processing.htm&apos;)&quot;&gt;Parallel 
Processing Subprotocols&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;
Tip: Any component can be made into a shortcut, 
so that the latest version is always used. For more information, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/shortcuts.htm&apos;)&quot;&gt;Creating 
Shortcuts&lt;/a&gt;.
&lt;/p&gt;</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value>Records passing out of any unconnected pass ports of components inside the subprotocol</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value>Records passing out of any unconnected fail ports of components inside the subprotocol</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>17.2.0.1267</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Sticky Notes</sci:help>
					</sci:arg>
					<sci:arg name="ProtocolScale2" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Scale</sci:help>
						<sci:value>100</sci:value>
					</sci:arg>
					<sci:arg name="Protocol Options" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Options</sci:help>
						<sci:legalval>Owner Access Only</sci:legalval>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/coreutils</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Thu Sep 15 15:57:54 2016</sci:value>
					</sci:arg>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>13</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Utilities\Subprotocol Utilities\Subprotocol</sci:value>
					</sci:arg>
				</sci:component>
				<sci:protocol>
					<sci:data object="SciTegic.PropertyFunctions.1">
						<sci:component name="Keep Properties" version="2">
							<sci:arg name="PropertyList" type="PropertyNameType" required="true" visibility="visible" multi="true">
								<sci:help>The list of property names to keep</sci:help>
								<sci:member>RenameList</sci:member>
								<sci:value>smiles</sci:value>
								<sci:value>idnumber</sci:value>
							</sci:arg>
							<sci:arg name="RenameList" type="PropertyNameType" required="false" visibility="visible" multi="true">
								<sci:help>If provided, it causes the properties given in PropertyList to be 
renamed to the corresponding name in this list.  If not provided, then no properties are renamed.</sci:help>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:help>the action to perform</sci:help>
								<sci:value>Keep</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Tue Sep 13 07:18:38 2016</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Destination&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>#propertyList := Parameter(&apos;PropertyList&apos;);
#displayName := &apos;&apos;;
for #i in 1 .. numvalues(#propertyList) loop
  #prop := trim(#propertyList[#i]);
  if (strlength(#prop) &gt; 0) then
    if (strlength(#displayName) &gt; 0) then
	  #displayName .= &apos;, &apos;;
	end if;
    #displayName .= #prop;
  end if;
end loop;
if(strlength(#displayName) &gt; 0) then		
	&apos;Keep &apos; . #displayName;
else
	&quot;&quot;;
end if;</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol AutoLayout</sci:help>
								<sci:value>true</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>EXPRESSIONNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
								<sci:help>Component Revision</sci:help>
								<sci:value>100</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>SubProtocol</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolScale" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Scale</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>90 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{456195EF-9708-4367-B3DD-21EBF3796604}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Keeps only the specified properties</sci:value>
								<sci:value>&lt;p&gt;For each incoming data record, retains only the properties found in the list of property names specified by &lt;i&gt;PropertyList&lt;/i&gt;.  All other properties are removed.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To remove specified properties from each data record, use 
&lt;a href=&quot;javascript:DoLink(&apos;{C2ED35FF-5397-4877-AADB-10F1A15D60E2}&apos;)&quot;&gt;Remove Properties&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>With only the specified properties remaining</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>17.1.0.119</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>By Ref</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Sticky Notes</sci:help>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Property Manipulators\Keep Properties</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.NormalizePropertyTypes.1">
						<sci:component name="Clean Data" version="2">
							<sci:arg name="Output What" type="StringType" required="false" visibility="hidden" multi="false">
								<sci:help>What to output - either a summary of the property information, one record per property, or the cleaned data, one record per incoming data record.

If &lt;i&gt;Summary Properties&lt;/i&gt; is selected, the summary properties are:

&lt;ul&gt;
&lt;li&gt;name: the name of the property&lt;/li&gt;
&lt;li&gt;count: the number of incoming data records containing this property&lt;/li&gt;
&lt;li&gt;type: the inferred type of the property (see list of possible types below)&lt;/li&gt;
&lt;li&gt;min: if numeric or date/time, the minimum value of the property&lt;/li&gt;
&lt;li&gt;max: if numeric or date/time, the maximum value of the property&lt;/li&gt;
&lt;li&gt;values: if string, then the list of different values (if less than Maximum Number of Values)&lt;/li&gt;
&lt;li&gt;missingvalues: if this property contained any missing values, then this will contain the missing values that were found&lt;/li&gt;
&lt;/ul&gt;

The possible values for type are:

&lt;ul&gt;
&lt;li&gt;Null&lt;li&gt;
&lt;li&gt;Boolean&lt;li&gt;
&lt;li&gt;Integer&lt;li&gt;
&lt;li&gt;Double&lt;li&gt;
&lt;li&gt;String&lt;li&gt;
&lt;li&gt;Text&lt;li&gt;
&lt;li&gt;DateTime&lt;li&gt;
&lt;li&gt;Other&lt;li&gt;
&lt;/ul&gt;

      </sci:help>
								<sci:legalval selected="true">Cleaned Data</sci:legalval>
								<sci:legalval>Property Summary</sci:legalval>
							</sci:arg>
							<sci:arg name="Summary Options" type="GroupType" required="false" visibility="hidden" multi="false" legalvalsenforced="false">
								<sci:help>Options that affect the output of the summary data only</sci:help>
								<sci:member>Maximum Number of Values</sci:member>
								<sci:member>Text Length</sci:member>
							</sci:arg>
							<sci:arg name="Maximum Number of Values" type="LongType" required="false" visibility="hidden" multi="false" expanded="true">
								<sci:help>For String properties, we also return a list of possible values. This sets the maximum number of different values we wish to return. If that is exceeded, then no values are returned.
      </sci:help>
								<sci:value>20</sci:value>
							</sci:arg>
							<sci:arg name="Text Length" type="LongType" required="false" visibility="hidden" multi="false">
								<sci:help>
        For string properties, if the length of the value is greater than or equal to this number,
        then that property is considered Text, and no values are collected or returned.
      </sci:help>
								<sci:value>32</sci:value>
							</sci:arg>
							<sci:arg name="Conversion Options" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>&lt;p&gt;Options that affect how we inspect and convert between types.&lt;/p&gt;

&lt;p&gt;Options are: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Check Date Time&lt;/b&gt;: check strings to see if they are datetime values. (This can be slow!)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Use Calculable Property Types&lt;/b&gt;: if the property name exists as a calculable property, use that type as the minimum type.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Numeric [0,1] is Integer&lt;/b&gt;: if we see a rpoperty with only 0 and 1&apos;s, that is normally considered a boolean. If this option is selected, it is considered an integer. &lt;/li&gt;
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">Check Date Time</sci:legalval>
								<sci:legalval>Use Calculable Property Types</sci:legalval>
								<sci:legalval selected="true">Numeric [0,1] is Integer</sci:legalval>
							</sci:arg>
							<sci:arg name="Clean Behavior" type="StringType" required="false" visibility="visible" multi="false" expanded="true">
								<sci:help>&lt;p&gt;The &lt;i&gt;Clean Data&lt;/i&gt; will pass only clean data out the Pass port. &quot;Clean data&quot; is data where there are no missing values or values that failed to coerce to a requested property type, across all the properties of the data record.&lt;/p&gt;

&lt;p&gt;If a particular property has an unclean value in at least one data record, there are two cleaning choices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Remove Any Data Record with Unclean Value&lt;/b&gt;: any data record containing at least one unclean property value will be removed from the data stream and passed out the Fail port.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Remove Unclean Property from All Data Records&lt;/b&gt;: any property having an unclean value in at least one data record, will be removed from &lt;i&gt;all&lt;/i&gt; data records. The remaining properties will be returned via the Pass port. The removed properties are collected onto another data record and passed out the Fail port.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">Remove Any Data Record with Unclean Value</sci:legalval>
								<sci:legalval>Remove Unclean Property from All Data Records</sci:legalval>
							</sci:arg>
							<sci:arg name="Missing Value Options" type="GroupType" required="false" visibility="visible" multi="false" expanded="true" legalvalsenforced="false">
								<sci:help>Options to control the identification of missing values, and to possibly standardize (and then accept as clean) these values by column type using a provided replacement string.</sci:help>
								<sci:member>Missing Value Strings</sci:member>
								<sci:member>Replace Missing Values</sci:member>
							</sci:arg>
							<sci:arg name="Missing Value Strings" type="StringType" required="false" visibility="visible" multi="true" expanded="true">
								<sci:help>If provided, this is an array of string values that will be interpreted as missing values. Note that an empty entry causes the empty string to be treated as a missing value.</sci:help>
								<sci:value/>
								<sci:value>*</sci:value>
								<sci:value>?</sci:value>
								<sci:value>NULL</sci:value>
								<sci:value>NA</sci:value>
								<sci:value>N/A</sci:value>
								<sci:value>NaN</sci:value>
							</sci:arg>
							<sci:arg name="Replace Missing Values" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Whether to identify missing values using the list of values in &lt;i&gt;Missing Values Strings&lt;/i&gt;.</sci:help>
								<sci:member>Types to Replace</sci:member>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Types to Replace" type="StringType" required="false" visibility="visible" multi="true" expanded="true">
								<sci:help>Replace missing values with particular strings for particular column types</sci:help>
								<sci:member>Boolean Missing Values</sci:member>
								<sci:member>Integer Missing Values</sci:member>
								<sci:member>Double Missing Values</sci:member>
								<sci:member>String Missing Values</sci:member>
								<sci:member>DateTime Missing Values</sci:member>
								<sci:enabledscript>parameter(&apos;Replace Missing Values&apos;)</sci:enabledscript>
								<sci:legalval selected="true">Boolean</sci:legalval>
								<sci:legalval selected="true">Integer</sci:legalval>
								<sci:legalval selected="true">Double</sci:legalval>
								<sci:legalval selected="true">String</sci:legalval>
								<sci:legalval selected="true">DateTime</sci:legalval>
							</sci:arg>
							<sci:arg name="Boolean Missing Values" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Replace missing values in Boolean columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
								<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Boolean&apos;);</sci:enabledscript>
								<sci:value>False</sci:value>
							</sci:arg>
							<sci:arg name="Integer Missing Values" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Replace missing values in Integer columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
								<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Integer&apos;);</sci:enabledscript>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="Double Missing Values" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Replace missing values in Double columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
								<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Double&apos;);</sci:enabledscript>
								<sci:value>0.0</sci:value>
							</sci:arg>
							<sci:arg name="String Missing Values" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Replace missing values in String columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
								<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;String&apos;);</sci:enabledscript>
							</sci:arg>
							<sci:arg name="DateTime Missing Values" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Replace missing values in DateTime columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
								<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;DateTime&apos;);</sci:enabledscript>
								<sci:value>1/1/1970</sci:value>
							</sci:arg>
							<sci:arg name="Property Type Coercion Options" type="GroupType" required="false" visibility="visible" multi="true" legalvalsenforced="false">
								<sci:help>You can force a particular property to a specific type. 

If you do this, and any of the values on a data record (other than missing values) fails to coerce, then the data is considered unclean. 
</sci:help>
								<sci:member>Property 1</sci:member>
								<sci:member>Property 2</sci:member>
								<sci:member>Property 3</sci:member>
								<sci:member>Property 4</sci:member>
								<sci:member>Property 5</sci:member>
								<sci:member>Property 6</sci:member>
							</sci:arg>
							<sci:arg name="Property 1" type="PropertyNameType" required="false" visibility="visible" multi="false" expanded="true">
								<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
								<sci:member>Property 1 Coerce to Type</sci:member>
							</sci:arg>
							<sci:arg name="Property 1 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
								<sci:legalval>Boolean</sci:legalval>
								<sci:legalval>Integer</sci:legalval>
								<sci:legalval selected="true">Double</sci:legalval>
								<sci:legalval>String</sci:legalval>
								<sci:legalval>DateTime</sci:legalval>
							</sci:arg>
							<sci:arg name="Property 2" type="PropertyNameType" required="false" visibility="visible" multi="false">
								<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
								<sci:member>Property 2 Coerce to Type</sci:member>
							</sci:arg>
							<sci:arg name="Property 2 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
								<sci:legalval>Boolean</sci:legalval>
								<sci:legalval>Integer</sci:legalval>
								<sci:legalval selected="true">Double</sci:legalval>
								<sci:legalval>String</sci:legalval>
								<sci:legalval>DateTime</sci:legalval>
							</sci:arg>
							<sci:arg name="Property 3" type="PropertyNameType" required="false" visibility="visible" multi="false">
								<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
								<sci:member>Property 3 Coerce to Type</sci:member>
							</sci:arg>
							<sci:arg name="Property 3 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
								<sci:legalval>Boolean</sci:legalval>
								<sci:legalval>Integer</sci:legalval>
								<sci:legalval selected="true">Double</sci:legalval>
								<sci:legalval>String</sci:legalval>
								<sci:legalval>DateTime</sci:legalval>
							</sci:arg>
							<sci:arg name="Property 4" type="PropertyNameType" required="false" visibility="visible" multi="false">
								<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
								<sci:member>Property 4 Coerce to Type</sci:member>
							</sci:arg>
							<sci:arg name="Property 4 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
								<sci:legalval>Boolean</sci:legalval>
								<sci:legalval>Integer</sci:legalval>
								<sci:legalval selected="true">Double</sci:legalval>
								<sci:legalval>String</sci:legalval>
								<sci:legalval>DateTime</sci:legalval>
							</sci:arg>
							<sci:arg name="Property 5" type="PropertyNameType" required="false" visibility="visible" multi="false">
								<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
								<sci:member>Property 5 Coerce to Type</sci:member>
							</sci:arg>
							<sci:arg name="Property 5 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
								<sci:legalval>Boolean</sci:legalval>
								<sci:legalval>Integer</sci:legalval>
								<sci:legalval selected="true">Double</sci:legalval>
								<sci:legalval>String</sci:legalval>
								<sci:legalval>DateTime</sci:legalval>
							</sci:arg>
							<sci:arg name="Property 6" type="PropertyNameType" required="false" visibility="visible" multi="false">
								<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
								<sci:member>Property 6 Coerce to Type</sci:member>
							</sci:arg>
							<sci:arg name="Property 6 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
								<sci:legalval>Boolean</sci:legalval>
								<sci:legalval>Integer</sci:legalval>
								<sci:legalval selected="true">Double</sci:legalval>
								<sci:legalval>String</sci:legalval>
								<sci:legalval>DateTime</sci:legalval>
							</sci:arg>
							<sci:arg name="Array Value Options" type="GroupType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Options to handle array data</sci:help>
								<sci:member>Array Values Are</sci:member>
							</sci:arg>
							<sci:arg name="Array Values Are" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Whether array values are OK, are unclean, or should be replaced by a single value, the first value in the array.</sci:help>
								<sci:legalval>OK</sci:legalval>
								<sci:legalval selected="true">Unclean</sci:legalval>
								<sci:legalval>Replaced by First Value</sci:legalval>
							</sci:arg>
							<sci:arg name="Ignore Properties" type="PropertyNameType" required="false" visibility="visible" multi="true" uimpl="false">
								<sci:help>A list of properties to ignore, if any. They will be passed through untouched, and never considered unclean.</sci:help>
								<sci:value>reagent1</sci:value>
								<sci:value>reagent2</sci:value>
								<sci:value>reagent3</sci:value>
								<sci:value>reagent4</sci:value>
								<sci:value>reaction</sci:value>
								<sci:value>PAINS</sci:value>
								<sci:value>BRENK</sci:value>
								<sci:value>NIH</sci:value>
								<sci:value>ZINC</sci:value>
								<sci:value>lead-like</sci:value>
								<sci:value>350/3_lead-like</sci:value>
								<sci:value>fragments</sci:value>
								<sci:value>strict_fragments</sci:value>
								<sci:value>PPI_modulators</sci:value>
								<sci:value>natural_product-like</sci:value>
							</sci:arg>
							<sci:arg name="Error Property Name" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>The name of the property to put error messages into. If left blank, do not add an error property.</sci:help>
								<sci:value>ErrorText</sci:value>
							</sci:arg>
							<sci:arg name="CacheSizeInflationFactor" type="LongType" required="false" visibility="hidden" multi="false" uimpl="true">
								<sci:help>When you run using a limited cache size, normally only that many records may be output.
This parameter allows you to increase that size by a multiplicative factor. </sci:help>
								<sci:value>2</sci:value>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Implementation Of" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:legalval>Normalize Property Types</sci:legalval>
								<sci:legalval selected="true">Clean Data</sci:legalval>
								<sci:legalval>Set Property Type</sci:legalval>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Sep 14 07:50:41 2017</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>Clean Data</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>COMPONENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{6E28C170-2FEC-4A3C-90A6-2DCEAA330E9E}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>378 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Ensure your data is clean; that is, has no missing values, is coerced to the desired type, and is not an array value.</sci:value>
								<sci:value>&lt;p&gt;&lt;i&gt;Cleaning&lt;/i&gt; data is the act of finding, for each property, that it has no missing values, is coerced to the desired type, and is not an array value. The type is inferred: for example, a property may contains strings, with values &quot;0&quot; and &quot;1&quot;. This will be cleaned into Boolean values.&lt;/p&gt;

The problems that cleaning addresses are:
&lt;ol&gt;
&lt;li&gt;The same property name may have different value types on different data records&lt;/li&gt;
&lt;li&gt;The property might be of types that are coercible to some simpler base type (e.g., numbers might be stored as strings, when they could be better represented as integers)&lt;/li&gt;
&lt;li&gt;The property might be missing from some data records&lt;/li&gt;
&lt;li&gt;The property might appear multiple times on a given data record (arrays)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The normalized type is the simplest type possible, ordered from: Null, Boolean, Integer, Double, String, DateTime.&lt;/p&gt;
</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>The Normalized data records, or the summary for each property.</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>1</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Data Manipulators\Clean Data</sci:value>
							</sci:arg>
						</sci:component>
						<sci:proplist>
							<sci:propval name="RegistrationVersion">18.1.0.1590</sci:propval>
						</sci:proplist>
					</sci:data>
					<sci:data object="SciTegic.PropertyFunctions.1">
						<sci:component name="First Occurrence Filter" version="2">
							<sci:arg name="KeyProperty" type="PropertyNameType" required="true" visibility="visible" multi="true">
								<sci:help>Name of the property holding values to keep only one of.  If you give more than one key property, then all values must have occurred at the same time on some other record for it to be rejected.</sci:help>
								<sci:member>CaseSensitive</sci:member>
								<sci:value>Smiles</sci:value>
							</sci:arg>
							<sci:arg name="CaseSensitive" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Whether to perform the comparison as case-sensitive or case-insensitive 
strings</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:help>the action to perform</sci:help>
								<sci:value>FirstOccurrence</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Jan 16 14:54:51 2003</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>First Occurrence
Filter</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>Expression Filter</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>FILTERNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{D2EC3EBB-CD17-4093-93A9-D9FB603DE083}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>666 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Passes data records for which the values of specified properties have not been seen on any previous record

</sci:value>
								<sci:value>&lt;p&gt;For each incoming data record, the value of the property specified by &lt;i&gt;KeyProperty&lt;/i&gt; is checked.  If the value has not been seen in earlier records, the record is sent out the Pass port.  Otherwise it is sent out the Fail port.&lt;/p&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To filter for data records with property values that occur once and only once in the input stream, use &lt;a href=&quot;javascript:DoLink(&apos;{2FD9ECF2-C47F-4A20-AC72-5F352E08FC98}&apos;)&quot;&gt;Unique Filter&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>Data records with the first occurrence of a value of the given property.</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value>Data records with the second and subsequent occurrences of a value of the given property.</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>2</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Data Filters\First Occurrence Filter</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.CalculateSmiles.1">
						<sci:component name="Molecule from SMILES" version="2">
							<sci:arg name="FromProperty" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The name of the property in the data
which holds the SMILES information</sci:help>
								<sci:member>KekulizeAromaticBonds</sci:member>
								<sci:member>Send Empty SMILES to Fail Port</sci:member>
								<sci:member>Parse RAtoms from CXSMILES</sci:member>
								<sci:value>smiles</sci:value>
							</sci:arg>
							<sci:arg name="KekulizeAromaticBonds" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Turn aromatic bonds into single/double bonds (set to True) or into aromatic query bonds (set to False). Molecules created with aromatic query bonds are more suitable as queries than as specific molecules. They should not be used as input for property calculators such as Molecular Weight, pKa and others, which require the structure to be uniquely defined.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Send Empty SMILES to Fail Port" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>When set to True, data records with SMILES represented by empty strings or strings with only blank characters are sent to the Fail port. 
&lt;p&gt;
When set to False, empty SMILES strings generate empty molecules with no atoms or bonds.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Parse RAtoms from CXSMILES" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Set this parameter to True to parse any Rgroup information from ChemAxon SMILES extentions (CXSMILES), if present. The extension is separated from the actual SMILES by a space or tab. When the parameter is set to False (the default state) the extension is ignored.
&lt;p&gt;
Examples
&lt;br&gt;
C1O[*]CO[*]1 |$;;_R2;;;_R1$,RG:_R1={C},{N},_R2={C},{N}|
&lt;br&gt;
Cl[*](Br)I |$;_R1;;$,RG:_R1={*CCCC(C*)CC*|
&lt;br&gt;
[*]N[C@@H](C=O)C([*])=O |$_R1;;;;;;_R2;$|
&lt;br&gt;
NC(=N)NCCC[C@H](N[*])C([*])=O |$;;;;;;;;;_R1;;_R2;$|
&lt;p&gt;
The star atoms (unknown atom type) in the SMILES are replaced by the corresponding numbered R atoms from the extension. Any RG fragment information present in the Rgroup extension is ignored.
&lt;p&gt;
Only the Rgroup information in the CXSMILES extension is parsed, any other extension is ignored.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval>Halt</sci:legalval>
								<sci:legalval selected="true">Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval>Halt</sci:legalval>
								<sci:legalval selected="true">Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/chemistry</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Wed Mar 30 15:06:09 2016</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>Molecule from SMILES</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>Molecule from SMILES</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>COMPONENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{AC8262DA-E648-4D24-9CD1-D731A8F53F9D}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>954 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Converts a Daylight SMILES text property to a molecule</sci:value>
								<sci:value>&lt;p&gt;Builds a molecular representation for each data record from the SMILES string found in the property list. If a molecular representation is already present, it is overwritten by the new molecule. The input SMILES string is preserved.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To create a string property containing SMILES data, use &lt;a href=&quot;javascript:DoLink(&apos;{0C60C40A-5189-42DA-A3C0-4EA44BFF7D15}&apos;)&quot;&gt;Molecule to SMILES&lt;/a&gt; or &lt;a href=&quot;javascript:DoLink(&apos;{0C60C40A-5189-42DA-A3C0-4EA44BC27D15}&apos;)&quot;&gt;Canonical Smiles&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To read and write SMILES files, use &lt;a href=&quot;javascript:DoLink(&apos;{60FC1A04-61FD-4D4F-AC3F-A818AB614C78}&apos;)&quot;&gt;SMILES Reader&lt;/a&gt; and &lt;a href=&quot;javascript:DoLink(&apos;{72A5A427-651F-4847-9525-54CB438A7166}&apos;)&quot;&gt;SMILES Writer&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Molecule</sci:value>
								<sci:value>Molecular data record created from SMILES string</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>17.1.0.51</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>3</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Chemistry\Data Access and Manipulation\Converters\Molecule From Text\Molecule from SMILES</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.CalculateSmiles.1">
						<sci:component name="Canonical Smiles" version="2">
							<sci:arg name="Output" type="StringType" required="false" visibility="visible" multi="true">
								<sci:help>&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SMILES&lt;/b&gt; is a non-canonical representation for the molecule. (This is very fast to calculate compared to Canonical_SMILES.)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Canonical_SMILES&lt;/b&gt; is the representation that can be compared for identicality.&lt;/li&gt;
&lt;/ul&gt;

&lt;i&gt;Output&lt;/i&gt; properties can be calculated &quot;on demand&quot; by simply using their names within a PilotScript expression or as the parameter value to many parameters that require a property name.</sci:help>
								<sci:legalval type="StringType" selected="true">Canonical_Smiles</sci:legalval>
								<sci:legalval type="StringType">Smiles</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/chemistry</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Fri Apr 08 13:57:30 2011</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>Canonical Smiles</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>Canonical Smiles</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>CALCULATORNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{0C60C40A-5189-42DA-A3C0-4EA44BC27D15}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>1242 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Calculates a SMILES or canonical SMILES representation of the input molecule</sci:value>
								<sci:value>&lt;p&gt;SMILES is a terse textual representation of molecular data.  Canonical SMILES is a form of SMILES that is independent of how the molecule is drawn and so can be used to compare whether two molecules are identical.&lt;/P&gt;

Either or both of the following two properties can be calculated:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SMILES&lt;/b&gt; is a non-canonical representation for the molecule. (This is very fast to calculate compared to Canonical_SMILES.)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Canonical_SMILES&lt;/b&gt; is the representation that can be compared for identicality.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;The canonicalization algorithm is SciTegic&apos;s; while it is derived from the published Daylight algorithm, however, lack of complete documentation of their procedure means that it will not necessarily give identical results. Compare two SMILES for identity only when having both canonicalized by the same method. &lt;/li&gt;
&lt;li&gt;Stereo markings are only added to the SMILES when stereo is explicitly set on a stereocenter.  This is often not the case for 3D molecules where the stereo is implied from the coordinates of the attached atoms and not from explicit stereo markings.  To add stereo markings from coordinates use the &lt;i&gt;SetStereoFromCoordinates&lt;/i&gt; action in the &lt;a href=&quot;javascript:DoLink(&apos;{EFEA1A46-A6DB-4DB9-A5A9-C7F3D2ADFDE2}&apos;)&quot;&gt;Standardize Molecule&lt;/a&gt; component.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;You can create a SMILES string as text under any property name using &lt;a href=&quot;javascript:DoLink(&apos;{0C60C40A-5189-42DA-A3C0-4EA44BFF7D15}&apos;)&quot;&gt;Molecule to SMILES&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can convert a SMILES string into a molecule using &lt;a href=&quot;javascript:DoLink(&apos;{AC8262DA-E648-4D24-9CD1-D731A8F53F9D}&apos;)&quot;&gt;Molecule from SMILES&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For an alternative way of generating a canonical string representation, see &lt;a href=&quot;javascript:DoLink(&apos;{EB62CC30-BC6A-4d5f-8618-3EB9AF611C69}&apos;)&quot;&gt;Molecule to InChI&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</sci:value>
								<sci:value>Molecule</sci:value>
								<sci:value/>
								<sci:value>Molecule</sci:value>
								<sci:value>Records augmented with a text property containing the canonical SMILES or SMILES</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>8.4.5.28</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>4</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Chemistry\Property Calculators\Structural\Canonical Smiles</sci:value>
							</sci:arg>
						</sci:component>
						<sci:proplist>
							<sci:propval name="Canonical_Smiles|Category">Molecular Formats</sci:propval>
							<sci:propval name="Smiles|Category">Molecular Formats</sci:propval>
						</sci:proplist>
					</sci:data>
					<sci:data object="SciTegic.PropertyFunctions.1">
						<sci:component name="Remove Properties" version="2">
							<sci:arg name="PropertyList" type="PropertyNameType" required="true" visibility="visible" multi="true">
								<sci:help>The names of properties to remove from each data record entering the component</sci:help>
								<sci:value>smiles</sci:value>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:help>the action to perform</sci:help>
								<sci:value>Remove</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Tue Sep 13 07:18:43 2016</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;PropertyList&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>#propertyList := Parameter(&apos;PropertyList&apos;);
#displayName := &apos;&apos;;
for #i in 1 .. numvalues(#propertyList) loop
  #prop := trim(#propertyList[#i]);
  if (strlength(#prop) &gt; 0) then
    if (strlength(#displayName) &gt; 0) then
	  #displayName .= &apos;, &apos;;
	end if;
    #displayName .= #prop;
  end if;
end loop;
if(strlength(#displayName) &gt; 0) then		
	&apos;Remove &apos; . #displayName;
else
	&quot;&quot;;
end if;</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol AutoLayout</sci:help>
								<sci:value>true</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>EXPRESSIONNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
								<sci:help>Component Revision</sci:help>
								<sci:value>100</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>SubProtocol</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolScale" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Scale</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>1530 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{C2ED35FF-5397-4877-AADB-10F1A15D60E2}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Removes the specified properties</sci:value>
								<sci:value>For each data record that enters the component, the properties specified by &lt;i&gt;PropertyList&lt;/i&gt; are removed from the  record. 

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;To keep only a few properties from a long list, it may be more efficient to instead use &lt;a href=&quot;javascript:DoLink(&apos;{456195EF-9708-4367-B3DD-21EBF3796604}&apos;)&quot;&gt;Keep Properties&lt;/a&gt;.&lt;/p&gt;</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>Data records with the specified properties removed</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>17.1.0.119</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>By Ref</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Sticky Notes</sci:help>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>5</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Property Manipulators\Remove Properties</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.Protocol.1">
						<sci:component name="Subprotocol" version="2">
							<sci:arg name="RunToCompletion" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - For Each Data Record&quot;, the subprotocol is re-initialized and executed in its entirety for each individual data record it processes.
&lt;p&gt;
When set to &quot;True - For Each Category&quot;, the data records are divided into categories based on the value of the Categorize Using parameter and then the subprotocol is re-initialized and executed in its entirety for each category of data records. When used in conjunction with &lt;i&gt;Parallel Processing Options&lt;/i&gt;, each category of data records will be sent to the remote server as part of one single batch.</sci:help>
								<sci:member>RunToCompletion Categorize Using</sci:member>
								<sci:legalval selected="true">False</sci:legalval>
								<sci:legalval>True - For Each Data Record</sci:legalval>
								<sci:legalval>True - For Each Category</sci:legalval>
							</sci:arg>
							<sci:arg name="RunToCompletion Categorize Using" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>Required when RunToCompletion is set to &lt;i&gt;True - For Each Category&lt;/i&gt;, this parameter specifies the property or properties used to define the categories.</sci:help>
								<sci:validscript>SetInvalidDetails(&apos;This parameter is required when RunToCompletion is set to True - For Each Category&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
								<sci:enabledscript>SetDisabledDetails(&apos;To Enable, Set RunToCompletion to True - For Each Category&apos;);
Parameter(&apos;RunToCompletion&apos;) eq &apos;True - For Each Category&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>&lt;p&gt;
When set to True, this set of options allows the subprotocol to execute in parallel on one or more independent Pipeline Pilot servers, running locally or remotely.  Additional parameters control the number of data records to send in each process batch, the list of Pipeline Pilot servers to use, the number of protocol processes that can be executed on each server, and whether to preserve the order of the processed data records.
&lt;/p&gt;&lt;p&gt;
Use this option with care, since it will not increase throughput in all circumstances. Generally speaking, it yields improved performance when the parallelization benefits outweigh the data transfer overhead for the specified batch size.  As a rough guide, performance can be improved when each individual batch requires at least 10 seconds to execute, although this can be affected by the size of each data record.
&lt;/p&gt;&lt;p&gt;
When running the protocol with debugging, the subprotocol will provide debugging messages to detail each of the various steps of execution.  Also, components located within the parallel subprotocol will display their debugging messages as well.
&lt;/p&gt;&lt;p&gt;
For more information on the parallel subprotocol options, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_parallel_processing.htm&apos;)&quot;&gt;Parallel Processing Subprotocols&lt;/a&gt;.
&lt;/p&gt;
</sci:help>
								<sci:member>Parallel Processing Options Batch Size</sci:member>
								<sci:member>Parallel Processing Options Server</sci:member>
								<sci:member>Parallel Processing Options Preserve Order</sci:member>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Batch Size" type="LongType" required="true" visibility="visible" multi="false" uimpl="false">
								<sci:help>&lt;p&gt;The number of records to send to the remote server(s) for each subprotocol execution.  In general, performance is optimized when the amount of time required to process each batch is at least 10 seconds (note that this can vary depending on the characteristics of the remote server&apos;s hardware).  Use a batch size of -1 to pass all data in a single batch.&lt;/p&gt;
&lt;p&gt;When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - for each category&quot;, the batch sizes will be determined by the number of records in each individual category.  Therefore, the &lt;i&gt;Batch Size&lt;/i&gt; parameter is not applicable.</sci:help>
								<sci:enabledscript>#parallel := Parameter(&apos;Parallel Processing Options&apos;);
if (not #parallel) then
	SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
end if;
#parallel;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Server" type="StringType" required="false" visibility="visible" multi="true" expanded="true" legalvalsenforced="false" uimpl="false">
								<sci:help>&lt;p&gt;
A comma-separated list of Pipeline Pilot servers on which to execute the parallel subprotocol.  The server names should be in the same format as the Pipeline Pilot Client&apos;s change server dialog (that is, server-name:port-number).
&lt;/p&gt;&lt;p&gt;
Specifying &lt;b&gt;localhost&lt;/b&gt; as a server will cause the subprotocol to use its own Pipeline Pilot server.  This can be useful on multi-CPU/multi-core systems (where the subprotocol jobs are spawned on the same machine) and Pipeline Pilot Linux clusters (where &apos;localhost&apos; requests spawning the subprotocol jobs on the same cluster).
&lt;/p&gt;</sci:help>
								<sci:member>Parallel Processing Options Server Processes</sci:member>
								<sci:member>Parallel Processing Options Server Run On Grid</sci:member>
								<sci:validscript>SetInvalidDetails(&apos;This parameter is required.&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
								<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Server Processes" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>A comma-separated list of the maximum number of batches that can be simultaneously executed on each remote server.  The number of entries in this parameter must equal the number of servers. If &apos;*&apos; is specified as the number of processes, then that server will only launch as many batches as the administrator of the remote server has permitted.&lt;/br&gt;&lt;/br&gt;For non-Grid Engine job, the number of jobs will be limited to the value for the maximum number of simultaneous subprotocol jobs as defined in the Admin Console even if this value is higher than the value entered here or &apos;*&apos;.&lt;/br&gt;&lt;/br&gt;For Grid Engine jobs, the number of jobs will be limited to the value for the maximum number of simultaneous subprotocol grid jobs as defined in the Admin Console even if this value is higher than the value entered here or &apos;*&apos;.&lt;/br&gt;&lt;/br&gt;</sci:help>
								<sci:validscript>/* Server Processes must have the same number of comma separated entries as the Server parameter and must have a value*/
#processes := parameter();
expand(&apos;,&apos;, #processes);
#servers := parameter(&apos;Parallel Processing Options Server&apos;);
expand(&apos;,&apos;, #servers);

if (numvalues(#processes) == 0) then
	SetInvalidDetails(&apos;This parameter is required.&apos;);
else
	SetInvalidDetails(&apos;The number of server processes (&apos; . numvalues(#processes) . &apos;) must equal the number of servers (&apos; . numvalues(#servers) . &apos;).&apos;);
end if;
numvalues(#processes) &gt; 0 and numvalues(#processes) == numvalues(#servers);</sci:validscript>
								<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Server Run On Grid" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>Run subprotocol on grid engine if available.  Note: If no grid engine is configured the subprotocol will still run even if this parameter is set to true.</sci:help>
								<sci:member>Parallel Processing Options Server Run On Grid Queue Name</sci:member>
								<sci:member>Parallel Processing Options Server Run On Grid Grid Options</sci:member>
								<sci:enabledscript>parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Server Run On Grid Queue Name" type="StringType" required="false" visibility="visible" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>Select the queue name on the grid to submit jobs to. Leave blank to use default queue name.</sci:help>
								<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Server Run On Grid Grid Options" type="StringType" required="false" visibility="visible" multi="true" uimpl="false">
								<sci:help>&lt;p&gt;This is an array of command line options to send to the Grid engine submit command.&lt;/p&gt;
&lt;p&gt;If you just include one line, whatever you enter will be sent &quot;as is&quot; to the submission command.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Just sending options directly to command line - PBS&lt;/b&gt;
&lt;p&gt;-l procs=16 -l walltime=08:00:00 -A PROJECTID&lt;/p&gt;
&lt;/br&gt;
&lt;p&gt;There are a number of parameters that Pipeline Pilot will translate to the correct command line options for whichever supported Grid Engine you are using.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Supported parameters&lt;/b&gt;
&lt;p&gt;Account=&amp;lt;Project/Account name&amp;gt;&lt;/p&gt;
&lt;p&gt;Maximum Execution Time=&amp;lt;DD:MM:SS&amp;gt; - LSF ignores seconds&lt;/p&gt;
&lt;p&gt;Number of Cores=&amp;lt;16&amp;gt;&lt;/p&gt;
&lt;p&gt;Parallel Environment=&amp;lt;The Parallel Environment to use&amp;gt; - Only needed for SGE&lt;/p&gt;
&lt;p&gt;Other=&amp;lt;Additional Parameters sent directly to submit command line&amp;gt;&lt;/p&gt;</sci:help>
								<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Preserve Order" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>Whether to preserve the order of the data as it enters and leaves the remote subprotocol.</sci:help>
								<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Tempfiles" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
								<sci:help>&lt;p&gt;A comma-delimited list of global properties, each of which is automatically populated with the name of a file in the job&apos;s temporary folder, which always has a unique name.&lt;p/&gt;For each global name, an additional global is created (with the suffix &lt;i&gt;_Filename&lt;/i&gt;) that hold only the leaf file name of the temporary file.&lt;/p&gt;</sci:help>
							</sci:arg>
							<sci:arg name="DeclareLocal" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
								<sci:help>&lt;p&gt;Lists a set of properties (without the @) to create on the global property list for this subprotocol. Separate property names with commas. Such properties can only be accessed within the scope of this subprotocol and its descendent subprotocols.&lt;p/&gt;

&lt;p&gt;Any global property not declared in this way is created on the top-level global property list and is accessible from all subprotocols, but breaks the encapsulation of the subprotocol and may collide with another property of the same name.&lt;/p&gt;

&lt;p&gt;Therefore, you should always declare a new global property in the &lt;i&gt;DeclareLocal&lt;/i&gt; parameter, to minimize the scope of the global property to the subprotocol where it is used.&lt;/p&gt;

&lt;p&gt;The example &lt;i&gt;DeclareLocal&lt;/i&gt; value below creates 3 global properties in the subprotocol scope. Note that you can initialize the declared global value with a scalar value using the &quot;:=&quot; syntax, as shown. You can surround text string values with quotes to aid clarity.&lt;/p&gt;
&lt;pre&gt;
    SubP_Counter := 0, SubP_NameHash, SubP_TitleText:=&quot;Sample 1&quot;
&lt;/pre&gt;
</sci:help>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>standardize data according to Burggraaff et al.</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol AutoLayout</sci:help>
								<sci:value>1</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>ComponentNode</sci:value>
							</sci:arg>
							<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
								<sci:help>Component Revision</sci:help>
								<sci:value>790</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{17001C74-63CE-4B4B-B37C-F0EAA19CE4AA}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>1818 -95</sci:value>
							</sci:arg>
							<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>By Ref</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Builds subprotocols in Pipeline Pilot.</sci:value>
								<sci:value>&lt;p&gt;
Use a subprotocol to collapse one or more components into a single item. Open 
a subprotocol to view or edit its contents. 
&lt;/p&gt;&lt;p&gt;
To define input and output ports, display 
icon, and parameter settings, right-click and select Edit. You can save subprotocols and reuse them. 
For more information, see the User Guide help for &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_overview.htm&apos;)&quot;&gt;Subprotocols 
Overview&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;
For more information on the parallel subprotocol options, see 
&lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_parallel_processing.htm&apos;)&quot;&gt;Parallel 
Processing Subprotocols&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;
Tip: Any component can be made into a shortcut, 
so that the latest version is always used. For more information, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/shortcuts.htm&apos;)&quot;&gt;Creating 
Shortcuts&lt;/a&gt;.
&lt;/p&gt;</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>Records passing out of any unconnected pass ports of components inside the subprotocol</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value>Records passing out of any unconnected fail ports of components inside the subprotocol</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>17.2.0.1267</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Sticky Notes</sci:help>
							</sci:arg>
							<sci:arg name="ProtocolScale2" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Scale</sci:help>
								<sci:value>100</sci:value>
							</sci:arg>
							<sci:arg name="Protocol Options" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Options</sci:help>
								<sci:legalval>Owner Access Only</sci:legalval>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/coreutils</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Sep 15 15:57:54 2016</sci:value>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>6</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Utilities\Subprotocol Utilities\Subprotocol</sci:value>
							</sci:arg>
						</sci:component>
						<sci:protocol>
							<sci:data object="SciTegic.NormalizePropertyTypes.1">
								<sci:component name="Clean Data" version="2">
									<sci:arg name="Output What" type="StringType" required="false" visibility="hidden" multi="false">
										<sci:help>What to output - either a summary of the property information, one record per property, or the cleaned data, one record per incoming data record.

If &lt;i&gt;Summary Properties&lt;/i&gt; is selected, the summary properties are:

&lt;ul&gt;
&lt;li&gt;name: the name of the property&lt;/li&gt;
&lt;li&gt;count: the number of incoming data records containing this property&lt;/li&gt;
&lt;li&gt;type: the inferred type of the property (see list of possible types below)&lt;/li&gt;
&lt;li&gt;min: if numeric or date/time, the minimum value of the property&lt;/li&gt;
&lt;li&gt;max: if numeric or date/time, the maximum value of the property&lt;/li&gt;
&lt;li&gt;values: if string, then the list of different values (if less than Maximum Number of Values)&lt;/li&gt;
&lt;li&gt;missingvalues: if this property contained any missing values, then this will contain the missing values that were found&lt;/li&gt;
&lt;/ul&gt;

The possible values for type are:

&lt;ul&gt;
&lt;li&gt;Null&lt;li&gt;
&lt;li&gt;Boolean&lt;li&gt;
&lt;li&gt;Integer&lt;li&gt;
&lt;li&gt;Double&lt;li&gt;
&lt;li&gt;String&lt;li&gt;
&lt;li&gt;Text&lt;li&gt;
&lt;li&gt;DateTime&lt;li&gt;
&lt;li&gt;Other&lt;li&gt;
&lt;/ul&gt;

      </sci:help>
										<sci:legalval selected="true">Cleaned Data</sci:legalval>
										<sci:legalval>Property Summary</sci:legalval>
									</sci:arg>
									<sci:arg name="Summary Options" type="GroupType" required="false" visibility="hidden" multi="false" legalvalsenforced="false">
										<sci:help>Options that affect the output of the summary data only</sci:help>
										<sci:member>Maximum Number of Values</sci:member>
										<sci:member>Text Length</sci:member>
									</sci:arg>
									<sci:arg name="Maximum Number of Values" type="LongType" required="false" visibility="hidden" multi="false" expanded="true">
										<sci:help>For String properties, we also return a list of possible values. This sets the maximum number of different values we wish to return. If that is exceeded, then no values are returned.
      </sci:help>
										<sci:value>20</sci:value>
									</sci:arg>
									<sci:arg name="Text Length" type="LongType" required="false" visibility="hidden" multi="false">
										<sci:help>
        For string properties, if the length of the value is greater than or equal to this number,
        then that property is considered Text, and no values are collected or returned.
      </sci:help>
										<sci:value>32</sci:value>
									</sci:arg>
									<sci:arg name="Conversion Options" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>&lt;p&gt;Options that affect how we inspect and convert between types.&lt;/p&gt;

&lt;p&gt;Options are: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Check Date Time&lt;/b&gt;: check strings to see if they are datetime values. (This can be slow!)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Use Calculable Property Types&lt;/b&gt;: if the property name exists as a calculable property, use that type as the minimum type.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Numeric [0,1] is Integer&lt;/b&gt;: if we see a rpoperty with only 0 and 1&apos;s, that is normally considered a boolean. If this option is selected, it is considered an integer. &lt;/li&gt;
&lt;/ul&gt;</sci:help>
										<sci:legalval selected="true">Check Date Time</sci:legalval>
										<sci:legalval>Use Calculable Property Types</sci:legalval>
										<sci:legalval selected="true">Numeric [0,1] is Integer</sci:legalval>
									</sci:arg>
									<sci:arg name="Clean Behavior" type="StringType" required="false" visibility="visible" multi="false" expanded="true">
										<sci:help>&lt;p&gt;The &lt;i&gt;Clean Data&lt;/i&gt; will pass only clean data out the Pass port. &quot;Clean data&quot; is data where there are no missing values or values that failed to coerce to a requested property type, across all the properties of the data record.&lt;/p&gt;

&lt;p&gt;If a particular property has an unclean value in at least one data record, there are two cleaning choices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Remove Any Data Record with Unclean Value&lt;/b&gt;: any data record containing at least one unclean property value will be removed from the data stream and passed out the Fail port.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Remove Unclean Property from All Data Records&lt;/b&gt;: any property having an unclean value in at least one data record, will be removed from &lt;i&gt;all&lt;/i&gt; data records. The remaining properties will be returned via the Pass port. The removed properties are collected onto another data record and passed out the Fail port.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
										<sci:legalval selected="true">Remove Any Data Record with Unclean Value</sci:legalval>
										<sci:legalval>Remove Unclean Property from All Data Records</sci:legalval>
									</sci:arg>
									<sci:arg name="Missing Value Options" type="GroupType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
										<sci:help>Options to control the identification of missing values, and to possibly standardize (and then accept as clean) these values by column type using a provided replacement string.</sci:help>
										<sci:member>Missing Value Strings</sci:member>
										<sci:member>Replace Missing Values</sci:member>
									</sci:arg>
									<sci:arg name="Missing Value Strings" type="StringType" required="false" visibility="visible" multi="true" expanded="true">
										<sci:help>If provided, this is an array of string values that will be interpreted as missing values. Note that an empty entry causes the empty string to be treated as a missing value.</sci:help>
										<sci:value/>
										<sci:value>*</sci:value>
										<sci:value>?</sci:value>
										<sci:value>NULL</sci:value>
										<sci:value>NA</sci:value>
										<sci:value>N/A</sci:value>
										<sci:value>NaN</sci:value>
									</sci:arg>
									<sci:arg name="Replace Missing Values" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
										<sci:help>Whether to identify missing values using the list of values in &lt;i&gt;Missing Values Strings&lt;/i&gt;.</sci:help>
										<sci:member>Types to Replace</sci:member>
										<sci:legalval>True</sci:legalval>
										<sci:legalval selected="true">False</sci:legalval>
									</sci:arg>
									<sci:arg name="Types to Replace" type="StringType" required="false" visibility="visible" multi="true" expanded="true">
										<sci:help>Replace missing values with particular strings for particular column types</sci:help>
										<sci:member>Boolean Missing Values</sci:member>
										<sci:member>Integer Missing Values</sci:member>
										<sci:member>Double Missing Values</sci:member>
										<sci:member>String Missing Values</sci:member>
										<sci:member>DateTime Missing Values</sci:member>
										<sci:enabledscript>parameter(&apos;Replace Missing Values&apos;)</sci:enabledscript>
										<sci:legalval selected="true">Boolean</sci:legalval>
										<sci:legalval selected="true">Integer</sci:legalval>
										<sci:legalval selected="true">Double</sci:legalval>
										<sci:legalval selected="true">String</sci:legalval>
										<sci:legalval selected="true">DateTime</sci:legalval>
									</sci:arg>
									<sci:arg name="Boolean Missing Values" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Replace missing values in Boolean columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Boolean&apos;);</sci:enabledscript>
										<sci:value>False</sci:value>
									</sci:arg>
									<sci:arg name="Integer Missing Values" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Replace missing values in Integer columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Integer&apos;);</sci:enabledscript>
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="Double Missing Values" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Replace missing values in Double columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Double&apos;);</sci:enabledscript>
										<sci:value>0.0</sci:value>
									</sci:arg>
									<sci:arg name="String Missing Values" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Replace missing values in String columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;String&apos;);</sci:enabledscript>
									</sci:arg>
									<sci:arg name="DateTime Missing Values" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Replace missing values in DateTime columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;DateTime&apos;);</sci:enabledscript>
										<sci:value>1/1/1970</sci:value>
									</sci:arg>
									<sci:arg name="Property Type Coercion Options" type="GroupType" required="false" visibility="visible" multi="true" legalvalsenforced="false">
										<sci:help>You can force a particular property to a specific type. 

If you do this, and any of the values on a data record (other than missing values) fails to coerce, then the data is considered unclean. 
</sci:help>
										<sci:member>Property 1</sci:member>
										<sci:member>Property 2</sci:member>
										<sci:member>Property 3</sci:member>
										<sci:member>Property 4</sci:member>
										<sci:member>Property 5</sci:member>
										<sci:member>Property 6</sci:member>
									</sci:arg>
									<sci:arg name="Property 1" type="PropertyNameType" required="false" visibility="visible" multi="false" expanded="true">
										<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
										<sci:member>Property 1 Coerce to Type</sci:member>
									</sci:arg>
									<sci:arg name="Property 1 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
										<sci:legalval>Boolean</sci:legalval>
										<sci:legalval>Integer</sci:legalval>
										<sci:legalval selected="true">Double</sci:legalval>
										<sci:legalval>String</sci:legalval>
										<sci:legalval>DateTime</sci:legalval>
									</sci:arg>
									<sci:arg name="Property 2" type="PropertyNameType" required="false" visibility="visible" multi="false">
										<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
										<sci:member>Property 2 Coerce to Type</sci:member>
									</sci:arg>
									<sci:arg name="Property 2 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
										<sci:legalval>Boolean</sci:legalval>
										<sci:legalval>Integer</sci:legalval>
										<sci:legalval selected="true">Double</sci:legalval>
										<sci:legalval>String</sci:legalval>
										<sci:legalval>DateTime</sci:legalval>
									</sci:arg>
									<sci:arg name="Property 3" type="PropertyNameType" required="false" visibility="visible" multi="false">
										<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
										<sci:member>Property 3 Coerce to Type</sci:member>
									</sci:arg>
									<sci:arg name="Property 3 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
										<sci:legalval>Boolean</sci:legalval>
										<sci:legalval>Integer</sci:legalval>
										<sci:legalval selected="true">Double</sci:legalval>
										<sci:legalval>String</sci:legalval>
										<sci:legalval>DateTime</sci:legalval>
									</sci:arg>
									<sci:arg name="Property 4" type="PropertyNameType" required="false" visibility="visible" multi="false">
										<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
										<sci:member>Property 4 Coerce to Type</sci:member>
									</sci:arg>
									<sci:arg name="Property 4 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
										<sci:legalval>Boolean</sci:legalval>
										<sci:legalval>Integer</sci:legalval>
										<sci:legalval selected="true">Double</sci:legalval>
										<sci:legalval>String</sci:legalval>
										<sci:legalval>DateTime</sci:legalval>
									</sci:arg>
									<sci:arg name="Property 5" type="PropertyNameType" required="false" visibility="visible" multi="false">
										<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
										<sci:member>Property 5 Coerce to Type</sci:member>
									</sci:arg>
									<sci:arg name="Property 5 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
										<sci:legalval>Boolean</sci:legalval>
										<sci:legalval>Integer</sci:legalval>
										<sci:legalval selected="true">Double</sci:legalval>
										<sci:legalval>String</sci:legalval>
										<sci:legalval>DateTime</sci:legalval>
									</sci:arg>
									<sci:arg name="Property 6" type="PropertyNameType" required="false" visibility="visible" multi="false">
										<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
										<sci:member>Property 6 Coerce to Type</sci:member>
									</sci:arg>
									<sci:arg name="Property 6 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
										<sci:legalval>Boolean</sci:legalval>
										<sci:legalval>Integer</sci:legalval>
										<sci:legalval selected="true">Double</sci:legalval>
										<sci:legalval>String</sci:legalval>
										<sci:legalval>DateTime</sci:legalval>
									</sci:arg>
									<sci:arg name="Array Value Options" type="GroupType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
										<sci:help>Options to handle array data</sci:help>
										<sci:member>Array Values Are</sci:member>
									</sci:arg>
									<sci:arg name="Array Values Are" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Whether array values are OK, are unclean, or should be replaced by a single value, the first value in the array.</sci:help>
										<sci:legalval>OK</sci:legalval>
										<sci:legalval selected="true">Unclean</sci:legalval>
										<sci:legalval>Replaced by First Value</sci:legalval>
									</sci:arg>
									<sci:arg name="Ignore Properties" type="PropertyNameType" required="false" visibility="visible" multi="true" uimpl="false">
										<sci:help>A list of properties to ignore, if any. They will be passed through untouched, and never considered unclean.</sci:help>
										<sci:value>accession</sci:value>
										<sci:value>compound_chembl_id</sci:value>
										<sci:value>target_chembl_id</sci:value>
										<sci:value>canonical_smiles</sci:value>
										<sci:value>pref_name</sci:value>
										<sci:value>idnumber</sci:value>
										<sci:value>name</sci:value>
										<sci:value>pchembl_value</sci:value>
									</sci:arg>
									<sci:arg name="Error Property Name" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>The name of the property to put error messages into. If left blank, do not add an error property.</sci:help>
										<sci:value>ErrorText</sci:value>
									</sci:arg>
									<sci:arg name="CacheSizeInflationFactor" type="LongType" required="false" visibility="hidden" multi="false" uimpl="true">
										<sci:help>When you run using a limited cache size, normally only that many records may be output.
This parameter allows you to increase that size by a multiplicative factor. </sci:help>
										<sci:value>2</sci:value>
									</sci:arg>
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="Implementation Of" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:legalval>Normalize Property Types</sci:legalval>
										<sci:legalval selected="true">Clean Data</sci:legalval>
										<sci:legalval>Set Property Type</sci:legalval>
									</sci:arg>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/generic</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Thu Sep 14 07:50:41 2017</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>Clean Data</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>COMPONENTNODE</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{6E28C170-2FEC-4A3C-90A6-2DCEAA330E9E}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>90 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Ensure your data is clean; that is, has no missing values, is coerced to the desired type, and is not an array value.</sci:value>
										<sci:value>&lt;p&gt;&lt;i&gt;Cleaning&lt;/i&gt; data is the act of finding, for each property, that it has no missing values, is coerced to the desired type, and is not an array value. The type is inferred: for example, a property may contains strings, with values &quot;0&quot; and &quot;1&quot;. This will be cleaned into Boolean values.&lt;/p&gt;

The problems that cleaning addresses are:
&lt;ol&gt;
&lt;li&gt;The same property name may have different value types on different data records&lt;/li&gt;
&lt;li&gt;The property might be of types that are coercible to some simpler base type (e.g., numbers might be stored as strings, when they could be better represented as integers)&lt;/li&gt;
&lt;li&gt;The property might be missing from some data records&lt;/li&gt;
&lt;li&gt;The property might appear multiple times on a given data record (arrays)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The normalized type is the simplest type possible, ordered from: Null, Boolean, Integer, Double, String, DateTime.&lt;/p&gt;
</sci:value>
										<sci:value>Generic</sci:value>
										<sci:value/>
										<sci:value>Generic</sci:value>
										<sci:value>The Normalized data records, or the summary for each property.</sci:value>
										<sci:value>Generic</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Data Access and Manipulation\Data Manipulators\Clean Data</sci:value>
									</sci:arg>
								</sci:component>
								<sci:proplist>
									<sci:propval name="RegistrationVersion">18.1.0.1590</sci:propval>
								</sci:proplist>
							</sci:data>
							<sci:data object="SciTegic.TransformMolecule.1">
								<sci:component name="Deprotonate Bases" version="2">
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval>ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>Custom Error Message</sci:help>
									</sci:arg>
									<sci:arg name="Action" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:help>This parameter lists a set of options for the type of standardization that
you may perform.  The default is to standardize the charging and stereochemistry
of the molecule.  If multiple actions are selected, they are performed in 
the order given.</sci:help>
										<sci:legalval>ProtonateAcids</sci:legalval>
										<sci:legalval>DeprotonateAcids</sci:legalval>
										<sci:legalval>ProtonateBases</sci:legalval>
										<sci:legalval selected="true">DeprotonateBases</sci:legalval>
									</sci:arg>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/chemistryadv</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Tue Oct 31 12:23:58 2006</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>Deprotonate Bases</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>COMPONENTNODE</sci:value>
									</sci:arg>
									<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The component this component is based upon.</sci:help>
										<sci:value>Standardize Charges</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{805BEA88-0DDF-4bed-918D-8B1FC7A8512A}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>378 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Removes Hydrogen atoms from basic functional groups in the molecule, adjusting the charges accordingly
</sci:value>
										<sci:value>&lt;p&gt;Basic functional groups are defined as Nitrogen atoms with a positive formal charge and one or more attached Hydrogen atoms.  If the Nitrogen atom has implicit Hydrogen atoms, the number of implicit Hydrogen atoms is reduced by one.  If the Nitrogen atom has only explicit Hydrogen atoms, then one of the explicit Hydrogen atoms is removed.  The charge on the Nitrogen atom is set to zero.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The analogous component for acids is &lt;a href=&quot;javascript:DoLink(&apos;{AD51FE16-75A9-46a4-BADC-8E86800227AC}&apos;)&quot;&gt;Protonate Acids&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For handling both acids and bases at given levels of pH, use &lt;a href=&quot;javascript:DoLink(&apos;{72D1AEC5-EE9E-4a39-A3D6-63637069BF6E}&apos;)&quot;&gt;Ionize Molecule at pH&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</sci:value>
										<sci:value>Molecule</sci:value>
										<sci:value/>
										<sci:value>Molecule</sci:value>
										<sci:value/>
										<sci:value>None</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>1</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Chemistry\Data Access and Manipulation\Manipulators\Deprotonate Bases</sci:value>
									</sci:arg>
								</sci:component>
								<sci:proplist>
									<sci:propval name="RegistrationVersion">6.0.1.7</sci:propval>
								</sci:proplist>
							</sci:data>
							<sci:data object="SciTegic.TransformMolecule.1">
								<sci:component name="Protonate Acids" version="2">
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval>ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>Custom Error Message</sci:help>
									</sci:arg>
									<sci:arg name="Action" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:help>This parameter lists a set of options for the type of standardization that
you may perform.  The default is to standardize the charging and stereochemistry
of the molecule.  If multiple actions are selected, they are performed in 
the order given.</sci:help>
										<sci:legalval selected="true">ProtonateAcids</sci:legalval>
										<sci:legalval>DeprotonateAcids</sci:legalval>
										<sci:legalval>ProtonateBases</sci:legalval>
										<sci:legalval>DeprotonateBases</sci:legalval>
									</sci:arg>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/chemistryadv</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Fri Sep 22 14:18:00 2006</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>Protonate Acids</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>COMPONENTNODE</sci:value>
									</sci:arg>
									<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The component this component is based upon.</sci:help>
										<sci:value>Standardize Charges</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{AD51FE16-75A9-46a4-BADC-8E86800227AC}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>666 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Adds Hydrogen atoms to acid functional groups in the molecule, adjusting the charges accordingly

</sci:value>
										<sci:value>&lt;p&gt;Acid functional groups are defined as Oxygen, Sulfur, Nitrogen, or Carbon atoms with a negative formal charge, not attached to any charged atom. An implicit Hydrogen atom is added to the Oxygen or Sulfur atom and the charge is set to zero.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The analogous component for bases is &lt;a href=&quot;javascript:DoLink(&apos;{805BEA88-0DDF-4bed-918D-8B1FC7A8512A}&apos;)&quot;&gt;Deprotonate Bases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For handling both acids and bases at given levels of pH, use &lt;a href=&quot;javascript:DoLink(&apos;{72D1AEC5-EE9E-4a39-A3D6-63637069BF6E}&apos;)&quot;&gt;Ionize Molecule at pH&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</sci:value>
										<sci:value>Molecule</sci:value>
										<sci:value/>
										<sci:value>Molecule</sci:value>
										<sci:value/>
										<sci:value>None</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>2</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Chemistry\Data Access and Manipulation\Manipulators\Protonate Acids</sci:value>
									</sci:arg>
								</sci:component>
								<sci:proplist>
									<sci:propval name="RegistrationVersion">6.0.1.0</sci:propval>
								</sci:proplist>
							</sci:data>
							<sci:data object="SciTegic.TransformMolecule.1">
								<sci:component name="Standardize Molecule" version="2">
									<sci:arg name="Action" type="StringType" required="true" visibility="visible" multi="true" expanded="true">
										<sci:help>Options for the type of standardization you can perform. The default is to standardize the charging and stereochemistry of the molecule. If multiple actions are selected, they are performed in the given order.

Available actions:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;StandardizeStereo: &lt;/b&gt; 
Atoms that are perceived as true stereo atoms but which have no stereochemical 
markings (UnknownAtomStereo, EvenAtomStereo, or OddAtomStereo) are set to UnknownAtomStereo. 
Atoms that have stereochemical markings but which are not true stereoatoms are 
set to NoAtomStereo. 2D or 3D coordinates are not used in this process. &lt;br /&gt;
Similarly, bonds that are perceived as true stereo double bonds, but which have 
no stereochemical markings (UnknownBondStereo, CisBondStereo, or TransBondStereo) 
are set to UnknownBondStereo. Bonds that have stereochemical markings but which 
are not true stereo bonds are set to NoBondStereo. Again, 2D or 3D coordinates 
are not used in this process.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;StandardizeCharges:&lt;/b&gt; 
Sets standard formal charges for common functional groups: Quaternary Nitrogen: 
+1 &lt;br /&gt;
Nitro groups: N+(=O)O- &lt;br&gt;
Diazonium N: +1 &lt;br&gt;
Oxygen with three attachments: +1 &lt;br&gt;
X=O-C Oxygen: +1 &lt;br&gt;
Sulfur with three attachments: +1 &lt;br&gt;
S=O-C Sulfur: +1 &lt;br&gt;
F, Cl, Br, I with no attachments: -1 &lt;br&gt;
Note that halogen acids with explicit hydrogens (H-X) are not modified. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;StandardizePiSystems:&lt;/b&gt; 
Checks pi systems to convert them to a kekulized representation with single/double bonds and a net radical or charge (depending on the charge of the connected atom). &lt;/li&gt;
&lt;li&gt;&lt;b&gt;CenterMolecule:&lt;/b&gt; 
Translates the molecule to the center of geometry. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;RemoveSingleAtomFragments:&lt;/b&gt; 
Removes all unattached atoms from the molecule. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;KeepSmallestFragment:&lt;/b&gt; 
Keeps only the fragment with fewer atoms in the case of multifragment molecules. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;KeepLargestFragment:&lt;/b&gt; 
Keeps only the fragment with the most atoms in the case of multifragment molecules. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;RemoveLargestFragment:&lt;/b&gt; 
Removes the fragment with the most atoms in the case of multifragment molecules. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;MakeNon[H]Atoms[C]Atoms:&lt;/b&gt; 
Converts all the atoms in the molecule to Carbon. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;MakeNon[C,H]Atoms[Q]Atoms: &lt;/b&gt; 
Converts all non-carbon, non-hydrogen atoms in the molecule to the Q query atom type. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;MakeNon[H]Atoms[A]Atoms: &lt;/b&gt; 
Converts all non-hydrogen atoms in the molecule to the A query atom type. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;MakeAllBondsSingle: &lt;/b&gt; 
Converts all the bonds in the molecule to Single bonds. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearCoordinates:&lt;/b&gt; 
Sets all x, y, z coordinates to zero. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;FixCoordinateDimension:&lt;/b&gt; 
Checks the x, y, z atomic coordinates and sets the dimension for the molecule accordingly:
&lt;ul&gt;
&lt;li&gt;3 if non-zero values are found for x or y, and for z.&lt;/li&gt;
&lt;li&gt;2 if non-zero values are found for x or y, but not for z.&lt;/li&gt;
&lt;li&gt;0 if all x, y, z coordinates are zero.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;StraightenTripleBonds:&lt;/b&gt;
Looks for triple bonds with non-linear geometry and makes them linear. In some cases this action could cause atoms to overlap each other. This can be checked with the &lt;a href=&quot;javascript:DoLink(&apos;{0CFFF911-BF35-4A1B-8B2C-B9A586BD39F3}&apos;)&quot;&gt;Bump Check Filter&lt;/a&gt; and the bumps resolved using the &apos;Resolve Bumps Only&apos; option in &lt;a href=&quot;javascript:DoLink(&apos;{9164525E-5964-47A2-82D9-B8155B215724}&apos;)&quot;&gt;2D Coords&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;StraightenAllenes:&lt;/b&gt;
Looks for allene structures with non-linear geometry and makes them linear. In some cases this action could cause atoms to overlap each other. This can be checked with the &lt;a href=&quot;javascript:DoLink(&apos;{0CFFF911-BF35-4A1B-8B2C-B9A586BD39F3}&apos;)&quot;&gt;Bump Check Filter&lt;/a&gt; and the bumps resolved using the &apos;Resolve Bumps Only&apos; option in &lt;a href=&quot;javascript:DoLink(&apos;{9164525E-5964-47A2-82D9-B8155B215724}&apos;)&quot;&gt;2D Coords&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearMolecule:&lt;/b&gt; 
Deletes all atoms and bonds in the molecule, keeping the molecule object in the data record. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;RemoveMolecule:&lt;/b&gt; 
Deletes the molecule object from the data record. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;Convert to Absolute Stereo:&lt;/b&gt; 
Assign all stereo atoms present in the molecule to the absolute configuration represented in the molecule. This is equivalent to setting the molecule Chiral flag to 1. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;Convert to AND Enantiomer:&lt;/b&gt; 
Assign all stereo atoms present in the molecule to the same AND stereo group, representing a racemic mixture. This is equivalent to setting the molecule Chiral flag to 0.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Convert to OR Enantiomer:&lt;/b&gt; 
Assign all stereo atoms present in the molecule to the same OR stereo group. V3000 MOL format is required to represent this stereo configuration.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearStereo: &lt;/b&gt; 
Sets all atoms and bonds to NoStereo. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearEnhancedStereo: &lt;/b&gt; 
Clears all relative atom stereo groups (enhanced stereo) from the molecule.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearUnknownStereo:&lt;/b&gt; 
Sets all atoms and bonds that are marked UnknownStereo to NoStereo. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearUnknownAtomStereo:&lt;/b&gt; 
Sets all atoms that are marked UnknownStereo to NoStereo. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearUnknownCisTransBondStereo:&lt;/b&gt; 
Sets all bonds that are marked UnknownStereo to NoStereo. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearUnknownCisTransBondStereoInSmallRings:&lt;/b&gt; 
Sets all bonds in small rings that are marked UnknownStereo to NoStereo. This flag is useful because the SMILES writer suppresses Cis/Trans markings for bonds in small rings.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearCisTransBondStereo:&lt;/b&gt; 
Sets all bonds that are marked CisStereo or TransStereo to UnknownStereo. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearCharges: &lt;/b&gt; 
Sets all formal charges to zero. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;SetStereoFromCoordinates: &lt;/b&gt; 
This option uses the 2D coordinates and up/down bond markings, or the 
3D coordinates, to assign the stereochemistry of the atoms or bonds. Typically, 
this is done by the readers or the molecules from text components. Occasionally, 
components may create molecules that need to have their stereo reperceived. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;RepositionStereoBonds: &lt;/b&gt; 
This option repositions the stereo bond markings, trying to find the best bond to mark as a wedge bond for each stereo atom. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;RepositionAxialStereoBonds: &lt;/b&gt; 
This option repositions the stereo bond markings on axial stereo centers (allenes and atropisomers).  This is more expensive than the tetrahedral reposition action as it requires perceiving rings and aromaticity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;FixDirectionOfWedgeBonds: &lt;/b&gt; 
This option checks the wedge bonds in the molecule to make sure that the wedge is drawn with the stereo atom at the narrow end of the wedge. Any wedge bond for which there is a stereo atom at the wide end and no stereo atom at the narrow end is reversed to point in the other direction. A separate option, &lt;i&gt;Invert Wedge Bond When Changing Direction&lt;/i&gt;, controls whether or not to invert the bond stereo (up or down) when changing the direction of the wedge bond. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;StandardStereoToEnhancedStereo:&lt;/b&gt;  Converts structures which contain only standard chiral-flag on or chiral-flag off into structures that contain enhanced stereo groups.  If the structure has the chiral flag on, then all stereo centers will be added to a single ABS group.  If the structure has the chiral flag off, then all stereocenters  will be added to a single AND group.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearPiBonds: &lt;/b&gt; 
Deletes the pi bonds.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearQueryInfo: &lt;/b&gt; 
Deletes all query information from atoms and bonds. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearHighlightColors:&lt;/b&gt; 
Clears any highlight colors from atoms and bonds. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearAtomLabels:&lt;/b&gt; 
Clears any labels assigned to the atoms. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearBondLabels:&lt;/b&gt; 
Clears any labels assigned to the bonds. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;NeutralizeBondedZwitterions:&lt;/b&gt; 
Converts directly bonded zwitterions (positively charged atom bonded to negatively charged atom, A+B-) to the neutral representation (A=B)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearUnusualValence:&lt;/b&gt; 
Clears any atom valence query features and resets all implicit hydrogen counts to their standard values.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearIsotopes:&lt;/b&gt; 
Clears any isotope information from the atoms in the molecule, setting all to the most common isotopes.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearDativeBonds:&lt;/b&gt; 
Clears explicit dative bonds (as found in V3000 mol files).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearHydrogenBonds:&lt;/b&gt; 
Clears explicit hydrogen bonds (as found in V3000 mol files).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;LocalizeMarkushRAtomsOnRings:&lt;/b&gt; 
Takes molecules with delocalized R atoms (R atoms pointing to center of the ring) and replaces them with R atoms attached to all available positions in the ring.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To remove sgroups or invalidate their coordinates, use &lt;a href=&quot;javascript:DoLink(&apos;{C3FC63FA-492D-472C-8166-A1D73AE5B579}&apos;)&quot;&gt;Clear Sgroup Features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</sci:help>
										<sci:member>Invert Wedge Bond When Changing Direction</sci:member>
										<sci:member>Single Halogen Atoms</sci:member>
										<sci:member>Single Metal Atoms</sci:member>
										<sci:member>Normalize Metals in Group 1A</sci:member>
										<sci:member>Mark Unknown Stereo Centers</sci:member>
										<sci:member>Standardize Ionizable Groups</sci:member>
										<sci:member>Process Pseudo Stereo Atoms</sci:member>
										<sci:member>Preserve Stereo Marks On</sci:member>
										<sci:member>Remove Explicit Valences</sci:member>
										<sci:member>Acids</sci:member>
										<sci:legalval selected="true">StandardizeStereo</sci:legalval>
										<sci:legalval selected="true">StandardizeCharges</sci:legalval>
										<sci:legalval>StandardizePiSystems</sci:legalval>
										<sci:legalval>CenterMolecule</sci:legalval>
										<sci:legalval>RemoveSingleAtomFragments</sci:legalval>
										<sci:legalval>KeepSmallestFragment</sci:legalval>
										<sci:legalval>KeepLargestFragment</sci:legalval>
										<sci:legalval>RemoveLargestFragment</sci:legalval>
										<sci:legalval>MakeNon[H]Atoms[C]Atoms</sci:legalval>
										<sci:legalval>MakeNon[H]Atoms[A]Atoms</sci:legalval>
										<sci:legalval>MakeNon[C,H]Atoms[Q]Atoms</sci:legalval>
										<sci:legalval>MakeAllBondsSingle</sci:legalval>
										<sci:legalval>ClearCoordinates</sci:legalval>
										<sci:legalval>FixCoordinateDimension</sci:legalval>
										<sci:legalval>StraightenTripleBonds</sci:legalval>
										<sci:legalval>StraightenAllenes</sci:legalval>
										<sci:legalval>ClearMolecule</sci:legalval>
										<sci:legalval>RemoveMolecule</sci:legalval>
										<sci:legalval>Convert to Absolute Stereo</sci:legalval>
										<sci:legalval>Convert to AND Enantiomer</sci:legalval>
										<sci:legalval>Convert to OR Enantiomer</sci:legalval>
										<sci:legalval>ClearStereo</sci:legalval>
										<sci:legalval>ClearEnhancedStereo</sci:legalval>
										<sci:legalval>ClearUnknownStereo</sci:legalval>
										<sci:legalval>ClearUnknownAtomStereo</sci:legalval>
										<sci:legalval>ClearUnknownCisTransBondStereo</sci:legalval>
										<sci:legalval>ClearUnknownCisTransBondStereoInSmallRings</sci:legalval>
										<sci:legalval>ClearCisTransBondStereo</sci:legalval>
										<sci:legalval>SetStereoFromCoordinates</sci:legalval>
										<sci:legalval>RepositionStereoBonds</sci:legalval>
										<sci:legalval>RepositionAxialStereoBonds</sci:legalval>
										<sci:legalval>FixDirectionOfWedgeBonds</sci:legalval>
										<sci:legalval>StandardStereoToEnhancedStereo</sci:legalval>
										<sci:legalval>ClearCharges</sci:legalval>
										<sci:legalval>ClearPiBonds</sci:legalval>
										<sci:legalval>ClearHighlightColors</sci:legalval>
										<sci:legalval>ClearQueryInfo</sci:legalval>
										<sci:legalval>ClearAtomLabels</sci:legalval>
										<sci:legalval>ClearBondLabels</sci:legalval>
										<sci:legalval>NeutralizeBondedZwitterions</sci:legalval>
										<sci:legalval>ClearUnusualValence</sci:legalval>
										<sci:legalval>ClearIsotopes</sci:legalval>
										<sci:legalval>ClearDativeBonds</sci:legalval>
										<sci:legalval>ClearHydrogenBonds</sci:legalval>
										<sci:legalval>LocalizeMarkushRAtomsOnRings</sci:legalval>
									</sci:arg>
									<sci:arg name="Acids" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>Specify whether to charge, uncharge or keep the current charge for single-bonded Oxygen atoms in carboxylic, sulfuric and phosphoric acid groups.
&lt;br&gt;
This option is enabled only when &quot;StandardizeCharges&quot; is selected in the &lt;i&gt;Action&lt;/i&gt; parameter.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;StandardizeCharges&apos;)</sci:enabledscript>
										<sci:legalval>Charge</sci:legalval>
										<sci:legalval>Uncharge</sci:legalval>
										<sci:legalval selected="true">Keep Current Charge</sci:legalval>
									</sci:arg>
									<sci:arg name="Single Halogen Atoms" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Specify whether to charge, uncharge or keep the current charge for  any unconnected halogen atom found in the molecule.
&lt;br&gt;
This option is enabled only when &quot;StandardizeCharges&quot; is selected in the &lt;i&gt;Action&lt;/i&gt; parameter.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;StandardizeCharges&apos;)</sci:enabledscript>
										<sci:legalval>Charge</sci:legalval>
										<sci:legalval>Uncharge</sci:legalval>
										<sci:legalval selected="true">Keep Current Charge</sci:legalval>
									</sci:arg>
									<sci:arg name="Single Metal Atoms" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Specify whether to charge, uncharge or keep the current charge for  any unconnected metal atom found in the molecule.
&lt;br&gt;
This option is enabled only when &quot;StandardizeCharges&quot; is selected in the &lt;i&gt;Action&lt;/i&gt; parameter.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;StandardizeCharges&apos;)</sci:enabledscript>
										<sci:legalval>Charge</sci:legalval>
										<sci:legalval>Uncharge</sci:legalval>
										<sci:legalval selected="true">Keep Current Charge</sci:legalval>
									</sci:arg>
									<sci:arg name="Normalize Metals in Group 1A" type="BoolType" required="false" visibility="visible" multi="false">
										<sci:help>When set to True, a covalent bond is defined between positively charged ions in Group 1A (Li+, Na+, K+, Rb+, Cs+) and corresponding counter ions (C-, N-, Si-, P-). Also, covalent bonds between neutral Group 1A elements and neutral halogens or Oxygen are converted into ionic species, breaking the bond and charging the previously attached atoms to create (Li+, Na+, K+, Rb+, Cs+) and (X-, O-).

</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;StandardizeCharges&apos;)</sci:enabledscript>
										<sci:legalval>True</sci:legalval>
										<sci:legalval selected="true">False</sci:legalval>
									</sci:arg>
									<sci:arg name="Mark Unknown Stereo Centers" type="BoolType" required="false" visibility="visible" multi="false">
										<sci:help>When standardizing stereo, look for true stereo centers missing stereo marks (wedge bonds) and mark them as Unknown Stereo atoms, with their corresponding &apos;wiggly&apos; bonds.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;StandardizeStereo&apos;)</sci:enabledscript>
										<sci:legalval selected="true">True</sci:legalval>
										<sci:legalval>False</sci:legalval>
									</sci:arg>
									<sci:arg name="Process Pseudo Stereo Atoms" type="BoolType" required="false" visibility="visible" multi="false">
										<sci:help>Whether or not to include pseudo stereo atoms not marked with up or down bond wedges (unknown pseudo stereo) when doing &quot;StandardizeStereo&quot; or &quot;SetStereoFromCoordinates&quot;. </sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;SetStereoFromCoordinates&apos;) or
contains(parameter(&apos;Action&apos;), &apos;StandardizeStereo&apos;)</sci:enabledscript>
										<sci:legalval selected="true">True</sci:legalval>
										<sci:legalval>False</sci:legalval>
									</sci:arg>
									<sci:arg name="Preserve Stereo Marks On" type="StringType" required="false" visibility="visible" multi="true">
										<sci:help>Allow wedge bonds on certain atoms with perceived SP2 hybridization:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Allenes&lt;/b&gt;: Carbon atoms at the end of allene groups.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Restricted Biphenyls&lt;/b&gt;:Atoms at the ortho positions of geometrically restricted biphenyl or biaryl rings.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Conjugated SP2 Nitrogens&lt;/b&gt;:Nitrogen atoms with three single bonds which are perceived to be SP2 because of conjugation with neighboring groups.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Uncharged Tetrahedral Nitrogens&lt;/b&gt;: Normally Pipeline Pilot only recognizes Nitrogen as a tetrahedral stereocenter when it has a positive charge and four heavy attachments. Selecting this parameter will bypass this restriction and mark other Nitrogen stereocenters (such as Nitrogen atoms with three single bonds) as bad only if they fail the check of ambiguous wedge-bond geometry.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;StandardizeStereo&apos;)</sci:enabledscript>
										<sci:legalval selected="true">Allenes</sci:legalval>
										<sci:legalval selected="true">Restricted Biphenyls</sci:legalval>
										<sci:legalval>Conjugated SP2 Nitrogens</sci:legalval>
										<sci:legalval>Uncharged Tetrahedral Nitrogens</sci:legalval>
									</sci:arg>
									<sci:arg name="Invert Wedge Bond When Changing Direction" type="BoolType" required="false" visibility="visible" multi="false">
										<sci:help>This parameter controls whether or not to invert the bond stereo (up or down) when changing the direction of the wedge bond by selecting &quot;FixDirectionOfWedgeBonds&quot; in the &lt;i&gt;Action&lt;/i&gt; parameter.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;FixDirectionOfWedgeBonds&apos;)</sci:enabledscript>
										<sci:legalval selected="true">True</sci:legalval>
										<sci:legalval>False</sci:legalval>
									</sci:arg>
									<sci:arg name="Remove Explicit Valences" type="BoolType" required="false" visibility="visible" multi="false">
										<sci:help>Remove explicit valence values from atoms when clearing query infomation</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;ClearQueryInfo&apos;)</sci:enabledscript>
										<sci:legalval selected="true">True</sci:legalval>
										<sci:legalval>False</sci:legalval>
									</sci:arg>
									<sci:arg name="Track Actions Taken" type="BoolType" required="false" visibility="visible" multi="false">
										<sci:help>When enabled, this will keep track of which actions resulted in changes to the input molecule.  Actions that result in changes will be listed in a property called &lt;b&gt;Standardize_Actions_Taken&lt;/b&gt;.</sci:help>
										<sci:legalval>True</sci:legalval>
										<sci:legalval selected="true">False</sci:legalval>
									</sci:arg>
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval>ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="Standardize Ionizable Groups" type="BoolType" required="false" visibility="nevershow" multi="false">
										<sci:help>Transform ionizable groups such as sulphates, phosphates and guanidiniums to a standard form.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;StandardizeCharges&apos;)</sci:enabledscript>
										<sci:legalval>True</sci:legalval>
										<sci:legalval selected="true">False</sci:legalval>
									</sci:arg>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/chemistry</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Tue Jan 24 15:34:13 2017</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>Standardize Molecule</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>COMPONENTNODE</sci:value>
									</sci:arg>
									<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The component this component is based upon.</sci:help>
										<sci:value>Standardize Charges</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{EFEA1A46-A6DB-4DB9-A5A9-C7F3D2ADFDE2}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>954 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Applies selected predefined actions to input molecules such as standardizing charges or stereo, or the clearing of various attributes</sci:value>
										<sci:value>&lt;p&gt;One or more actions can be applied to each molecule to standardize the way molecules are presented to downstream components. See help text on &lt;i&gt;Action&lt;/i&gt; for a list and short description of all the available standardization actions.
&lt;p&gt;
Standardization is important when comparing molecular libraries from different sources. If different rules were used for structural representation when creating these libraries, a straight comparison would yield incorrect results. The options below allow you to apply a consistent set of rules to structures before comparing them.
&lt;p&gt;
</sci:value>
										<sci:value>Molecule</sci:value>
										<sci:value/>
										<sci:value>Molecule</sci:value>
										<sci:value>Transformed molecules </sci:value>
										<sci:value>None</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The server version when this component was registered</sci:help>
										<sci:value>18.1.0.1362</sci:value>
									</sci:arg>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>3</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Chemistry\Data Access and Manipulation\Manipulators\Standardize Molecule</sci:value>
									</sci:arg>
								</sci:component>
							</sci:data>
							<sci:data object="SciTegic.StripSalts.1">
								<sci:component name="Strip Salts" version="2">
									<sci:arg name="Salt Files" type="GroupType" required="false" visibility="visible" multi="false" expanded="true">
										<sci:member>Scitegic Salts</sci:member>
										<sci:member>User Salts</sci:member>
									</sci:arg>
									<sci:arg name="Scitegic Salts" type="URLType" required="false" visibility="visible" multi="false">
										<sci:help>File that contains the default salt queries</sci:help>
										<sci:value>data\Salts\Scitegic\Salts.sd</sci:value>
									</sci:arg>
									<sci:arg name="User Salts" type="URLType" required="false" visibility="visible" multi="false">
										<sci:help>File containing user-defined salt queries</sci:help>
									</sci:arg>
									<sci:arg name="Output SMILES of Identified Salts" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>Whether or not to output the SMILES strings of the salts found in the molecule in the property &lt;b&gt;SaltSmiles&lt;/b&gt;</sci:help>
										<sci:legalval>True</sci:legalval>
										<sci:legalval selected="true">False</sci:legalval>
									</sci:arg>
									<sci:arg name="Match Salt Queries Exactly" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>Toggles whether to use stricter search options on the internal substructure mapper used to identify salt fragments from the input set of salt queries.

&lt;p&gt;&lt;br&gt;When not enabled, the default salt identification options are used (these are the search options used in older versions of the component):
&lt;ul&gt;
&lt;li&gt;NonChiral Queries Are Enantiomers&lt;/li&gt;
&lt;li&gt;Uncharged Atoms Can Map Charged Atoms&lt;/li&gt;
&lt;li&gt;Stereo Atoms Can Map Nonstereo Atoms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;When enabled, the following more strict options are used:
&lt;ul&gt;
&lt;li&gt;Chiral Queries Only Map Chiral Targets&lt;/li&gt;
&lt;li&gt;NonChiral Queries Are Enantiomers&lt;/li&gt;
&lt;li&gt;Interpret RAtoms Literally&lt;/li&gt;
&lt;li&gt;Interpret ZAtoms Literally&lt;/li&gt;
&lt;li&gt;Interpret StarAtoms Literally&lt;/li&gt;
&lt;li&gt;Check Bonds To RAtoms&lt;/li&gt;
&lt;li&gt;Match Cis Trans Double Bonds&lt;/li&gt;
&lt;li&gt;Marked Isotopes Only Map Marked Isotopes&lt;/li&gt;
&lt;li&gt;Unmarked Isotopes Only Map Unmarked Isotopes&lt;/li&gt;
&lt;/ul&gt;

</sci:help>
										<sci:legalval>True</sci:legalval>
										<sci:legalval selected="true">False</sci:legalval>
									</sci:arg>
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval>ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The component this component is based upon.</sci:help>
										<sci:value>Substructure Map</sci:value>
									</sci:arg>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/chemistry</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Tue Feb 22 10:45:16 2011</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>Strip Salts</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>COMPONENTNODE</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{1A8DDD51-D1AE-45d9-823B-80E81B7BCAA6}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>1242 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Finds and removes salt fragments from the incoming molecules</sci:value>
										<sci:value>&lt;p&gt;Salt fragments in the input molecules are identified using supplied salt queries and removed.  The default salt queries are specified by the &lt;i&gt;Scitegic Salts&lt;/i&gt; parameter and are contained in the file data/Salts/Scitegic/Salts.sd.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;User Salts&lt;/i&gt; allows users to add their own salt queries by specifying the file or files containing them. Queries can be defined in either mol format (.mol, .sd, .sdf extension) or SMARTS (.sma extension).&lt;/p&gt;
&lt;p&gt;
When salts are identified and removed, the property &lt;b&gt;RemovedSalts&lt;/b&gt; is defined for the molecule. This array property contains the names of the removed salts. If the same salt fragment was present &lt;i&gt;N&lt;/i&gt; times, its name appears &lt;i&gt;N&lt;/i&gt; times in the array. 
&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only molecules consisting of more than one fragment are considered for salt removal.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To remove salt fragments specifying the salt queries in the input stream instead of reading them from a file, use &lt;a href=&quot;javascript:DoLink(&apos;{D79E4721-C1EE-4c68-9492-7B5720E4652D}&apos;)&quot;&gt;Strip Salts from Tag&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To only identify (and not remove) salt fragments, use &lt;a href=&quot;javascript:DoLink(&apos;{65582FDD-27E4-442f-BED7-71A254321894}&apos;)&quot;&gt;Identify Salts&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
										<sci:value>Molecule</sci:value>
										<sci:value/>
										<sci:value>Molecule</sci:value>
										<sci:value>Molecules with salts removed</sci:value>
										<sci:value>None</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The server version when this component was registered</sci:help>
										<sci:value>8.4.5.17</sci:value>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>4</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Chemistry\Data Access and Manipulation\Manipulators\Salts\Strip Salts</sci:value>
									</sci:arg>
								</sci:component>
							</sci:data>
							<sci:data object="SciTegic.CalculateSmiles.1">
								<sci:component name="Canonical Smiles" version="2">
									<sci:arg name="Output" type="StringType" required="false" visibility="visible" multi="true">
										<sci:help>&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SMILES&lt;/b&gt; is a non-canonical representation for the molecule. (This is very fast to calculate compared to Canonical_SMILES.)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Canonical_SMILES&lt;/b&gt; is the representation that can be compared for identicality.&lt;/li&gt;
&lt;/ul&gt;

&lt;i&gt;Output&lt;/i&gt; properties can be calculated &quot;on demand&quot; by simply using their names within a PilotScript expression or as the parameter value to many parameters that require a property name.</sci:help>
										<sci:legalval type="StringType" selected="true">Canonical_Smiles</sci:legalval>
										<sci:legalval type="StringType">Smiles</sci:legalval>
									</sci:arg>
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval>ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/chemistry</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Fri Apr 08 13:57:30 2011</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>Canonical Smiles</sci:value>
									</sci:arg>
									<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The component this component is based upon.</sci:help>
										<sci:value>Canonical Smiles</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>CALCULATORNODE</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{0C60C40A-5189-42DA-A3C0-4EA44BC27D15}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>1530 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Calculates a SMILES or canonical SMILES representation of the input molecule</sci:value>
										<sci:value>&lt;p&gt;SMILES is a terse textual representation of molecular data.  Canonical SMILES is a form of SMILES that is independent of how the molecule is drawn and so can be used to compare whether two molecules are identical.&lt;/P&gt;

Either or both of the following two properties can be calculated:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SMILES&lt;/b&gt; is a non-canonical representation for the molecule. (This is very fast to calculate compared to Canonical_SMILES.)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Canonical_SMILES&lt;/b&gt; is the representation that can be compared for identicality.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;The canonicalization algorithm is SciTegic&apos;s; while it is derived from the published Daylight algorithm, however, lack of complete documentation of their procedure means that it will not necessarily give identical results. Compare two SMILES for identity only when having both canonicalized by the same method. &lt;/li&gt;
&lt;li&gt;Stereo markings are only added to the SMILES when stereo is explicitly set on a stereocenter.  This is often not the case for 3D molecules where the stereo is implied from the coordinates of the attached atoms and not from explicit stereo markings.  To add stereo markings from coordinates use the &lt;i&gt;SetStereoFromCoordinates&lt;/i&gt; action in the &lt;a href=&quot;javascript:DoLink(&apos;{EFEA1A46-A6DB-4DB9-A5A9-C7F3D2ADFDE2}&apos;)&quot;&gt;Standardize Molecule&lt;/a&gt; component.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;You can create a SMILES string as text under any property name using &lt;a href=&quot;javascript:DoLink(&apos;{0C60C40A-5189-42DA-A3C0-4EA44BFF7D15}&apos;)&quot;&gt;Molecule to SMILES&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can convert a SMILES string into a molecule using &lt;a href=&quot;javascript:DoLink(&apos;{AC8262DA-E648-4D24-9CD1-D731A8F53F9D}&apos;)&quot;&gt;Molecule from SMILES&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For an alternative way of generating a canonical string representation, see &lt;a href=&quot;javascript:DoLink(&apos;{EB62CC30-BC6A-4d5f-8618-3EB9AF611C69}&apos;)&quot;&gt;Molecule to InChI&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</sci:value>
										<sci:value>Molecule</sci:value>
										<sci:value/>
										<sci:value>Molecule</sci:value>
										<sci:value>Records augmented with a text property containing the canonical SMILES or SMILES</sci:value>
										<sci:value>None</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The server version when this component was registered</sci:help>
										<sci:value>8.4.5.28</sci:value>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>5</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Chemistry\Property Calculators\Structural\Canonical Smiles</sci:value>
									</sci:arg>
								</sci:component>
								<sci:proplist>
									<sci:propval name="Canonical_Smiles|Category">Molecular Formats</sci:propval>
									<sci:propval name="Smiles|Category">Molecular Formats</sci:propval>
								</sci:proplist>
							</sci:data>
							<sci:data object="SciTegic.PropertyFunctions.1">
								<sci:component name="Rename Properties" version="2">
									<sci:arg name="Original Property Names" type="PropertyNameType" required="true" visibility="visible" multi="true">
										<sci:help>An array of property names to rename. The new name will be the corresponding name in &lt;i&gt;New Property Names&lt;i&gt;.</sci:help>
										<sci:value>Canonical_Smiles</sci:value>
									</sci:arg>
									<sci:arg name="New Property Names" type="PropertyNameType" required="true" visibility="visible" multi="true">
										<sci:help>An array of the new property names. The original name will be the corresponding name in &lt;i&gt;Original Property Names&lt;i&gt;.</sci:help>
										<sci:value>canonical_smiles</sci:value>
									</sci:arg>
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval>ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>Custom Error Message</sci:help>
									</sci:arg>
									<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:help>the action to perform</sci:help>
										<sci:value>RenameProperties</sci:value>
									</sci:arg>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/generic</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Tue Feb 28 12:30:36 2017</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
										<sci:help>Automatically update the component display name when the &quot;Destination&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
										<sci:value>
#orig := Parameter(&apos;Original Property Names&apos;);
#new := Parameter(&apos;New Property Names&apos;);
if (numvalues(#orig) == 0 OR #orig[1] eq &quot;&quot; OR numvalues(#new) == 0 OR #new[1] eq &quot;&quot;) then
	&quot;&quot;;
else
  #display := &apos;Rename &apos; . #orig[1] . &apos; to &apos; . #new[1];
  if (numvalues(#orig) &gt; 1) then
    #display .= &apos;, ...&apos;;
  end if;
  #display;
end if;
</sci:value>
									</sci:arg>
									<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
										<sci:help>Protocol AutoLayout</sci:help>
										<sci:value>true</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>EXPRESSIONNODE</sci:value>
									</sci:arg>
									<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
										<sci:help>Component Revision</sci:help>
										<sci:value>100</sci:value>
									</sci:arg>
									<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The component this component is based upon.</sci:help>
										<sci:value>SubProtocol</sci:value>
									</sci:arg>
									<sci:arg name="ProtocolScale" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Protocol Scale</sci:help>
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>1818 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{04496ABE-C1D2-43D2-83D4-35AC9FC8D501}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Rename the specified properties</sci:value>
										<sci:value>&lt;p&gt;For each incoming data record, rename the properties found in the &lt;i&gt;Original Property Names&lt;/i&gt; list to the names provided in &lt;i&gt;New Property Names&lt;/i&gt;.

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To remove specified properties from each data record, use 
&lt;a href=&quot;javascript:DoLink(&apos;{C2ED35FF-5397-4877-AADB-10F1A15D60E2}&apos;)&quot;&gt;Remove Properties&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</sci:value>
										<sci:value>Generic</sci:value>
										<sci:value/>
										<sci:value>Generic</sci:value>
										<sci:value>With only the specified properties remaining</sci:value>
										<sci:value>None</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The server version when this component was registered</sci:help>
										<sci:value>18.1.0.1376</sci:value>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
										<sci:help>By Ref</sci:help>
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>Protocol Sticky Notes</sci:help>
									</sci:arg>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>6</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Data Access and Manipulation\Property Manipulators\Rename Properties</sci:value>
									</sci:arg>
								</sci:component>
							</sci:data>
							<sci:data object="SciTegic.PropertyFunctions.1">
								<sci:component name="Remove Properties" version="2">
									<sci:arg name="PropertyList" type="PropertyNameType" required="true" visibility="visible" multi="true">
										<sci:help>The names of properties to remove from each data record entering the component</sci:help>
										<sci:value>RemovedSalts</sci:value>
									</sci:arg>
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval>ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>Custom Error Message</sci:help>
									</sci:arg>
									<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:help>the action to perform</sci:help>
										<sci:value>Remove</sci:value>
									</sci:arg>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/generic</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Tue Sep 13 07:18:43 2016</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
										<sci:help>Automatically update the component display name when the &quot;PropertyList&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
										<sci:value>#propertyList := Parameter(&apos;PropertyList&apos;);
#displayName := &apos;&apos;;
for #i in 1 .. numvalues(#propertyList) loop
  #prop := trim(#propertyList[#i]);
  if (strlength(#prop) &gt; 0) then
    if (strlength(#displayName) &gt; 0) then
	  #displayName .= &apos;, &apos;;
	end if;
    #displayName .= #prop;
  end if;
end loop;
if(strlength(#displayName) &gt; 0) then		
	&apos;Remove &apos; . #displayName;
else
	&quot;&quot;;
end if;</sci:value>
									</sci:arg>
									<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
										<sci:help>Protocol AutoLayout</sci:help>
										<sci:value>true</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>EXPRESSIONNODE</sci:value>
									</sci:arg>
									<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
										<sci:help>Component Revision</sci:help>
										<sci:value>100</sci:value>
									</sci:arg>
									<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The component this component is based upon.</sci:help>
										<sci:value>SubProtocol</sci:value>
									</sci:arg>
									<sci:arg name="ProtocolScale" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Protocol Scale</sci:help>
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>2106 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{C2ED35FF-5397-4877-AADB-10F1A15D60E2}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Removes the specified properties</sci:value>
										<sci:value>For each data record that enters the component, the properties specified by &lt;i&gt;PropertyList&lt;/i&gt; are removed from the  record. 

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;To keep only a few properties from a long list, it may be more efficient to instead use &lt;a href=&quot;javascript:DoLink(&apos;{456195EF-9708-4367-B3DD-21EBF3796604}&apos;)&quot;&gt;Keep Properties&lt;/a&gt;.&lt;/p&gt;</sci:value>
										<sci:value>Generic</sci:value>
										<sci:value/>
										<sci:value>Generic</sci:value>
										<sci:value>Data records with the specified properties removed</sci:value>
										<sci:value>None</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The server version when this component was registered</sci:help>
										<sci:value>17.1.0.119</sci:value>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
										<sci:help>By Ref</sci:help>
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>Protocol Sticky Notes</sci:help>
									</sci:arg>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>7</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Data Access and Manipulation\Property Manipulators\Remove Properties</sci:value>
									</sci:arg>
								</sci:component>
							</sci:data>
							<sci:connectid from="0" to="1" type="true"/>
							<sci:connectid from="1" to="2" type="true"/>
							<sci:connectid from="2" to="3" type="true"/>
							<sci:connectid from="3" to="4" type="true"/>
							<sci:connectid from="4" to="5" type="true"/>
							<sci:connectid from="5" to="6" type="true"/>
							<sci:connectid from="6" to="7" type="true"/>
						</sci:protocol>
					</sci:data>
					<sci:connectid from="0" to="1" type="true"/>
					<sci:connectid from="1" to="2" type="true"/>
					<sci:connectid from="2" to="3" type="true"/>
					<sci:connectid from="3" to="4" type="true"/>
					<sci:connectid from="4" to="5" type="true"/>
					<sci:connectid from="5" to="6" type="true"/>
				</sci:protocol>
			</sci:data>
			<sci:data object="SciTegic.PropertyFunctions.1">
				<sci:component name="First Occurrence Filter" version="2">
					<sci:arg name="KeyProperty" type="PropertyNameType" required="true" visibility="visible" multi="true">
						<sci:help>Name of the property holding values to keep only one of.  If you give more than one key property, then all values must have occurred at the same time on some other record for it to be rejected.</sci:help>
						<sci:member>CaseSensitive</sci:member>
						<sci:value>canonical_smiles</sci:value>
					</sci:arg>
					<sci:arg name="CaseSensitive" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>Whether to perform the comparison as case-sensitive or case-insensitive 
strings</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Custom Error Message</sci:help>
					</sci:arg>
					<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:help>the action to perform</sci:help>
						<sci:value>FirstOccurrence</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Thu Jan 16 14:54:51 2003</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>First Occurrence
Filter</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Expression Filter</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>FILTERNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{D2EC3EBB-CD17-4093-93A9-D9FB603DE083}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>666 -470</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Passes data records for which the values of specified properties have not been seen on any previous record

</sci:value>
						<sci:value>&lt;p&gt;For each incoming data record, the value of the property specified by &lt;i&gt;KeyProperty&lt;/i&gt; is checked.  If the value has not been seen in earlier records, the record is sent out the Pass port.  Otherwise it is sent out the Fail port.&lt;/p&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To filter for data records with property values that occur once and only once in the input stream, use &lt;a href=&quot;javascript:DoLink(&apos;{2FD9ECF2-C47F-4A20-AC72-5F352E08FC98}&apos;)&quot;&gt;Unique Filter&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value>Data records with the first occurrence of a value of the given property.</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value>Data records with the second and subsequent occurrences of a value of the given property.</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>14</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Data Filters\First Occurrence Filter</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.Protocol.1">
				<sci:component name="6 only Molecular Fingerprints" version="2">
					<sci:arg name="RunToCompletion" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - For Each Data Record&quot;, the subprotocol is re-initialized and executed in its entirety for each individual data record it processes.
&lt;p&gt;
When set to &quot;True - For Each Category&quot;, the data records are divided into categories based on the value of the Categorize Using parameter and then the subprotocol is re-initialized and executed in its entirety for each category of data records. When used in conjunction with &lt;i&gt;Parallel Processing Options&lt;/i&gt;, each category of data records will be sent to the remote server as part of one single batch.</sci:help>
						<sci:member>RunToCompletion Categorize Using</sci:member>
						<sci:legalval selected="true">False</sci:legalval>
						<sci:legalval>True - For Each Data Record</sci:legalval>
						<sci:legalval>True - For Each Category</sci:legalval>
					</sci:arg>
					<sci:arg name="RunToCompletion Categorize Using" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Required when RunToCompletion is set to &lt;i&gt;True - For Each Category&lt;/i&gt;, this parameter specifies the property or properties used to define the categories.</sci:help>
						<sci:validscript>SetInvalidDetails(&apos;This parameter is required when RunToCompletion is set to True - For Each Category&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
						<sci:enabledscript>SetDisabledDetails(&apos;To Enable, Set RunToCompletion to True - For Each Category&apos;);
Parameter(&apos;RunToCompletion&apos;) eq &apos;True - For Each Category&apos;;</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>&lt;p&gt;
When set to True, this set of options allows the subprotocol to execute in parallel on one or more independent Pipeline Pilot servers, running locally or remotely.  Additional parameters control the number of data records to send in each process batch, the list of Pipeline Pilot servers to use, the number of protocol processes that can be executed on each server, and whether to preserve the order of the processed data records.
&lt;/p&gt;&lt;p&gt;
Use this option with care, since it will not increase throughput in all circumstances. Generally speaking, it yields improved performance when the parallelization benefits outweigh the data transfer overhead for the specified batch size.  As a rough guide, performance can be improved when each individual batch requires at least 10 seconds to execute, although this can be affected by the size of each data record.
&lt;/p&gt;&lt;p&gt;
When running the protocol with debugging, the subprotocol will provide debugging messages to detail each of the various steps of execution.  Also, components located within the parallel subprotocol will display their debugging messages as well.
&lt;/p&gt;&lt;p&gt;
For more information on the parallel subprotocol options, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_parallel_processing.htm&apos;)&quot;&gt;Parallel Processing Subprotocols&lt;/a&gt;.
&lt;/p&gt;
</sci:help>
						<sci:member>Parallel Processing Options Batch Size</sci:member>
						<sci:member>Parallel Processing Options Server</sci:member>
						<sci:member>Parallel Processing Options Preserve Order</sci:member>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Batch Size" type="LongType" required="true" visibility="visible" multi="false" uimpl="false">
						<sci:help>&lt;p&gt;The number of records to send to the remote server(s) for each subprotocol execution.  In general, performance is optimized when the amount of time required to process each batch is at least 10 seconds (note that this can vary depending on the characteristics of the remote server&apos;s hardware).  Use a batch size of -1 to pass all data in a single batch.&lt;/p&gt;
&lt;p&gt;When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - for each category&quot;, the batch sizes will be determined by the number of records in each individual category.  Therefore, the &lt;i&gt;Batch Size&lt;/i&gt; parameter is not applicable.</sci:help>
						<sci:enabledscript>#parallel := Parameter(&apos;Parallel Processing Options&apos;);
if (not #parallel) then
	SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
end if;
#parallel;</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server" type="StringType" required="false" visibility="visible" multi="true" expanded="true" legalvalsenforced="false" uimpl="false">
						<sci:help>&lt;p&gt;
A comma-separated list of Pipeline Pilot servers on which to execute the parallel subprotocol.  The server names should be in the same format as the Pipeline Pilot Client&apos;s change server dialog (that is, server-name:port-number).
&lt;/p&gt;&lt;p&gt;
Specifying &lt;b&gt;localhost&lt;/b&gt; as a server will cause the subprotocol to use its own Pipeline Pilot server.  This can be useful on multi-CPU/multi-core systems (where the subprotocol jobs are spawned on the same machine) and Pipeline Pilot Linux clusters (where &apos;localhost&apos; requests spawning the subprotocol jobs on the same cluster).
&lt;/p&gt;</sci:help>
						<sci:member>Parallel Processing Options Server Processes</sci:member>
						<sci:member>Parallel Processing Options Server Run On Grid</sci:member>
						<sci:validscript>SetInvalidDetails(&apos;This parameter is required.&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Processes" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>A comma-separated list of the maximum number of batches that can be simultaneously executed on each remote server.  The number of entries in this parameter must equal the number of servers. If &apos;*&apos; is specified as the number of processes, then that server will only launch as many batches as the administrator of the remote server has permitted.&lt;/br&gt;&lt;/br&gt;For non-Grid Engine job, the number of jobs will be limited to the value for the maximum number of simultaneous subprotocol jobs as defined in the Admin Console even if this value is higher than the value entered here or &apos;*&apos;.&lt;/br&gt;&lt;/br&gt;For Grid Engine jobs, the number of jobs will be limited to the value for the maximum number of simultaneous subprotocol grid jobs as defined in the Admin Console even if this value is higher than the value entered here or &apos;*&apos;.&lt;/br&gt;&lt;/br&gt;</sci:help>
						<sci:validscript>/* Server Processes must have the same number of comma separated entries as the Server parameter and must have a value*/
#processes := parameter();
expand(&apos;,&apos;, #processes);
#servers := parameter(&apos;Parallel Processing Options Server&apos;);
expand(&apos;,&apos;, #servers);

if (numvalues(#processes) == 0) then
	SetInvalidDetails(&apos;This parameter is required.&apos;);
else
	SetInvalidDetails(&apos;The number of server processes (&apos; . numvalues(#processes) . &apos;) must equal the number of servers (&apos; . numvalues(#servers) . &apos;).&apos;);
end if;
numvalues(#processes) &gt; 0 and numvalues(#processes) == numvalues(#servers);</sci:validscript>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Run On Grid" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Run subprotocol on grid engine if available.  Note: If no grid engine is configured the subprotocol will still run even if this parameter is set to true.</sci:help>
						<sci:member>Parallel Processing Options Server Run On Grid Queue Name</sci:member>
						<sci:member>Parallel Processing Options Server Run On Grid Grid Options</sci:member>
						<sci:enabledscript>parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Run On Grid Queue Name" type="StringType" required="false" visibility="visible" multi="false" legalvalsenforced="false" uimpl="false">
						<sci:help>Select the queue name on the grid to submit jobs to. Leave blank to use default queue name.</sci:help>
						<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Run On Grid Grid Options" type="StringType" required="false" visibility="visible" multi="true" uimpl="false">
						<sci:help>&lt;p&gt;This is an array of command line options to send to the Grid engine submit command.&lt;/p&gt;
&lt;p&gt;If you just include one line, whatever you enter will be sent &quot;as is&quot; to the submission command.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Just sending options directly to command line - PBS&lt;/b&gt;
&lt;p&gt;-l procs=16 -l walltime=08:00:00 -A PROJECTID&lt;/p&gt;
&lt;/br&gt;
&lt;p&gt;There are a number of parameters that Pipeline Pilot will translate to the correct command line options for whichever supported Grid Engine you are using.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Supported parameters&lt;/b&gt;
&lt;p&gt;Account=&amp;lt;Project/Account name&amp;gt;&lt;/p&gt;
&lt;p&gt;Maximum Execution Time=&amp;lt;DD:MM:SS&amp;gt; - LSF ignores seconds&lt;/p&gt;
&lt;p&gt;Number of Cores=&amp;lt;16&amp;gt;&lt;/p&gt;
&lt;p&gt;Parallel Environment=&amp;lt;The Parallel Environment to use&amp;gt; - Only needed for SGE&lt;/p&gt;
&lt;p&gt;Other=&amp;lt;Additional Parameters sent directly to submit command line&amp;gt;&lt;/p&gt;</sci:help>
						<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Preserve Order" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Whether to preserve the order of the data as it enters and leaves the remote subprotocol.</sci:help>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Tempfiles" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>&lt;p&gt;A comma-delimited list of global properties, each of which is automatically populated with the name of a file in the job&apos;s temporary folder, which always has a unique name.&lt;p/&gt;For each global name, an additional global is created (with the suffix &lt;i&gt;_Filename&lt;/i&gt;) that hold only the leaf file name of the temporary file.&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="DeclareLocal" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>&lt;p&gt;Lists a set of properties (without the @) to create on the global property list for this subprotocol. Separate property names with commas. Such properties can only be accessed within the scope of this subprotocol and its descendent subprotocols.&lt;p/&gt;

&lt;p&gt;Any global property not declared in this way is created on the top-level global property list and is accessible from all subprotocols, but breaks the encapsulation of the subprotocol and may collide with another property of the same name.&lt;/p&gt;

&lt;p&gt;Therefore, you should always declare a new global property in the &lt;i&gt;DeclareLocal&lt;/i&gt; parameter, to minimize the scope of the global property to the subprotocol where it is used.&lt;/p&gt;

&lt;p&gt;The example &lt;i&gt;DeclareLocal&lt;/i&gt; value below creates 3 global properties in the subprotocol scope. Note that you can initialize the declared global value with a scalar value using the &quot;:=&quot; syntax, as shown. You can surround text string values with quotes to aid clarity.&lt;/p&gt;
&lt;pre&gt;
    SubP_Counter := 0, SubP_NameHash, SubP_TitleText:=&quot;Sample 1&quot;
&lt;/pre&gt;
</sci:help>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="Convert Fingerprints To" type="StringType" required="false" visibility="visible" multi="false" expanded="true">
						<sci:metaproplist>
							<sci:mpropval name="SCI_PromotedFrom" type="StringType">
								<sci:value>Convert Fingerprints To</sci:value>
							</sci:mpropval>
							<sci:propval name="SCI_PromotionRenameRule">UsingParent</sci:propval>
						</sci:metaproplist>
						<sci:help>This option controls the automatic conversion of fingerprint properties into different format</sci:help>
						<sci:member>Fixed Length</sci:member>
						<sci:legalval>Leave As-Is</sci:legalval>
						<sci:legalval>Fixed-Length Array of Bits</sci:legalval>
						<sci:legalval selected="true">Fixed-Length Array of Counts</sci:legalval>
					</sci:arg>
					<sci:arg name="Fixed Length" type="LongType" required="false" visibility="visible" multi="false">
						<sci:metaproplist>
							<sci:mpropval name="SCI_PromotedFrom" type="StringType">
								<sci:value>Fixed Length</sci:value>
							</sci:mpropval>
						</sci:metaproplist>
						<sci:help>If Convert Fingerprints To is given a fixed-length type, then this is the fixed-length.  Bits larger than this length are folded into this range using a mod operation.</sci:help>
						<sci:value>1024</sci:value>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Custom Error Message</sci:help>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>Final Model Fingerprints</sci:value>
					</sci:arg>
					<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol AutoLayout</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>CalculatorNode</sci:value>
					</sci:arg>
					<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
						<sci:help>Component Revision</sci:help>
						<sci:value>790</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{189EB20A-2776-FE4A-9E57-6CC84D7C92A8}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>954 -470</sci:value>
					</sci:arg>
					<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>By Ref</sci:help>
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>6 only Molecular Fingerprints</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value>Records passing out of any unconnected pass ports of components inside the subprotocol</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value>Records passing out of any unconnected fail ports of components inside the subprotocol</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>18.1.100.11</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Sticky Notes</sci:help>
					</sci:arg>
					<sci:arg name="ProtocolScale2" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Scale</sci:help>
						<sci:value>100</sci:value>
					</sci:arg>
					<sci:arg name="Protocol Options" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Options</sci:help>
						<sci:legalval>Owner Access Only</sci:legalval>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>peter</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Wed Sep 11 09:45:36 2019</sci:value>
					</sci:arg>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>31</sci:value>
					</sci:arg>
					<sci:arg name="OriginalPackage" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>OriginalPackage</sci:help>
						<sci:value>scitegic/coreutils</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Unknown</sci:value>
					</sci:arg>
				</sci:component>
				<sci:protocol>
					<sci:data object="SciTegic.CalculateECFP.2">
						<sci:component name="Molecular Fingerprints" version="2">
							<sci:arg name="Type" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The type of fingerprint to generate:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;ExtendedConnectivity&lt;/b&gt;: Generates higher-order features.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Path&lt;/b&gt;: Generates higher-order features.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;AtomEnvironment&lt;/b&gt;: Generates higher-order features using a method developed by Bender &lt;i&gt;et al&lt;/i&gt;.  This generates a String Fingerprint.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;HashedAtomEnvironment&lt;/b&gt;: Uses a hash code to create an Integer Fingerprint representation of the &lt;b&gt;AtomEnvironment&lt;/b&gt; fingerprints for ease of use (e.g. learned models, etc.).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;UserKeys&lt;/b&gt;:  Fingerprints derived from user-defined substructures. These substructure queries are stored in MOL or SD query format in &quot;data\Queries\UserQueries&quot;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For more information on Extended-Connectivity fingerprints, see Rogers, D. and Hahn, M, Extended-Connectivity Fingerprints. J. Chem. Inf. Model. 2010, 50(5), 742-754&lt;/li&gt;
&lt;li&gt;For more information on AtomEnvironment fingerprints, see Bender, A., Mussa, H.Y., and Glen, R.C., Molecular Similarity Searching Using Atom Environments, Information-Based Feature Selection, and a Naive Bayesian Classifier. J. Chem. Inf. Comput. Sci. 2004, 44, 170-178&lt;/li&gt;
&lt;li&gt;The &lt;b&gt;MDLPublicKeys&lt;/b&gt; fingerprint previously found here is a native Pipeline Pilot implementation of the MDL fingerprint which does not always match the results obtained from legacy-MDL products such as the Direct Cartridge.  This fingerprint has been deprecated in favor of an implementation using MDL libraries which is available in the &lt;a href=&quot;javascript:DoLink(&apos;{6352F5A7-9C1C-4934-930E-F96B1E785E92}&apos;)&quot;&gt;MDL Key Fingerprints&lt;/a&gt; component as the &lt;b&gt;MDL2DKeys166&lt;/b&gt; descriptor.  &lt;b&gt;MDLPublicKeys&lt;/b&gt; is now available only as a calculable property (i.e. pilotscript: calculate(&quot;MDLPublicKeys&quot;);)&lt;/li&gt;
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">ExtendedConnectivity</sci:legalval>
								<sci:legalval>Path</sci:legalval>
								<sci:legalval>AtomEnvironment</sci:legalval>
								<sci:legalval>HashedAtomEnvironment</sci:legalval>
								<sci:legalval>UserKeys</sci:legalval>
							</sci:arg>
							<sci:arg name="AtomAbstraction" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Method used to assign initial category for atom classes.
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;AtomType&lt;/b&gt;: (First letter: &quot;E&quot;) Uses atom type, charge and hybridization.&lt;/li&gt;

&lt;li&gt;&lt;b&gt;ALogPCode&lt;/b&gt;: (First letter: &quot;L&quot;) Uses ALogP category of atoms.&lt;/li&gt;

&lt;li&gt;&lt;b&gt;FunctionalClass&lt;/b&gt;: (First letter: &quot;F&quot;) Uses the following groups:
&lt;ul&gt;
&lt;li&gt;H-bond acceptor&lt;/li&gt;
&lt;li&gt;H-bond donor&lt;/li&gt;
&lt;li&gt;Positive ionizable&lt;/li&gt;
&lt;li&gt;Negative ionizable&lt;/li&gt; 
&lt;li&gt;Halogen&lt;/li&gt;
&lt;li&gt;Aromatic&lt;/li&gt;
&lt;li&gt;None of the above&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Sybyl&lt;/b&gt;: (First letter: &quot;S&quot;) Uses the Sybyl atom types used in the Tripos Mol2 File Format.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;UserAtomTypes&lt;/b&gt;: (First letter: &quot;U&quot;) Assumes that the property &lt;b&gt;UserAtomTypes&lt;/b&gt; is defined on the molecule, and contains an array of integers, one for each atom in the molecule.  The i&apos;th value in the array is the user atom type for the i&apos;th atom in the molecule.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Reaction&lt;/b&gt;: (First letter: &quot;R&quot;) Uses type, charge, hybridization, reactant or product, and &quot;reaction site&quot; information. Atoms are in the reaction site if they are changed by the reaction or attached to bonds that change. This information is perceived from the the reaction&apos;s atom-atom mappings. Only reaction site atoms are selected to be bit centers but atoms outside the site can be included for higher-distance bits. Can only be used for reaction inputs.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ReactionSiteOnly&lt;/b&gt;:  (First letter: &quot;Q&quot;) Similar to &lt;b&gt;Reaction&lt;/b&gt; (see above). Only reaction site atoms are selected to be bit centers and atoms outside the reaction site are &lt;i&gt;excluded&lt;/i&gt; from any higher-distance bits. Can only be used for reaction inputs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Information about Sybyl atom types is available from Tripos:
&lt;a href=&quot;javascript:DoLink(&apos;http://www.tripos.com/mol2/atom_types.html&apos;)&quot;&gt;http://www.tripos.com/mol2/atom_types.html&lt;/a&gt;.
&lt;/li&gt;
&lt;/ul&gt;</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;This parameter does not apply to MDLPublicKeys or UserKeys&apos;);
Parameter(&apos;Type&apos;) ne &apos;MDLPublicKeys&apos; and Parameter(&apos;Type&apos;) ne &apos;UserKeys&apos;</sci:enabledscript>
								<sci:legalval>FunctionalClass</sci:legalval>
								<sci:legalval>AtomType</sci:legalval>
								<sci:legalval>ALogPCode</sci:legalval>
								<sci:legalval selected="true">Sybyl</sci:legalval>
								<sci:legalval>UserAtomTypes</sci:legalval>
								<sci:legalval>Reaction</sci:legalval>
								<sci:legalval>ReactionSiteOnly</sci:legalval>
							</sci:arg>
							<sci:arg name="MaximumDistance" type="LongType" required="true" visibility="visible" multi="false">
								<sci:help>The maximum bond distance in the substructures represented in the fingerprint.
&lt;ul&gt;
&lt;li&gt;For extended connectivity fingerprints, this is the diameter of the neighborhood surrounding the central atom, and should be an even number.&lt;/li&gt; 
&lt;li&gt;For path fingerprints, this is the maximum number of bonds in the paths.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;This parameter does not apply to MDLPublicKeys or UserKeys&apos;);
Parameter(&apos;Type&apos;) ne &apos;MDLPublicKeys&apos; and Parameter(&apos;Type&apos;) ne &apos;UserKeys&apos;</sci:enabledscript>
								<sci:value>6</sci:value>
							</sci:arg>
							<sci:arg name="OutputType" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Controls the way the fingerprint is presented:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Fingerprint&lt;/b&gt;: A list of the features present in the molecule, with duplicates removed.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Counts&lt;/b&gt;: A list of the features present in the molecule, with duplicates retained; if a feature occurs more than once in a molecule, that bit value is included more than once in the output list.&lt;/li&gt;
&lt;/ul&gt;

</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;This parameter does not apply to MDLPublicKeys or UserKeys&apos;);
Parameter(&apos;Type&apos;) ne &apos;MDLPublicKeys&apos; and Parameter(&apos;Type&apos;) ne &apos;UserKeys&apos;</sci:enabledscript>
								<sci:legalvalscript>#legalVals := &apos;Fingerprint&apos;;
if parameter(&apos;Type&apos;) ne &apos;MDLPublicKeys&apos; then
	append(#legalVals, &apos;Counts&apos;);
end if;
	
setLegalValues(#legalVals);</sci:legalvalscript>
								<sci:value>Counts</sci:value>
							</sci:arg>
							<sci:arg name="Options" type="StringType" required="false" visibility="visible" multi="true">
								<sci:help>Options for the fingerprint calculation. &lt;b&gt;IncludeStereo&lt;/b&gt; changes the fingerprint. The other options cause the calculation of other properties with associated information. The options are:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;IncludeStereo&lt;/b&gt;: (#S) include information from stereoatoms into fingerprint calculation.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;OutputBitDistance&lt;/b&gt;: (#D) output an array with the length or diameter of each bit.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;OutputBitSubstructure&lt;/b&gt;: (#C) output an array with an example of SMARTS of the fragment.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;OutputBitExactSubstructure&lt;/b&gt;: (#X) output an array with the SMARTS of the fragment, in this molecule.  (This is slower than OutputBitSubstructure, since the former can cache the first example it finds in a data set, and re-use it.)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;OutputBitAllAtoms&lt;/b&gt;: (#A) output an array with the set of all atoms involved with a feature anywhere in the molecule.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;OutputBitFeatureAtoms&lt;/b&gt;: (#F) output an array with the set of atoms showing one example of the feature bit.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;OutputBitCentralAtom&lt;/b&gt;: (#Z) output an array with the number of the central atom for each bit.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;AddBitsToCentralAtom&lt;/b&gt;: (#P) output, to each central atoms&apos;s property collection, a list of its generated bits. (The atom property name is the name of the fingerprint.)&lt;/li&gt;
&lt;/ul&gt;
</sci:help>
								<sci:legalval>IncludeStereo</sci:legalval>
								<sci:legalval>OutputBitDistance</sci:legalval>
								<sci:legalval>OutputBitSubstructure</sci:legalval>
								<sci:legalval>OutputBitExactSubstructure</sci:legalval>
								<sci:legalval>OutputBitAllAtoms</sci:legalval>
								<sci:legalval>OutputBitFeatureAtoms</sci:legalval>
								<sci:legalval>OutputBitCentralAtom</sci:legalval>
								<sci:legalval>AddBitsToCentralAtom</sci:legalval>
							</sci:arg>
							<sci:arg name="UserKeyDirectory" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>If given, use this directory (instead of &quot;data/Queries/UserQueries/&quot;) for the source of the user keys.  The name of the directory must end in a slash or backslash.

&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;&lt;li&gt;The substructure queries defined here must be in either MOL or SD query format.&lt;/li&gt;
&lt;li&gt;The &quot;ReadQueryInfo&quot; parameter on the internal SD reader is enabled to allow the import of any non-CTAB atom and bond tests persisted in the property block.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
							</sci:arg>
							<sci:arg name="ForReactionsInclude" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Determines which part of inputs to examine.</sci:help>
								<sci:legalval selected="true">ReactantsAndProducts</sci:legalval>
								<sci:legalval>ReactantsOnly</sci:legalval>
								<sci:legalval>ProductsOnly</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/chemistry</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Tue May 21 13:30:28 2013</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>SCFC6</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>Molecular Fingerprints</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>CALCULATORNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{C5873CBC-62ED-4F93-A565-13027A5B3512}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>90 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Calculates a variety of molecular and reaction fingerprints</sci:value>
								<sci:value>Uses one the following algorithms to calculate fingerprints on input molecules and reactions:
&lt;ul&gt;
&lt;li&gt;SciTegic extended-connectivity fingerprints
&lt;li&gt;Daylight-style path fingerprints
&lt;li&gt;Fingerprints derived from user-defined substructures. These substructure queries are stored in MOL or SD query format in &quot;data\Queries\UserQueries&quot;.
&lt;/ul&gt; 

For both the extended-connectivity and path fingerprints, a number of methods are available to define the atom abstraction used to generate the initial atom code. You should also specify the maximum path distance (such as number of bonds) that will be used to index an individual fragment.




</sci:value>
								<sci:value>Molecule</sci:value>
								<sci:value/>
								<sci:value>Molecule</sci:value>
								<sci:value>Records augmented with the molecular fingerprint property</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>9.0.1.28</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>17</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Chemistry\Property Calculators\Structural\Molecular Fingerprints</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.CalculateFP25D.1">
						<sci:component name="Molecular Pharmacophore Fingerprints" version="2">
							<sci:arg name="Size" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Number of features: pairs, triplets or quartets</sci:help>
								<sci:legalval selected="true">Pairs</sci:legalval>
								<sci:legalval>Triplets</sci:legalval>
								<sci:legalval>Quartets</sci:legalval>
							</sci:arg>
							<sci:arg name="MolecularFeatures" type="StringType" required="true" visibility="visible" multi="true">
								<sci:help>Molecular features to perceive and include in the pharmacophore keys</sci:help>
								<sci:legalval selected="true">HBondAcceptor</sci:legalval>
								<sci:legalval selected="true">HBondDonor</sci:legalval>
								<sci:legalval selected="true">PositiveCharge</sci:legalval>
								<sci:legalval selected="true">NegativeCharge</sci:legalval>
								<sci:legalval selected="true">PositiveIonizable</sci:legalval>
								<sci:legalval selected="true">NegativeIonizable</sci:legalval>
								<sci:legalval selected="true">Hydrophobe</sci:legalval>
								<sci:legalval selected="true">AromaticRing</sci:legalval>
								<sci:legalval selected="true">AttachmentPoint</sci:legalval>
							</sci:arg>
							<sci:arg name="ShortestPathInfo" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Level of detail about the shortest path between two features</sci:help>
								<sci:legalval>NumBondsOnly</sci:legalval>
								<sci:legalval selected="true">NumBondsAndNumRotBonds</sci:legalval>
								<sci:legalval>NumBondsAndBondTypes</sci:legalval>
							</sci:arg>
							<sci:arg name="MinimumDistance" type="LongType" required="false" visibility="visible" multi="false" expanded="true">
								<sci:help>Minimum number of bonds between two molecular features to be included in a pharmacophore key</sci:help>
								<sci:value>1</sci:value>
							</sci:arg>
							<sci:arg name="MaximumDistance" type="LongType" required="false" visibility="visible" multi="false">
								<sci:help>Maximum number of bonds between two molecular features to be included in a pharmacophore key</sci:help>
								<sci:value>15</sci:value>
							</sci:arg>
							<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false" expanded="true">
								<sci:member>OutputType</sci:member>
								<sci:member>MaxNumberPharmacophores</sci:member>
								<sci:member>OutputFeatureInfo</sci:member>
								<sci:member>MustHaveAttachmentPoint</sci:member>
								<sci:member>Hydrophobic Factor</sci:member>
								<sci:member>Allow NonHydrophobic Atoms in Hydrophobic Rings</sci:member>
							</sci:arg>
							<sci:arg name="OutputType" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Controls the way the fingerprint is presented:

 - Fingerprint: A list of the features present in the molecule, with duplicates removed.

 - Counts: A list of the features present in the molecule, with duplicates retained; if a feature occurs more than once in a molecule, that bit value is included more than once in the output list.

</sci:help>
								<sci:legalval>Fingerprints</sci:legalval>
								<sci:legalval selected="true">Counts</sci:legalval>
							</sci:arg>
							<sci:arg name="MaxNumberPharmacophores" type="LongType" required="false" visibility="visible" multi="false">
								<sci:help>Maximum number of keys to be generated for an individual molecule</sci:help>
								<sci:value>5000</sci:value>
							</sci:arg>
							<sci:arg name="OutputFeatureInfo" type="BoolType" required="false" visibility="visible" multi="false">
								<sci:help>Output detailed information about the molecular features perceived in the molecule and the pharmacophore pairs, triplets or quartets generated</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="MustHaveAttachmentPoint" type="BoolType" required="false" visibility="visible" multi="false">
								<sci:help>Whether or not to impose the restriction that any pharmacophore must include an attachment point feature as at least one of the features.</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Hydrophobic Factor" type="DoubleType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>Factor to use in the perception of hydrophobic features. A group of atoms is classified as a hydrophobic feature if their surface area is equal or greater than the area of a methyl group multiplied by this factor. The default is 1.50. </sci:help>
								<sci:enabledscript>contains(parameter(&quot;MolecularFeatures&quot;), &quot;Hydrophobe&quot;)</sci:enabledscript>
								<sci:value>1.50</sci:value>
							</sci:arg>
							<sci:arg name="Allow NonHydrophobic Atoms in Hydrophobic Rings" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>When set to True, the perception of hydrophobic rings allows the presence of atoms with low hydrophobic factors, as long as the total hydrophobicity of the ring is high enough. Otherwise, the presence of even one heteroatom or other atom with low hydrophobicity disqualifies the ring as hydrophobic.</sci:help>
								<sci:enabledscript>contains(parameter(&quot;MolecularFeatures&quot;), &quot;Hydrophobe&quot;)</sci:enabledscript>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentComment" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Comment</sci:help>
								<sci:value>Calculates a number of different molecular fingerprints, including extended-connectivity fingerprints, daylight-style path fingerprints, and MDL public key fingerprints.</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/chemistry</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Tue Aug 19 13:06:35 2014</sci:value>
							</sci:arg>
							<sci:arg name="ComponentUsage" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Component Usage</sci:help>
								<sci:value>&apos;Type&apos; gives the type of fingerprint we wish to calculate:
    ExtendedConnectivity generates extended-connectivity fingerprints
    Path generates Daylight-style path-based fingerprints
    MDLPublicKeys generates the MDL Public key fingerprints
    UserKeys generates fingerprints derived from user-defined substructures
&apos;AtomAbstraction&apos; is used by ExtendedConnectivity and Path fingerprints, and defines the abstraction used to generate the initial atom-based codes.
&apos;MaximumDistance&apos; is used by ExtendedConnectivity and Path fingerprints, and gives either the diameter of the neighborhoods considered (if ExtendedConnectivity type) or of the paths (if Path type).

Input            - Molecule data records
Output Pass - Molecule data records augmented with fingerprint information</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>Molecular Pharmacophore Fingerprints</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>Molecular Fingerprints</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>CALCULATORNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{CD9BD04A-BB3D-405B-9F96-4BD83AB7814D}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>378 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Calculates molecular pharmacophore fingerprints for the input molecules</sci:value>
								<sci:value>Calculate pharmacophore fingerprints using topological (bond) distances. Pharmacophores consist of pairs, triplets or quartets of molecular features and the corresponding bond distances among them.
&lt;p&gt;
Molecular features include:
&lt;ul&gt;
&lt;li&gt;HBond Acceptor
&lt;li&gt;HBond Donor
&lt;li&gt;Positive Charge
&lt;li&gt;Negative Charge
&lt;li&gt;Positive Ionizable
&lt;li&gt;Negative Ionizable
&lt;li&gt;Aromatic Ring
&lt;li&gt;Hydrophobic
&lt;li&gt;AttachmentPoint
&lt;/ul&gt;
&lt;p&gt;
The output type can be either fingerprints (each individual pharmacophore is counted only once) or counts (each individual pharmacophore is counted as many times as it appears in the molecule.
&lt;p&gt;
Pharmacophore keys can contain only information about the number of bonds in the path between two molecular features, or can include also the number of rotatable bonds in the path or the types of bonds in the path (single, double, triple, ring, aromatic)
&lt;p&gt;
The name of the calculated pharmacophore keys encodes the type of fingerprint:
&lt;ul&gt;
&lt;li&gt;PHFP_2, PHFP_3, PHFP_4: pairs, triplets or quartets including only number of bonds in the shortest path between features
&lt;li&gt;PHRFP_2, PHRFP_3, PHRFP_4: pairs, triplets or quartets including number of bonds and number of rotatable bonds in the path
&lt;li&gt;PHPFP_2, PHPFP_3, PHPFP_4: pairs, triplets or quartets including  number of bonds and types of bonds in the path
&lt;/ul&gt;
The counts have similar names, but with &apos;FP&apos; replaced by &apos;FC&apos;. For example, PHFC_3 represents counts of triplets with information only about the number of bonds in the path.





</sci:value>
								<sci:value>Molecule</sci:value>
								<sci:value/>
								<sci:value>Molecule</sci:value>
								<sci:value>Records augmented with the molecular pharmacophore fingerprint property</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>9.5.0.547</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>18</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Chemistry\Property Calculators\Structural\Molecular Pharmacophore Fingerprints</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.CalculateFP25D.1">
						<sci:component name="Molecular Pharmacophore Fingerprints" version="2">
							<sci:arg name="Size" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Number of features: pairs, triplets or quartets</sci:help>
								<sci:legalval selected="true">Pairs</sci:legalval>
								<sci:legalval>Triplets</sci:legalval>
								<sci:legalval>Quartets</sci:legalval>
							</sci:arg>
							<sci:arg name="MolecularFeatures" type="StringType" required="true" visibility="visible" multi="true">
								<sci:help>Molecular features to perceive and include in the pharmacophore keys</sci:help>
								<sci:legalval selected="true">HBondAcceptor</sci:legalval>
								<sci:legalval selected="true">HBondDonor</sci:legalval>
								<sci:legalval selected="true">PositiveCharge</sci:legalval>
								<sci:legalval selected="true">NegativeCharge</sci:legalval>
								<sci:legalval selected="true">PositiveIonizable</sci:legalval>
								<sci:legalval selected="true">NegativeIonizable</sci:legalval>
								<sci:legalval selected="true">Hydrophobe</sci:legalval>
								<sci:legalval selected="true">AromaticRing</sci:legalval>
								<sci:legalval selected="true">AttachmentPoint</sci:legalval>
							</sci:arg>
							<sci:arg name="ShortestPathInfo" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Level of detail about the shortest path between two features</sci:help>
								<sci:legalval>NumBondsOnly</sci:legalval>
								<sci:legalval>NumBondsAndNumRotBonds</sci:legalval>
								<sci:legalval selected="true">NumBondsAndBondTypes</sci:legalval>
							</sci:arg>
							<sci:arg name="MinimumDistance" type="LongType" required="false" visibility="visible" multi="false" expanded="true">
								<sci:help>Minimum number of bonds between two molecular features to be included in a pharmacophore key</sci:help>
								<sci:value>1</sci:value>
							</sci:arg>
							<sci:arg name="MaximumDistance" type="LongType" required="false" visibility="visible" multi="false">
								<sci:help>Maximum number of bonds between two molecular features to be included in a pharmacophore key</sci:help>
								<sci:value>15</sci:value>
							</sci:arg>
							<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false" expanded="true">
								<sci:member>OutputType</sci:member>
								<sci:member>MaxNumberPharmacophores</sci:member>
								<sci:member>OutputFeatureInfo</sci:member>
								<sci:member>MustHaveAttachmentPoint</sci:member>
								<sci:member>Hydrophobic Factor</sci:member>
								<sci:member>Allow NonHydrophobic Atoms in Hydrophobic Rings</sci:member>
							</sci:arg>
							<sci:arg name="OutputType" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>Controls the way the fingerprint is presented:

 - Fingerprint: A list of the features present in the molecule, with duplicates removed.

 - Counts: A list of the features present in the molecule, with duplicates retained; if a feature occurs more than once in a molecule, that bit value is included more than once in the output list.

</sci:help>
								<sci:legalval>Fingerprints</sci:legalval>
								<sci:legalval selected="true">Counts</sci:legalval>
							</sci:arg>
							<sci:arg name="MaxNumberPharmacophores" type="LongType" required="false" visibility="visible" multi="false">
								<sci:help>Maximum number of keys to be generated for an individual molecule</sci:help>
								<sci:value>5000</sci:value>
							</sci:arg>
							<sci:arg name="OutputFeatureInfo" type="BoolType" required="false" visibility="visible" multi="false">
								<sci:help>Output detailed information about the molecular features perceived in the molecule and the pharmacophore pairs, triplets or quartets generated</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="MustHaveAttachmentPoint" type="BoolType" required="false" visibility="visible" multi="false">
								<sci:help>Whether or not to impose the restriction that any pharmacophore must include an attachment point feature as at least one of the features.</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Hydrophobic Factor" type="DoubleType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>Factor to use in the perception of hydrophobic features. A group of atoms is classified as a hydrophobic feature if their surface area is equal or greater than the area of a methyl group multiplied by this factor. The default is 1.50. </sci:help>
								<sci:enabledscript>contains(parameter(&quot;MolecularFeatures&quot;), &quot;Hydrophobe&quot;)</sci:enabledscript>
								<sci:value>1.50</sci:value>
							</sci:arg>
							<sci:arg name="Allow NonHydrophobic Atoms in Hydrophobic Rings" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>When set to True, the perception of hydrophobic rings allows the presence of atoms with low hydrophobic factors, as long as the total hydrophobicity of the ring is high enough. Otherwise, the presence of even one heteroatom or other atom with low hydrophobicity disqualifies the ring as hydrophobic.</sci:help>
								<sci:enabledscript>contains(parameter(&quot;MolecularFeatures&quot;), &quot;Hydrophobe&quot;)</sci:enabledscript>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentComment" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Comment</sci:help>
								<sci:value>Calculates a number of different molecular fingerprints, including extended-connectivity fingerprints, daylight-style path fingerprints, and MDL public key fingerprints.</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/chemistry</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Tue Aug 19 13:06:35 2014</sci:value>
							</sci:arg>
							<sci:arg name="ComponentUsage" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Component Usage</sci:help>
								<sci:value>&apos;Type&apos; gives the type of fingerprint we wish to calculate:
    ExtendedConnectivity generates extended-connectivity fingerprints
    Path generates Daylight-style path-based fingerprints
    MDLPublicKeys generates the MDL Public key fingerprints
    UserKeys generates fingerprints derived from user-defined substructures
&apos;AtomAbstraction&apos; is used by ExtendedConnectivity and Path fingerprints, and defines the abstraction used to generate the initial atom-based codes.
&apos;MaximumDistance&apos; is used by ExtendedConnectivity and Path fingerprints, and gives either the diameter of the neighborhoods considered (if ExtendedConnectivity type) or of the paths (if Path type).

Input            - Molecule data records
Output Pass - Molecule data records augmented with fingerprint information</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>Molecular Pharmacophore Fingerprints</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>Molecular Fingerprints</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>CALCULATORNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{CD9BD04A-BB3D-405B-9F96-4BD83AB7814D}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>666 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Calculates molecular pharmacophore fingerprints for the input molecules</sci:value>
								<sci:value>Calculate pharmacophore fingerprints using topological (bond) distances. Pharmacophores consist of pairs, triplets or quartets of molecular features and the corresponding bond distances among them.
&lt;p&gt;
Molecular features include:
&lt;ul&gt;
&lt;li&gt;HBond Acceptor
&lt;li&gt;HBond Donor
&lt;li&gt;Positive Charge
&lt;li&gt;Negative Charge
&lt;li&gt;Positive Ionizable
&lt;li&gt;Negative Ionizable
&lt;li&gt;Aromatic Ring
&lt;li&gt;Hydrophobic
&lt;li&gt;AttachmentPoint
&lt;/ul&gt;
&lt;p&gt;
The output type can be either fingerprints (each individual pharmacophore is counted only once) or counts (each individual pharmacophore is counted as many times as it appears in the molecule.
&lt;p&gt;
Pharmacophore keys can contain only information about the number of bonds in the path between two molecular features, or can include also the number of rotatable bonds in the path or the types of bonds in the path (single, double, triple, ring, aromatic)
&lt;p&gt;
The name of the calculated pharmacophore keys encodes the type of fingerprint:
&lt;ul&gt;
&lt;li&gt;PHFP_2, PHFP_3, PHFP_4: pairs, triplets or quartets including only number of bonds in the shortest path between features
&lt;li&gt;PHRFP_2, PHRFP_3, PHRFP_4: pairs, triplets or quartets including number of bonds and number of rotatable bonds in the path
&lt;li&gt;PHPFP_2, PHPFP_3, PHPFP_4: pairs, triplets or quartets including  number of bonds and types of bonds in the path
&lt;/ul&gt;
The counts have similar names, but with &apos;FP&apos; replaced by &apos;FC&apos;. For example, PHFC_3 represents counts of triplets with information only about the number of bonds in the path.





</sci:value>
								<sci:value>Molecule</sci:value>
								<sci:value/>
								<sci:value>Molecule</sci:value>
								<sci:value>Records augmented with the molecular pharmacophore fingerprint property</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>9.5.0.547</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>19</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Chemistry\Property Calculators\Structural\Molecular Pharmacophore Fingerprints</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.CalculateMDLKeysNative.1">
						<sci:component name="MDL Key Fingerprints" version="2">
							<sci:arg name="Output" type="StringType" required="true" visibility="visible" multi="true">
								<sci:help>Type of output to generate:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;MDL2DKeys960:&lt;/b&gt; Fingerprint bitset of 960 molecule substructure/similarity search keys&lt;/li&gt;
&lt;li&gt;&lt;b&gt;MDL2DKeys166:&lt;/b&gt; Fingerprint bitset of 166 publicly defined molecule keys, a subset of MDL2DKeys960&lt;/li&gt;
&lt;li&gt;&lt;b&gt;MDLRxnCenterKeys:&lt;/b&gt; Fingerprint bitset of 654 reaction substructure/similarity search keys encoding only the reacting center (transform) features&lt;/li&gt;
&lt;/ul&gt;</sci:help>
								<sci:legalval type="LongFingerprintType" selected="true">MDL2DKeys960</sci:legalval>
								<sci:legalval type="LongFingerprintType" selected="true">MDL2DKeys166</sci:legalval>
								<sci:legalval type="LongFingerprintType">MDLRxnCenterKeys</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{6CC6EEFE-0CC7-40F9-919D-E6135D529532}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>MDL Key Fingerprints</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>CALCULATORNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>954 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Computes MDL keys from an input molecule or reaction</sci:value>
								<sci:value>Calculates molecule or reaction fingerprints used by the BIOVIA Direct Data Cartridge:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;MDL2DKeys960:&lt;/b&gt; Fingerprint bitset of 960 molecule substructure/similarity search keys&lt;/li&gt;
&lt;li&gt;&lt;b&gt;MDL2DKeys166:&lt;/b&gt; Fingerprint bitset of 166 publicly defined molecule keys, a subset of MDL2DKeys960&lt;/li&gt;
&lt;li&gt;&lt;b&gt;MDLRxnCenterKeys:&lt;/b&gt; Fingerprint bitset of 654 reaction substructure/similarity search keys encoding only the reacting center (transform) features&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;MDL2DKeys166&lt;/b&gt; is a replacement for the deprecated &lt;b&gt;MDLPublicKeys&lt;/b&gt; fingerprint which was previously available in the &lt;a href=&quot;javascript:DoLink(&apos;{C5873CBC-62ED-4F93-A565-13027A5B3512}&apos;)&quot;&gt;Molecular Fingerprints&lt;/a&gt; component and now available only as a calculable property. &lt;b&gt;MDL2DKeys166&lt;/b&gt; generates the actual MDL public keys, &lt;b&gt;MDLPublicKeys&lt;/b&gt; uses a native-Pipeline Pilot implementation to generate an approximation of these keys.&lt;/li&gt;
&lt;li&gt;For more information on MDL keys see: Durant J. L.; Leland B. A.; Henry D. R.; Nourse J. G. Reoptimization of MDL Keys for Use in Drug Discovery.&lt;i&gt;J. Chem. Inf. Comput. Sci.&lt;/i&gt;, &lt;b&gt;2002&lt;/b&gt;, &lt;i&gt;42&lt;/i&gt;, 1273-1280.&lt;/li&gt;
&lt;li&gt;More details on MDL key technology is available at here: &lt;a href=&quot;javascript:DoLink(&apos;http://accelrys.com/products/pdf/keys-to-keyset-technology.pdf&apos;)&quot;&gt;MDL Keys whitepaper&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
								<sci:value>Generic,Molecule</sci:value>
								<sci:value>Input molecule or reaction</sci:value>
								<sci:value>Generic,Molecule</sci:value>
								<sci:value>Data records augmented with a property containing the requested fingerprints</sci:value>
								<sci:value>Generic,Molecule</sci:value>
								<sci:value>Data records that could not have the fingerprints computed</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>17.2.0.0</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>6</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/chemistry</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Mon Jul 11 11:26:46 2016</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Chemistry\Property Calculators\Structural\MDL Key Fingerprints</sci:value>
							</sci:arg>
						</sci:component>
						<sci:proplist>
							<sci:propval name="MDL2DKeys960|Category">Fingerprints</sci:propval>
							<sci:propval name="MDL2DKeys166|Category">Fingerprints</sci:propval>
							<sci:propval name="MDLRxnCenterKeys|Category">Fingerprints</sci:propval>
						</sci:proplist>
					</sci:data>
					<sci:data object="SciTegic.PropertyCalculator.1">
						<sci:component name="Calculate Properties" version="2">
							<sci:arg name="UseProperties" type="StringType" required="true" visibility="visible" multi="false" expanded="true">
								<sci:help>The properties to learn from: 
  &apos;AllPropertiesOnFirstData&apos; uses all those that are found
on the first data object;
  &apos;CalculablePropertiesOnFirstData&apos; uses all those that are
found on the first data that can be calculated;
  &apos;UserSet&apos; takes the list of properties from the parameter
UserSet.  Property ranges can be given by giving the first
and last property in the range separated by a hyphen; 
properties can be referred to by index using the word &quot;Column&quot;
followed by the index, i.e., Column3-Column10.
  &apos;PointInfoText&apos; takes a copy of a previously-generated 
Calculate Properties state in either the globals or the parameter
PointInfoText. The restores the calculator to behave as it did
when the text was originally generated.  This is useful for connecting
Learn components with Model components.
</sci:help>
								<sci:member>IgnoreProperties</sci:member>
								<sci:member>UserSet</sci:member>
								<sci:member>PredefinedSet</sci:member>
								<sci:legalval>AllPropertiesOnFirstData</sci:legalval>
								<sci:legalval>CalculablePropertiesOnFirstData</sci:legalval>
								<sci:legalval selected="true">PredefinedSet</sci:legalval>
								<sci:legalval>UserSet</sci:legalval>
								<sci:legalval>PointInfoText</sci:legalval>
							</sci:arg>
							<sci:arg name="PredefinedSet" type="StringType" required="false" visibility="visible" multi="true">
								<sci:help>A predefined set of properties to use for learning</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, set UseProperties to PredefinedSet&apos;);
Parameter(&apos;UseProperties&apos;) eq &apos;PredefinedSet&apos;</sci:enabledscript>
								<sci:legalval selected="true">MDL2DKeys960</sci:legalval>
								<sci:legalval selected="true">MDL2DKeys166</sci:legalval>
								<sci:legalval>MDLRxnCenterKeys</sci:legalval>
								<sci:legalval>PHFP_2</sci:legalval>
								<sci:legalval>PHFP_3</sci:legalval>
								<sci:legalval>PHFP_4</sci:legalval>
								<sci:legalval>PHRFP_2</sci:legalval>
								<sci:legalval>PHRFP_3</sci:legalval>
								<sci:legalval>PHRFP_4</sci:legalval>
								<sci:legalval>PHPFP_2</sci:legalval>
								<sci:legalval>PHPFP_3</sci:legalval>
								<sci:legalval>PHPFP_4</sci:legalval>
								<sci:legalval>PHFC_2</sci:legalval>
								<sci:legalval>PHFC_3</sci:legalval>
								<sci:legalval>PHFC_4</sci:legalval>
								<sci:legalval selected="true">PHPFC_2</sci:legalval>
								<sci:legalval>PHPFC_3</sci:legalval>
								<sci:legalval>PHPFC_4</sci:legalval>
								<sci:legalval selected="true">PHRFC_2</sci:legalval>
								<sci:legalval>PHRFC_3</sci:legalval>
								<sci:legalval>PHRFC_4</sci:legalval>
								<sci:legalval>FCFC_6</sci:legalval>
								<sci:legalval>ECFC_6</sci:legalval>
								<sci:legalval>LCFC_6</sci:legalval>
								<sci:legalval selected="true">SCFC_6</sci:legalval>
								<sci:legalval>FPFC_6</sci:legalval>
								<sci:legalval>EPFC_6</sci:legalval>
								<sci:legalval>LPFC_6</sci:legalval>
								<sci:legalval>SPFC_6</sci:legalval>
								<sci:legalval>FEFC_6</sci:legalval>
								<sci:legalval>EEFC_6</sci:legalval>
								<sci:legalval>LEFC_6</sci:legalval>
								<sci:legalval>SEFC_6</sci:legalval>
								<sci:legalval>FHFC_6</sci:legalval>
								<sci:legalval>EHFC_6</sci:legalval>
								<sci:legalval>LHFC_6</sci:legalval>
								<sci:legalval>SHFC_6</sci:legalval>
								<sci:legalval>FCFP_6</sci:legalval>
								<sci:legalval>ECFP_6</sci:legalval>
								<sci:legalval>LCFP_6</sci:legalval>
								<sci:legalval>SCFP_6</sci:legalval>
								<sci:legalval>FPFP_6</sci:legalval>
								<sci:legalval>EPFP_6</sci:legalval>
								<sci:legalval>LPFP_6</sci:legalval>
								<sci:legalval>SPFP_6</sci:legalval>
								<sci:legalval>FEFP_6</sci:legalval>
								<sci:legalval>EEFP_6</sci:legalval>
								<sci:legalval>LEFP_6</sci:legalval>
								<sci:legalval>SEFP_6</sci:legalval>
								<sci:legalval>FHFP_6</sci:legalval>
								<sci:legalval>EHFP_6</sci:legalval>
								<sci:legalval>LHFP_6</sci:legalval>
								<sci:legalval>SHFP_6</sci:legalval>
							</sci:arg>
							<sci:arg name="UserSet" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>A comma-separated list of properties to use for calculation. 
&lt;p&gt;If an item on the list contains a hyphen (e.g., &quot;X1-X5&quot;), and the properties on either side of the hyphen (e.g., &quot;X1&quot;, &quot;X5&quot;) are defined on the first data record, then all properties in that range are included. Note that the properties within the specified range are determined by the order of properties in the property list. Thus, if properties in the property list are in the following order: X1, X2, X5, X3, X4, X6, then the range &quot;X1-X5&quot; will only include properties X1, X2, and X5.&lt;/p&gt;
</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, set UseProperties to UserSet&apos;);
Parameter(&apos;UseProperties&apos;) eq &apos;UserSet&apos;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="IgnoreProperties" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>A comma-separated list of properties to ignore.  This is used, for example, if UseProperties is AllPropertiesOnFirstData, but there is a small set of undesirable properties you don&apos;t wish to use but can&apos;t remove (i.e., record names)</sci:help>
							</sci:arg>
							<sci:arg name="Convert Fingerprints To" type="LinkParentParameterType" required="false" visibility="visible" multi="false" expanded="true">
								<sci:metaproplist>
									<sci:propval name="SCI_InitializeUsingOrigType" ishidden="true">StringType</sci:propval>
								</sci:metaproplist>
								<sci:help>This option controls the automatic conversion of fingerprint properties into different format</sci:help>
								<sci:member>Fixed Length</sci:member>
								<sci:value>Convert Fingerprints To</sci:value>
							</sci:arg>
							<sci:arg name="PutPropertyListInGlobal" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>If given, the array of properties that are being calculated is placed into this global property when the first data is passed into the component.</sci:help>
								<sci:value>CalculatedProperties</sci:value>
							</sci:arg>
							<sci:arg name="PutCalculatedPropertiesInProperty" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>If given, the array of properties that are newly calculated for a particlar sample are placed into this property on each data</sci:help>
								<sci:value>NewProperties</sci:value>
							</sci:arg>
							<sci:arg name="IllegalCharacters" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>If given, this is a regular expression that is applied to property names to discover illegal characters.  In this case, the illegal characters are replaced with underscores, and the original property names and the new property names added to the global values PropertyCalculatorOriginalNames and PropertyCalculatorNewNames, respectively.  This gives you the mapping from the original name to the internal R names.</sci:help>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Fixed Length" type="PromotedGroupMemberType" required="false" visibility="nevershow" multi="false">
								<sci:help>If Convert Fingerprints To is given a fixed-length type, then this is the fixed-length.  Bits larger than this length are folded into this range using a mod operation.</sci:help>
								<sci:value>Fixed Length</sci:value>
							</sci:arg>
							<sci:arg name="RemoveCalculatedPropertiesInProperty" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Remove the properties listed in the particular property name</sci:help>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Mon May 26 06:56:16 2014</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>Calculate Properties</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>CalculatorNode</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{22FFFABF-758F-406F-976F-46E680B2CBFF}</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon</sci:help>
								<sci:value>Calculate Properties</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>9.2.0.9</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>1242 -95</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>This component is used to provide a general interface that can be promoted in Learners, and also used in Models.</sci:value>
								<sci:value>This component is used in subprotocols to provide a standard interface for Learners that can later be used to provide automatic calculation later in your learned models.

Typically, some of the parameters of this interface are promoted in the Learner.  Others are kept hidden, either because they are not needed, or because they are defaulted to appropriate values.

One it has initialized by the first data record, it sets the global property PointInfoText with a string that contains all the information you later need to re-initialize another Calculate Properties component in a saved model to the same state as it was in in the Learner.  To use this, you save the global PointInfoText on a parameter of the same name on the model component, then set the UseProperties parameter to the value PointInfoText.</sci:value>
								<sci:value>Generic Data</sci:value>
								<sci:value/>
								<sci:value>Generic Data</sci:value>
								<sci:value/>
								<sci:value>Generic Data</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>7</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Utilities\Subprotocol Utilities\Calculate Properties</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.PropertyFunctions.1">
						<sci:component name="Rename Properties" version="2">
							<sci:arg name="Original Property Names" type="PropertyNameType" required="true" visibility="visible" multi="true">
								<sci:help>An array of property names to rename. The new name will be the corresponding name in &lt;i&gt;New Property Names&lt;i&gt;.</sci:help>
								<sci:value>PHFP_2</sci:value>
								<sci:value>PHFP_3</sci:value>
								<sci:value>PHFP_4</sci:value>
								<sci:value>PHRFP_2</sci:value>
								<sci:value>PHRFP_3</sci:value>
								<sci:value>PHRFP_4</sci:value>
								<sci:value>PHPFP_2</sci:value>
								<sci:value>PHPFP_3</sci:value>
								<sci:value>PHPFP_4</sci:value>
								<sci:value>PHFC_2</sci:value>
								<sci:value>PHFC_3</sci:value>
								<sci:value>PHFC_4</sci:value>
								<sci:value>PHPFC_2</sci:value>
								<sci:value>PHPFC_3</sci:value>
								<sci:value>PHPFC_4</sci:value>
								<sci:value>PHRFC_2</sci:value>
								<sci:value>PHRFC_3</sci:value>
								<sci:value>PHRFC_4</sci:value>
								<sci:value>FCFC_6</sci:value>
								<sci:value>ECFC_6</sci:value>
								<sci:value>LCFC_6</sci:value>
								<sci:value>SCFC_6</sci:value>
								<sci:value>FPFC_6</sci:value>
								<sci:value>EPFC_6</sci:value>
								<sci:value>LPFC_6</sci:value>
								<sci:value>SPFC_6</sci:value>
								<sci:value>FEFC_6</sci:value>
								<sci:value>EEFC_6</sci:value>
								<sci:value>LEFC_6</sci:value>
								<sci:value>SEFC_6</sci:value>
								<sci:value>FHFC_6</sci:value>
								<sci:value>EHFC_6</sci:value>
								<sci:value>LHFC_6</sci:value>
								<sci:value>SHFC_6</sci:value>
								<sci:value>FCFP_6</sci:value>
								<sci:value>ECFP_6</sci:value>
								<sci:value>LCFP_6</sci:value>
								<sci:value>SCFP_6</sci:value>
								<sci:value>FPFP_6</sci:value>
								<sci:value>EPFP_6</sci:value>
								<sci:value>LPFP_6</sci:value>
								<sci:value>SPFP_6</sci:value>
								<sci:value>FEFP_6</sci:value>
								<sci:value>EEFP_6</sci:value>
								<sci:value>LEFP_6</sci:value>
								<sci:value>SEFP_6</sci:value>
								<sci:value>FHFP_6</sci:value>
								<sci:value>EHFP_6</sci:value>
								<sci:value>LHFP_6</sci:value>
								<sci:value>SHFP_6</sci:value>
							</sci:arg>
							<sci:arg name="New Property Names" type="PropertyNameType" required="true" visibility="visible" multi="true">
								<sci:help>An array of the new property names. The original name will be the corresponding name in &lt;i&gt;Original Property Names&lt;i&gt;.</sci:help>
								<sci:value>PHFP2</sci:value>
								<sci:value>PHFP3</sci:value>
								<sci:value>PHFP4</sci:value>
								<sci:value>PHRFP2</sci:value>
								<sci:value>PHRFP3</sci:value>
								<sci:value>PHRFP4</sci:value>
								<sci:value>PHPFP2</sci:value>
								<sci:value>PHPFP3</sci:value>
								<sci:value>PHPFP4</sci:value>
								<sci:value>PHFC2</sci:value>
								<sci:value>PHFC3</sci:value>
								<sci:value>PHFC4</sci:value>
								<sci:value>PHPFC2</sci:value>
								<sci:value>PHPFC3</sci:value>
								<sci:value>PHPFC4</sci:value>
								<sci:value>PHRFC2</sci:value>
								<sci:value>PHRFC3</sci:value>
								<sci:value>PHRFC4</sci:value>
								<sci:value>FCFC6</sci:value>
								<sci:value>ECFC6</sci:value>
								<sci:value>LCFC6</sci:value>
								<sci:value>SCFC6</sci:value>
								<sci:value>FPFC6</sci:value>
								<sci:value>EPFC6</sci:value>
								<sci:value>LPFC6</sci:value>
								<sci:value>SPFC6</sci:value>
								<sci:value>FEFC6</sci:value>
								<sci:value>EEFC6</sci:value>
								<sci:value>LEFC6</sci:value>
								<sci:value>SEFC6</sci:value>
								<sci:value>FHFC6</sci:value>
								<sci:value>EHFC6</sci:value>
								<sci:value>LHFC6</sci:value>
								<sci:value>SHFC6</sci:value>
								<sci:value>FCFP6</sci:value>
								<sci:value>ECFP6</sci:value>
								<sci:value>LCFP6</sci:value>
								<sci:value>SCFP6</sci:value>
								<sci:value>FPFP6</sci:value>
								<sci:value>EPFP6</sci:value>
								<sci:value>LPFP6</sci:value>
								<sci:value>SPFP6</sci:value>
								<sci:value>FEFP6</sci:value>
								<sci:value>EEFP6</sci:value>
								<sci:value>LEFP6</sci:value>
								<sci:value>SEFP6</sci:value>
								<sci:value>FHFP6</sci:value>
								<sci:value>EHFP6</sci:value>
								<sci:value>LHFP6</sci:value>
								<sci:value>SHFP6</sci:value>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:help>the action to perform</sci:help>
								<sci:value>RenameProperties</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Tue Feb 28 12:30:36 2017</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Destination&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>
#orig := Parameter(&apos;Original Property Names&apos;);
#new := Parameter(&apos;New Property Names&apos;);
if (numvalues(#orig) == 0 OR #orig[1] eq &quot;&quot; OR numvalues(#new) == 0 OR #new[1] eq &quot;&quot;) then
	&quot;&quot;;
else
  #display := &apos;Rename &apos; . #orig[1] . &apos; to &apos; . #new[1];
  if (numvalues(#orig) &gt; 1) then
    #display .= &apos;, ...&apos;;
  end if;
  #display;
end if;
</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol AutoLayout</sci:help>
								<sci:value>true</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>EXPRESSIONNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
								<sci:help>Component Revision</sci:help>
								<sci:value>100</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>SubProtocol</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolScale" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Scale</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>1530 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{04496ABE-C1D2-43D2-83D4-35AC9FC8D501}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Rename the specified properties</sci:value>
								<sci:value>&lt;p&gt;For each incoming data record, rename the properties found in the &lt;i&gt;Original Property Names&lt;/i&gt; list to the names provided in &lt;i&gt;New Property Names&lt;/i&gt;.

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To remove specified properties from each data record, use 
&lt;a href=&quot;javascript:DoLink(&apos;{C2ED35FF-5397-4877-AADB-10F1A15D60E2}&apos;)&quot;&gt;Remove Properties&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>With only the specified properties remaining</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>18.1.0.1376</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>By Ref</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Sticky Notes</sci:help>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>15</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Property Manipulators\Rename Properties</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:connectid from="17" to="18" type="true"/>
					<sci:connectid from="18" to="19" type="true"/>
					<sci:connectid from="19" to="6" type="true"/>
					<sci:connectid from="6" to="7" type="true"/>
					<sci:connectid from="7" to="15" type="true"/>
					<sci:version iVal="1"/>
				</sci:protocol>
			</sci:data>
			<sci:data object="SciTegic.RangeScreen.1">
				<sci:component name="Range Filter" version="2">
					<sci:arg name="List" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>A list of which data records to pass:
  e.g.,  1,3-5,7,10-11
     will pass the first, third, fourth, fifth and so on.</sci:help>
						<sci:value>23585000-800000000</sci:value>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Custom Error Message</sci:help>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Fri Dec 13 12:38:32 2002</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
						<sci:help>Automatically update the component display name when the &quot;List&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
						<sci:value>if (strlength(parameter(&apos;List&apos;, 2)) &gt; 0) then
	&quot;Filter range &quot; . parameter(&apos;List&apos;, 2);
else
	&quot;&quot;;
end if;</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>FILTERNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{0C71D911-BF35-4A1B-8B2C-B9A586BD39F3}</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Range Filter</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>1242 -470</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Passes data records within a specified range based on the order in which they arrive</sci:value>
						<sci:value>&lt;p&gt;Data records are numbered consecutively (from 1) as they arrive at the component.  The record numbers specified by &lt;i&gt;List&lt;/i&gt; are sent out the Pass port. Records not specified are sent out the Fail port.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;List&lt;/i&gt; items need to be entered as comma-separated values. &lt;i&gt;List&lt;/i&gt; can accept single item indices or ranges (such as &quot;1-5,7,9,13-15&quot;).&lt;/p&gt; 

</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value>Data records whose indices match the specified list</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value>Data records whose indices do not match the specified list</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>33</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Data Filters\Range Filter</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.Protocol.1">
				<sci:component name="Subprotocol" version="2">
					<sci:arg name="RunToCompletion" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - For Each Data Record&quot;, the subprotocol is re-initialized and executed in its entirety for each individual data record it processes.
&lt;p&gt;
When set to &quot;True - For Each Category&quot;, the data records are divided into categories based on the value of the Categorize Using parameter and then the subprotocol is re-initialized and executed in its entirety for each category of data records. When used in conjunction with &lt;i&gt;Parallel Processing Options&lt;/i&gt;, each category of data records will be sent to the remote server as part of one single batch.</sci:help>
						<sci:member>RunToCompletion Categorize Using</sci:member>
						<sci:legalval selected="true">False</sci:legalval>
						<sci:legalval>True - For Each Data Record</sci:legalval>
						<sci:legalval>True - For Each Category</sci:legalval>
					</sci:arg>
					<sci:arg name="RunToCompletion Categorize Using" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Required when RunToCompletion is set to &lt;i&gt;True - For Each Category&lt;/i&gt;, this parameter specifies the property or properties used to define the categories.</sci:help>
						<sci:validscript>SetInvalidDetails(&apos;This parameter is required when RunToCompletion is set to True - For Each Category&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
						<sci:enabledscript>SetDisabledDetails(&apos;To Enable, Set RunToCompletion to True - For Each Category&apos;);
Parameter(&apos;RunToCompletion&apos;) eq &apos;True - For Each Category&apos;;</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options" type="BoolType" required="false" visibility="visible" multi="false" expanded="true" uimpl="false">
						<sci:help>&lt;p&gt;
When set to True, this set of options allows the subprotocol to execute in parallel on one or more independent Pipeline Pilot servers, running locally or remotely.  Additional parameters control the number of data records to send in each process batch, the list of Pipeline Pilot servers to use, the number of protocol processes that can be executed on each server, and whether to preserve the order of the processed data records.
&lt;/p&gt;&lt;p&gt;
Use this option with care, since it will not increase throughput in all circumstances. Generally speaking, it yields improved performance when the parallelization benefits outweigh the data transfer overhead for the specified batch size.  As a rough guide, performance can be improved when each individual batch requires at least 10 seconds to execute, although this can be affected by the size of each data record.
&lt;/p&gt;&lt;p&gt;
When running the protocol with debugging, the subprotocol will provide debugging messages to detail each of the various steps of execution.  Also, components located within the parallel subprotocol will display their debugging messages as well.
&lt;/p&gt;&lt;p&gt;
For more information on the parallel subprotocol options, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_parallel_processing.htm&apos;)&quot;&gt;Parallel Processing Subprotocols&lt;/a&gt;.
&lt;/p&gt;
</sci:help>
						<sci:member>Parallel Processing Options Batch Size</sci:member>
						<sci:member>Parallel Processing Options Server</sci:member>
						<sci:member>Parallel Processing Options Preserve Order</sci:member>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Batch Size" type="LongType" required="true" visibility="visible" multi="false" uimpl="false">
						<sci:help>&lt;p&gt;The number of records to send to the remote server(s) for each subprotocol execution.  In general, performance is optimized when the amount of time required to process each batch is at least 10 seconds (note that this can vary depending on the characteristics of the remote server&apos;s hardware).  Use a batch size of -1 to pass all data in a single batch.&lt;/p&gt;
&lt;p&gt;When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - for each category&quot;, the batch sizes will be determined by the number of records in each individual category.  Therefore, the &lt;i&gt;Batch Size&lt;/i&gt; parameter is not applicable.</sci:help>
						<sci:enabledscript>#parallel := Parameter(&apos;Parallel Processing Options&apos;);
if (not #parallel) then
	SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
end if;
#parallel;</sci:enabledscript>
						<sci:value>4000</sci:value>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server" type="StringType" required="false" visibility="visible" multi="true" expanded="true" legalvalsenforced="false" uimpl="false">
						<sci:help>&lt;p&gt;
A comma-separated list of Pipeline Pilot servers on which to execute the parallel subprotocol.  The server names should be in the same format as the Pipeline Pilot Client&apos;s change server dialog (that is, server-name:port-number).
&lt;/p&gt;&lt;p&gt;
Specifying &lt;b&gt;localhost&lt;/b&gt; as a server will cause the subprotocol to use its own Pipeline Pilot server.  This can be useful on multi-CPU/multi-core systems (where the subprotocol jobs are spawned on the same machine) and Pipeline Pilot Linux clusters (where &apos;localhost&apos; requests spawning the subprotocol jobs on the same cluster).
&lt;/p&gt;</sci:help>
						<sci:member>Parallel Processing Options Server Processes</sci:member>
						<sci:member>Parallel Processing Options Server Run On Grid</sci:member>
						<sci:validscript>SetInvalidDetails(&apos;This parameter is required.&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:value>localhost</sci:value>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Processes" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>A comma-separated list of the maximum number of batches that can be simultaneously executed on each remote server.  The number of entries in this parameter must equal the number of servers. If &apos;*&apos; is specified as the number of processes, then that server will only launch as many batches as the administrator of the remote server has permitted.&lt;/br&gt;&lt;/br&gt;For non-Grid Engine job, the number of jobs will be limited to the value for the maximum number of simultaneous subprotocol jobs as defined in the Admin Console even if this value is higher than the value entered here or &apos;*&apos;.&lt;/br&gt;&lt;/br&gt;For Grid Engine jobs, the number of jobs will be limited to the value for the maximum number of simultaneous subprotocol grid jobs as defined in the Admin Console even if this value is higher than the value entered here or &apos;*&apos;.&lt;/br&gt;&lt;/br&gt;</sci:help>
						<sci:validscript>/* Server Processes must have the same number of comma separated entries as the Server parameter and must have a value*/
#processes := parameter();
expand(&apos;,&apos;, #processes);
#servers := parameter(&apos;Parallel Processing Options Server&apos;);
expand(&apos;,&apos;, #servers);

if (numvalues(#processes) == 0) then
	SetInvalidDetails(&apos;This parameter is required.&apos;);
else
	SetInvalidDetails(&apos;The number of server processes (&apos; . numvalues(#processes) . &apos;) must equal the number of servers (&apos; . numvalues(#servers) . &apos;).&apos;);
end if;
numvalues(#processes) &gt; 0 and numvalues(#processes) == numvalues(#servers);</sci:validscript>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:value>25</sci:value>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Run On Grid" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Run subprotocol on grid engine if available.  Note: If no grid engine is configured the subprotocol will still run even if this parameter is set to true.</sci:help>
						<sci:member>Parallel Processing Options Server Run On Grid Queue Name</sci:member>
						<sci:member>Parallel Processing Options Server Run On Grid Grid Options</sci:member>
						<sci:enabledscript>parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Run On Grid Queue Name" type="StringType" required="false" visibility="visible" multi="false" legalvalsenforced="false" uimpl="false">
						<sci:help>Select the queue name on the grid to submit jobs to. Leave blank to use default queue name.</sci:help>
						<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Run On Grid Grid Options" type="StringType" required="false" visibility="visible" multi="true" uimpl="false">
						<sci:help>&lt;p&gt;This is an array of command line options to send to the Grid engine submit command.&lt;/p&gt;
&lt;p&gt;If you just include one line, whatever you enter will be sent &quot;as is&quot; to the submission command.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Just sending options directly to command line - PBS&lt;/b&gt;
&lt;p&gt;-l procs=16 -l walltime=08:00:00 -A PROJECTID&lt;/p&gt;
&lt;/br&gt;
&lt;p&gt;There are a number of parameters that Pipeline Pilot will translate to the correct command line options for whichever supported Grid Engine you are using.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Supported parameters&lt;/b&gt;
&lt;p&gt;Account=&amp;lt;Project/Account name&amp;gt;&lt;/p&gt;
&lt;p&gt;Maximum Execution Time=&amp;lt;DD:MM:SS&amp;gt; - LSF ignores seconds&lt;/p&gt;
&lt;p&gt;Number of Cores=&amp;lt;16&amp;gt;&lt;/p&gt;
&lt;p&gt;Parallel Environment=&amp;lt;The Parallel Environment to use&amp;gt; - Only needed for SGE&lt;/p&gt;
&lt;p&gt;Other=&amp;lt;Additional Parameters sent directly to submit command line&amp;gt;&lt;/p&gt;</sci:help>
						<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Preserve Order" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Whether to preserve the order of the data as it enters and leaves the remote subprotocol.</sci:help>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="Tempfiles" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>&lt;p&gt;A comma-delimited list of global properties, each of which is automatically populated with the name of a file in the job&apos;s temporary folder, which always has a unique name.&lt;p/&gt;For each global name, an additional global is created (with the suffix &lt;i&gt;_Filename&lt;/i&gt;) that hold only the leaf file name of the temporary file.&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="DeclareLocal" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>&lt;p&gt;Lists a set of properties (without the @) to create on the global property list for this subprotocol. Separate property names with commas. Such properties can only be accessed within the scope of this subprotocol and its descendent subprotocols.&lt;p/&gt;

&lt;p&gt;Any global property not declared in this way is created on the top-level global property list and is accessible from all subprotocols, but breaks the encapsulation of the subprotocol and may collide with another property of the same name.&lt;/p&gt;

&lt;p&gt;Therefore, you should always declare a new global property in the &lt;i&gt;DeclareLocal&lt;/i&gt; parameter, to minimize the scope of the global property to the subprotocol where it is used.&lt;/p&gt;

&lt;p&gt;The example &lt;i&gt;DeclareLocal&lt;/i&gt; value below creates 3 global properties in the subprotocol scope. Note that you can initialize the declared global value with a scalar value using the &quot;:=&quot; syntax, as shown. You can surround text string values with quotes to aid clarity.&lt;/p&gt;
&lt;pre&gt;
    SubP_Counter := 0, SubP_NameHash, SubP_TitleText:=&quot;Sample 1&quot;
&lt;/pre&gt;
</sci:help>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="Component Name" type="StringType" required="true" visibility="visible" multi="false">
						<sci:metaproplist>
							<sci:mpropval name="SCI_PromotedFrom" type="StringType">
								<sci:value>Component Name</sci:value>
							</sci:mpropval>
							<sci:propval name="SCI_PromotionRenameRule">UsingParent</sci:propval>
						</sci:metaproplist>
						<sci:help>Name of the component which will process the data. You can give either a short name such as &quot;alogpmodel&quot;, or a fully-specified name such as &quot;myname/LearnedProperties/alogpmodel&quot;, or
evan a universal identifier (GUID) such as &quot;{ABCDDCBA-CC5A-4517-8D55-6BB4D53DE12E}&quot;.

If a name is given, the search is conducted starting on the user&apos;s tab, then the Protocols tab, then the Components tab.</sci:help>
						<sci:member>Use Parameters</sci:member>
						<sci:value>ChEMBL25 NET Prediction Model</sci:value>
					</sci:arg>
					<sci:arg name="Use Parameters" type="StringType" required="false" visibility="visible" multi="false" expanded="true">
						<sci:metaproplist>
							<sci:mpropval name="SCI_PromotedFrom" type="StringType">
								<sci:value>Use Parameters</sci:value>
							</sci:mpropval>
						</sci:metaproplist>
						<sci:help>Define whether to pass on the parameters from this component to the target component or to extract the parameter names and values from the Parameter Settings value.</sci:help>
						<sci:member>Parameter Settings</sci:member>
						<sci:legalval selected="true">From This Component</sci:legalval>
						<sci:legalval>From Parameter Settings</sci:legalval>
					</sci:arg>
					<sci:arg name="Parameter Settings" type="StringType" required="false" visibility="visible" multi="true">
						<sci:metaproplist>
							<sci:mpropval name="SCI_PromotedFrom" type="StringType">
								<sci:value>Parameter Settings</sci:value>
							</sci:mpropval>
						</sci:metaproplist>
						<sci:help>&lt;p&gt;A list of parameter settings to be applied to the target component, specified as an array. Each item in the array is one parameter setting, formatted as:&lt;/p&gt;
&lt;pre style=&quot;color:brown&quot;&gt;
&amp;lt;name&amp;gt;=&amp;lt;value&amp;gt;
&lt;/pre&gt;
Example:
&lt;pre style=&quot;color:brown&quot;&gt;
Property1=Total
Property2=NumSamples
Statistic=Mean
&lt;/pre&gt;
&lt;h5&gt;Parameter Arrays&lt;/h5&gt;
&lt;p&gt;To define an array parameter value, simply repeat the parameter name for each array item.
&lt;/p&gt;
&lt;pre style=&quot;color:brown&quot;&gt;
Catalog Number=6753
City List=Rome
City List=Athens
City List=Lisbon
&lt;/pre&gt;
&lt;h5&gt;Parameter Metadata&lt;/h5&gt;
&lt;p&gt;
You can also define metadata values for a parameter on the component. To do this, use a ^^ indicator to identify the parameter/metadata name pair. In the following example, the Measurement parameter has two metadata items, named Unit and Precision:
&lt;pre style=&quot;color:brown&quot;&gt;
Measurement=1000
Measurement^^Unit=Float
Measurement^^Precision=6
&lt;/pre&gt;
&lt;h5&gt;Parameter Group Series&lt;/h5&gt;
&lt;p&gt;
In general, a parameter value defined in the &lt;i&gt;Parameter Settings&lt;/i&gt; list should match a named parameter that exists on the target component for the shortcut. If there is no match, the parameter value is ignored. The only exception is for ordered series of parameter groups. In this case, a new parameter can be created using a parameter in the base parameter group (number 1) as a template. In this example, the target component includes the following parameter group:
&lt;/p&gt;
&lt;pre style=&quot;color:brown&quot;&gt;
List 1
List 1 Language
List 1 Format
&lt;/pre&gt;
The parameter list for the shortcut component might be:
&lt;pre style=&quot;color:brown&quot;&gt;
List 1 Language=English
List 1 Format=Left
List 2=
List 2 Language=Spanish
List 2 Format=Flow
List 3=
List 3 Language=French
List 3 Format=Center
&lt;/pre&gt;
&lt;p&gt;The first 2 items above simply define values for existing parameters in the base parameter group. The remaining items define two new parameter groups (group2 and group 3) with their values. 
&lt;/p&gt;&lt;p&gt;
You could also define metadata on the new parameters:
&lt;/p&gt;
&lt;pre style=&quot;color:brown&quot;&gt;
List 2=
List 2^^Filename=esp.txt
List 2 Language=Spanish
List 2 Format=Flow
List 2 Format^^Style=Bold
&lt;/pre&gt;</sci:help>
						<sci:enabledscript>SetDisabledDetails(
	       &apos;To enable &apos;.ParameterName().&apos;, set Use Parameters to &quot;From Parameter Settings&quot;&apos;);
	Parameter(&apos;Use Parameters&apos;) eq &apos;From Parameter Settings&apos;;</sci:enabledscript>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Custom Error Message</sci:help>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>Assess</sci:value>
					</sci:arg>
					<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol AutoLayout</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>ComponentNode</sci:value>
					</sci:arg>
					<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
						<sci:help>Component Revision</sci:help>
						<sci:value>790</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{17001C74-63CE-4B4B-B37C-F0EAA19CE4AA}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>1530 -470</sci:value>
					</sci:arg>
					<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>By Ref</sci:help>
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Builds subprotocols in Pipeline Pilot.</sci:value>
						<sci:value>&lt;p&gt;
Use a subprotocol to collapse one or more components into a single item. Open 
a subprotocol to view or edit its contents. 
&lt;/p&gt;&lt;p&gt;
To define input and output ports, display 
icon, and parameter settings, right-click and select Edit. You can save subprotocols and reuse them. 
For more information, see the User Guide help for &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_overview.htm&apos;)&quot;&gt;Subprotocols 
Overview&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;
For more information on the parallel subprotocol options, see 
&lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_parallel_processing.htm&apos;)&quot;&gt;Parallel 
Processing Subprotocols&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;
Tip: Any component can be made into a shortcut, 
so that the latest version is always used. For more information, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/shortcuts.htm&apos;)&quot;&gt;Creating 
Shortcuts&lt;/a&gt;.
&lt;/p&gt;</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value>Records passing out of any unconnected pass ports of components inside the subprotocol</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value>Records passing out of any unconnected fail ports of components inside the subprotocol</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>17.2.0.1267</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Sticky Notes</sci:help>
					</sci:arg>
					<sci:arg name="ProtocolScale2" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Scale</sci:help>
						<sci:value>100</sci:value>
					</sci:arg>
					<sci:arg name="Protocol Options" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Options</sci:help>
						<sci:legalval>Owner Access Only</sci:legalval>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/coreutils</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Thu Sep 15 15:57:54 2016</sci:value>
					</sci:arg>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>6</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Utilities\Subprotocol Utilities\Subprotocol</sci:value>
					</sci:arg>
				</sci:component>
				<sci:protocol>
					<sci:data object="SciTegic.EvaluateExpression.1">
						<sci:component name="Custom Manipulator (PilotScript)" version="2">
							<sci:arg name="Expression" type="ExpressionType" required="true" visibility="visible" multi="false" expanded="true" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
								<sci:help>Expression (or list of expressions separated by semi-colons) to evaluate.</sci:help>
								<sci:member>Initial Expression</sci:member>
								<sci:member>Final Expression</sci:member>
								<sci:member>Keep Calculated Properties</sci:member>
								<sci:value>@SuppressRVersionWarning  := true;</sci:value>
							</sci:arg>
							<sci:arg name="Initial Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
								<sci:help>&lt;p&gt;
This expression is executed only the first time data passes into the component.
&lt;p/&gt; 
Since there is no data available at initialization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
							</sci:arg>
							<sci:arg name="Final Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
								<sci:help>&lt;p&gt;
This expression is executed only at finalization (after the last data passes out of the component).
&lt;p/&gt; 
Since there is no data available at finalization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
							</sci:arg>
							<sci:arg name="Keep Calculated Properties" type="BoolType" required="true" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
								<sci:help>Adds any properties calculated in this component to a data record&apos;s property list.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval>ComponentTakesInput</sci:legalval>
								<sci:legalval>ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="Do Screen" type="BoolType" required="false" visibility="nevershow" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
								<sci:help>When TRUE, controls which exit port is used for
each data record by evaluating the final expression
(or only one) listed in the &quot;Expression&quot; parameter.
   -Pass (green) port when expression true
   -Fail (red) port when expression false</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="ExpressionVersion" type="LongType" required="false" visibility="nevershow" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
								<sci:help>Version of expression parser to use.</sci:help>
								<sci:value>2</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Mon Jan 21 09:55:43 2008</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Expression&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>#displayName := trim(Parameter(&apos;Expression&apos;, 2));
if(strlength(#displayName) &gt; 0) then	
	/* Find the first line break */
	#nl := FindSubstring(#displayName, &quot;\r&quot;);
	if #nl &lt;= 0 then
		#nl := FindSubstring(#displayName, &quot;\n&quot;);
	end if;

	/* Keep the first line only */
	if (#nl &gt; 0) then
		StrErase(#displayName, #nl);
	end if;
	
	#displayName;
else
	&quot;&quot;;
end if;</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>Custom Manipulator (PilotScript)</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>EXPRESSIONNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{0995D675-7EE2-432C-95DF-E91C14052B22}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>90 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Applies a PilotScript expression to each data record
</sci:value>
								<sci:value>&lt;p&gt;PilotScript is the native scripting language in Pipeline Pilot.  It is based on PL/SQL and allows you to query or alter the properties on data records.  For example, the expression:

&lt;blockquote&gt;
&lt;code&gt;A := 10;&lt;/code&gt;
&lt;/blockquote&gt;
creates a property named &quot;A&quot; and sets the value to &quot;10&quot;.&lt;/p&gt;

&lt;p&gt;For each incoming data record the PilotScript statements in &lt;i&gt;Expression&lt;/i&gt; are evaluated.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To initialize global variables such as counters, use &lt;i&gt;Initial Expression&lt;/i&gt;.&lt;/li&gt; 
&lt;li&gt;To clean up global variables or calculate final results use &lt;i&gt;Final Expression&lt;/i&gt;.&lt;/li&gt;
&lt;li&gt;Parameters on Custom Manipulators do not become global variables that can be accessed via &lt;i&gt;@ParameterName&lt;/i&gt; syntax.  They must be accessed by using the &lt;i&gt;Parameter(&apos;ParameterName&apos;)&lt;/i&gt; function or by using token substitution via &lt;i&gt;$(ParameterName)&lt;/i&gt; syntax.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For more information on PilotScript, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/pscript/pscript_overview.htm&apos;)&quot;&gt;PilotScript Overview&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To use PilotScript to filter data records use &lt;a href=&quot;javascript:DoLink(&apos;{DD58ECD1-516F-48FE-A5DB-8328AED680F2}&apos;)&quot;&gt;Custom Filter (PilotScript)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>7.0.0.35</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>19</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Property Manipulators\Custom Manipulator (PilotScript)</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.MDLSDReader.1">
						<sci:component name="SD Reader" version="2">
							<sci:arg name="Source" type="URLType" required="true" visibility="visible" multi="false" expanded="true">
								<sci:help>The file or URL source to read</sci:help>
								<sci:member>Maximum</sci:member>
								<sci:member>SourceTag</sci:member>
								<sci:member>Keep Properties</sci:member>
								<sci:member>UTF-8 Auto Detect</sci:member>
								<sci:value>$(UserDir)/PP/ProtdescNET.sd.gz</sci:value>
							</sci:arg>
							<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
								<sci:help>The maximum number of data records to read (all if value is empty)</sci:help>
							</sci:arg>
							<sci:arg name="SourceTag" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>&lt;p&gt;The type of tag to create to identify the source of data records. A property called 
&lt;b&gt;SourceTag&lt;/b&gt; is created and holds the value indicated.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;None&lt;/b&gt;: 
No SourceTag property is created and any existing ones are removed.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Filename&lt;/b&gt;: 
The name of the file read.&lt;/li&gt;&lt;li&gt;&lt;b&gt;FilenameAndExtension&lt;/b&gt;: The name of the 
file read with its file extension.&lt;/li&gt;&lt;li&gt;&lt;b&gt;FullFilename&lt;/b&gt;: The name of the 
file read, including the directory path.&lt;/li&gt;&lt;li&gt;&lt;b&gt;ZipFilename&lt;/b&gt;: When reading 
a compressed zip file, the filename within the compressed archive.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Number&lt;/b&gt;: 
When multiple files are read in this component, they are numbered 1,2,3...&lt;/li&gt;&lt;li&gt;&lt;b&gt;Letter&lt;/b&gt;: 
When multiple files are read in this component, they are lettered A, B, C...&lt;/li&gt;&lt;li&gt;&lt;b&gt;KeepCurrent&lt;/b&gt;: 
Keeps the current value of SourceTag.&lt;/li&gt;&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">None</sci:legalval>
								<sci:legalval>Filename</sci:legalval>
								<sci:legalval>FilenameAndExtension</sci:legalval>
								<sci:legalval>FullFilename</sci:legalval>
								<sci:legalval>ZipFilename</sci:legalval>
								<sci:legalval>Number</sci:legalval>
								<sci:legalval>Letter</sci:legalval>
								<sci:legalval>KeepCurrent</sci:legalval>
							</sci:arg>
							<sci:arg name="Keep Properties" type="PropertyPreviewType" required="false" visibility="visible" multi="false">
								<sci:help>A list of properties the reader should retain for each data record that is output. If a value is not defined, retains all properties. If the parameter contains the value &quot;-&quot; (minus sign), properties are not retained.</sci:help>
							</sci:arg>
							<sci:arg name="UTF-8 Auto Detect" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>&lt;p&gt;UTF-8 is a type of character encoding used to represent international characters with multiple bytes whereas basic Latin characters remain as a single byte.  Files can be stored with a Byte Order Mark (BOM) to indicate that the type of character encoding.&lt;/p&gt;
&lt;p&gt;When reading files that do not have a BOM, this parameter allows the reader to attempt to automatically detect UTF-8 encodings and convert as needed.  However, be aware that automatic detection is not always reliable.  In some cases, valid text stored in different character encodings can appear to be valid UTF-8.  In these cases, the automatic detection will result in garbled text.  When this occurs, you can consider using the &lt;a href=&quot;javascript:DoLink(&apos;{B0B1B56C-3DF6-444C-BB78-B43211188F63}&apos;)&quot;&gt;Binary Reader&lt;/a&gt; to read the file, then converting using the Pilotscript function &lt;b&gt;ConvertBytesToString&lt;/b&gt;&lt;/p&gt;</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Contains less commonly used parameters</sci:help>
								<sci:member>ReadProperties</sci:member>
								<sci:member>PutNameInProperty</sci:member>
								<sci:member>ReadQueryInfo</sci:member>
								<sci:member>PutCommentInProperty</sci:member>
								<sci:member>SD Format Options</sci:member>
								<sci:member>Global Templates</sci:member>
							</sci:arg>
							<sci:arg name="SD Format Options" type="StringType" required="false" visibility="visible" multi="true">
								<sci:help>&lt;p&gt;Options available for the SD Reader:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Properties Can Contain $$$$:&lt;/b&gt;  By the CTFile standard, a property can contain a &apos;$$$$&apos;-line.  
Properties or data field values are terminated by a blank line.  Only then will the &apos;$$$$&apos;-line 
terminate the full data block.  Setting this option off will terminate the data block upon any read of 
a &apos;$$$$&apos;-line.  This option is available to provide compatibility with some 3rd Party SD files.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;One-space Lines Terminate Properties:&lt;/b&gt;  By the CTFile standard, properties or data fields values are 
terminated by a blank line. Selecting this option will terminate the data block when encountering a line 
containing a space as the only character in the line.  This option is available to provide compatibility 
with some 3rd Party SD files.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Unwrap Long Property Lines:&lt;/b&gt;  By the CTFile standard, lines in property fields cannot exceed 200 characters.  When this option is selected and a property line of exactly 200 characters is found, the newline character will be ignored and property string will continue on the next line.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Read Unknown Stereo Parity:&lt;/b&gt;  When selected, the SD Reader will use the &apos;Atom Parity&apos; value (parity of 
&apos;3&apos;) to mark unknown stereo centers in 3D mol files.  This will leave these atoms marked as 
&apos;unknown stereo&apos; and will not calculate the stereo from the coordinates.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Process Complex Data Header Lines:&lt;/b&gt; Data header lines are the lines in the SD format that precede the actual data. They can contain the data field name (enclosed in angular brackets &lt;&gt;), the data field number (as DTn), the external registry number (enclosed in parentheses), and other optional information. When this parameter is set to False, only the data field name is parsed and used to set the corresponding property name. All the other information in the line is ignored. When the parameter is set to true, all the information is parsed. The property name is set from either the field name in &lt;&gt; or the DTn. If both are present the field name takes priority and the DTn number is saved as an additional property named &lt;b&gt;FieldName#DTn&lt;/b&gt;. The external registry number is saved as &lt;b&gt;FieldName#ExtRegNum&lt;/b&gt; and any other information is saved as &lt;b&gt;FieldName#OtherDataFieldInfo&lt;/b&gt;. When the molecules are written to an SD file, the data header lines are reconstructed from these properties. The default state of this parameter is False, as parsing, preserving, and eventually writing all the information in the data header lines can be costly, specially for SD files with many data fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Convert From H2 And H+ Atom Types:&lt;/b&gt; &apos;H2&apos; and &apos;H+&apos; are two non-standard element types that can be assigned to atoms by the BIOVIA Draw sketcher. They represent unattached Hydrogen (a Hydrogen molecule) and charged Hydrogen (a proton), respectively. When this parameter is selected, these atom types are converted to standard hydrogen atoms upon reading, with charges of 0 for H2 and +1 for H+. Otherwise, these atoms are read and perceived as unknown atom types, with &apos;H2&apos; and &apos;H+&apos; as the atom labels.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Convert Radicals To Pi Systems:&lt;/b&gt; When selected, pi bonds will be perceived between adjacent atoms marked with radicals and any adjacent metal atom.  Once pi bonds are perceived, subsequent exports will represent the pi bonds using the V3000 format and one-to-many coordination bonds (type 9) unless the writer&apos;s &lt;i&gt;Convert Pi Systems To Radicals&lt;/i&gt; option is used to convert the pi systems back. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;Convert GEN+DAT to Polymer Repeat Units:&lt;/b&gt; When selected, this option will automatically convert input GEN sgroups with linked DAT sgroups having the special fieldname of &apos;rc&apos; and numeric or numeric range data internally into polymer repeat sgroups.  This usage is a special type of NONS (Non-Specific Structure) convention that was prototyped in previous releases.  Disabling this conversion will have a higher likelihood of producing a structure that can be registered into Direct databases. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;Always Keep Enhanced Stereo:&lt;/b&gt; Preserves any enhanced stereo collections that are read in from V3000 MOL file.  When disabled, stereo structures will be checked to see if they can be represented more simply using only the Chiral Flag.  That is, structures with only ABS centers can be represented without enhanced stereo by setting the Chiral Flag on and structures with all centers in a single AND group can be represented without enhanced stereo by setting the Chiral Flag off.  Enhanced stereo collections that do not fit into the above cases are always preserved.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">Properties Can Contain $$$$</sci:legalval>
								<sci:legalval>One-space Lines Terminate Properties</sci:legalval>
								<sci:legalval selected="true">Unwrap Long Property Lines</sci:legalval>
								<sci:legalval>Read Unknown Stereo Parity</sci:legalval>
								<sci:legalval>Process Complex Data Header Lines</sci:legalval>
								<sci:legalval selected="true">Convert From H2 And H+ Atom Types</sci:legalval>
								<sci:legalval>Convert Radicals To Pi Systems</sci:legalval>
								<sci:legalval selected="true">Convert GEN+DAT to Polymer Repeat Units</sci:legalval>
								<sci:legalval>Always Keep Enhanced Stereo</sci:legalval>
							</sci:arg>
							<sci:arg name="ReadProperties" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Select True to read the properties for each molecule (in addition to the structures)</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="ReadQueryInfo" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If properties starting with &quot;QueryInfo&quot; are present, use them to set up query information on the atoms and bonds. (This is how, for example, SMARTS query information can be preserved when writing to an SD format file.) For molecules saved in MOL/SD format, this information only contains information that cannot be written out in the connection table.</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="PutNameInProperty" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>What to call the property that holds the name of each molecule</sci:help>
								<sci:value>Name</sci:value>
							</sci:arg>
							<sci:arg name="PutCommentInProperty" type="StringType" required="false" visibility="visible" multi="false" expanded="true">
								<sci:help>What to call the property that holds the comment associated with each molecule</sci:help>
							</sci:arg>
							<sci:arg name="Global Templates" type="URLType" required="false" visibility="visible" multi="false">
								<sci:help>V3000 SD or MOL files containing template definitions for amino acid, nucleic acid or other residues or monomers. These templates can then be refered to by molecules read by the SD reader.&lt;p&gt;
The default template file included in the Chemistry collection, &lt;i&gt;data\Direct\Direct_templates.mol&lt;/i&gt; contains definitions for 22 amino acids and 8 DNA and RNA templates.</sci:help>
								<sci:value>data\HELM\SCSRtemplates.mol</sci:value>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval>ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="HasConvertPiSystemOption" type="BoolType" required="false" visibility="nevershow" multi="false" legalvalsenforced="false">
								<sci:help>Hidden flag specifying the presence of the &quot;Convert Radicals To Pi Systems&quot; option.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="AllowUnknownDoubleBondsFromCoordinates" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>According to the CTfile specifications, the cis/trans character of double bonds with bond stereo set to zero is determined from the coordinates. This parameter controls whether or not to assign unknown bond stereo to double bonds for which the stereo could not be determined from the coordinates, either because there are no coordinates or because of colinearity issues.  When the parameter is set to False and the stereo could not be determined, no specific stereo configuration is assigned to the double bond, but it is not marked as unknown stereo.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/chemistry</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Wed Apr 06 11:41:13 2016</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>SD Reader</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>DOCUMENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{CA65B896-4FE6-4E3A-B884-DC16B53B8D26}</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>SD Reader</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>90 -470</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Reads MOL (molecule CTAB) files and SD (structured data) files</sci:value>
								<sci:value>&lt;p&gt;Creates a molecular data record for each molecule represented in the &lt;i&gt;Source&lt;/i&gt; 
data file.  All properties contained in the file are read into the data records.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;p&gt;&lt;ul&gt;&lt;li&gt;This 
component can also read zipped (.zip) and URL-based files.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;See 
Also:&lt;/b&gt;&lt;p&gt;&lt;ul&gt;&lt;li&gt;To write files in MOL or SD format, use the &lt;a href=&quot;javascript:DoLink(&apos;{DC8EE7B0-0620-42FE-944C-B4CD1E79480E}&apos;)&quot;&gt;SD 
Writer&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;To convert a molecule to and from between text properties in CTAB 
format, use &lt;a href=&quot;javascript:DoLink(&apos;{E622FBD9-9FA9-451A-A102-1800B5F28B6D}&apos;)&quot;&gt;Molecule 
to CTAB&lt;/a&gt; and &lt;a href=&quot;javascript:DoLink(&apos;{7D354B65-DDD8-4EA4-83A7-21501A8A6852}&apos;)&quot;&gt;Molecule 
from CTAB&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Other related CTFile format file readers include &lt;a href=&quot;javascript:DoLink(&apos;{169AB4E5-A470-477B-AA65-50464411036C}&apos;)&quot;&gt;RG 
Reader&lt;/a&gt;, &lt;a href=&quot;javascript:DoLink(&apos;{036731AA-0015-4606-9750-7D9D020F21C8}&apos;)&quot;&gt;RXN 
Reader&lt;/a&gt; and &lt;a href=&quot;javascript:DoLink(&apos;{55431CCB-06EA-4741-B95B-633C877E3E9B}&apos;)&quot;&gt;RD 
Reader&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt;</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
								<sci:value>Molecule</sci:value>
								<sci:value>Data fields in the SD file will be added to the property fields</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>17.1.0.59</sci:value>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>20</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Chemistry\Data Access and Manipulation\Readers\SD Reader</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.PropertyFunctions.1">
						<sci:component name="Keep Properties" version="2">
							<sci:arg name="PropertyList" type="PropertyNameType" required="true" visibility="visible" multi="true">
								<sci:help>The list of property names to keep</sci:help>
								<sci:member>RenameList</sci:member>
								<sci:value>accession</sci:value>
								<sci:value>Num_H_Donors</sci:value>
								<sci:value>Num_RotatableBonds</sci:value>
								<sci:value>Num_Atoms</sci:value>
								<sci:value>Molecular_Solubility</sci:value>
								<sci:value>Molecular_SurfaceArea</sci:value>
								<sci:value>MDLPublicKeys</sci:value>
								<sci:value>MDL2DKeys960</sci:value>
								<sci:value>PHPFC2</sci:value>
								<sci:value>PHRFC2</sci:value>
								<sci:value>SCFC6</sci:value>
								<sci:value>G4CompositionTransitionDistribution</sci:value>
								<sci:value>G9TotalAminoAcidProperties</sci:value>
								<sci:value>Aligned_FASGAI</sci:value>
								<sci:value>ACC_ISA_ECI</sci:value>
								<sci:value>ACC_VARIMAX</sci:value>
								<sci:value>ACC_ProtFP_hash</sci:value>
								<sci:value>ACC_ProtFP_numerical</sci:value>
								<sci:value>ACC_DPPS</sci:value>
								<sci:value>ACC_HESH</sci:value>
								<sci:value>ACC_SVHEHS</sci:value>
								<sci:value>ACC_VSTPV</sci:value>
							</sci:arg>
							<sci:arg name="RenameList" type="PropertyNameType" required="false" visibility="visible" multi="true">
								<sci:help>If provided, it causes the properties given in PropertyList to be 
renamed to the corresponding name in this list.  If not provided, then no properties are renamed.</sci:help>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:help>the action to perform</sci:help>
								<sci:value>Keep</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Wed Sep 11 09:52:41 2019</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Destination&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>#propertyList := Parameter(&apos;PropertyList&apos;);
#displayName := &apos;&apos;;
for #i in 1 .. numvalues(#propertyList) loop
  #prop := trim(#propertyList[#i]);
  if (strlength(#prop) &gt; 0) then
    if (strlength(#displayName) &gt; 0) then
	  #displayName .= &apos;, &apos;;
	end if;
    #displayName .= #prop;
  end if;
end loop;
if(strlength(#displayName) &gt; 0) then		
	&apos;Keep &apos; . #displayName;
else
	&quot;&quot;;
end if;</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol AutoLayout</sci:help>
								<sci:value>true</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>EXPRESSIONNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
								<sci:help>Component Revision</sci:help>
								<sci:value>100</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>SubProtocol</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolScale" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Scale</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>378 -470</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{456195EF-9708-4367-B3DD-21EBF3796604}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Keeps only the specified properties</sci:value>
								<sci:value>&lt;p&gt;For each incoming data record, retains only the properties found in the list of property names specified by &lt;i&gt;PropertyList&lt;/i&gt;.  All other properties are removed.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To remove specified properties from each data record, use 
&lt;a href=&quot;javascript:DoLink(&apos;{C2ED35FF-5397-4877-AADB-10F1A15D60E2}&apos;)&quot;&gt;Remove Properties&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>With only the specified properties remaining</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>18.1.100.11</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>By Ref</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Sticky Notes</sci:help>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>21</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Property Manipulators\Keep Properties</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.DataCacheIO.1">
						<sci:component name="Cache Writer" version="2">
							<sci:arg name="CacheID" type="StringType" required="true" visibility="visible" multi="false" expanded="true">
								<sci:help>The name of the cache to write, for example: A, 1234 or MyCache.  To create a temporary cacheID use the &lt;a href=&quot;javascript:DoLink(&apos;{B91EE521-C028-46BE-89A4-51CDE9877589}&apos;)&quot;&gt;Create Temporary CacheIDs&lt;/a&gt; component.
</sci:help>
								<sci:member>Maximum</sci:member>
								<sci:member>Append</sci:member>
								<sci:member>Scope</sci:member>
								<sci:value>protdesc</sci:value>
							</sci:arg>
							<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
								<sci:help>The maximum number of data records to write to the cache.</sci:help>
							</sci:arg>
							<sci:arg name="Append" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>If True, append to a currently-existing cache if possible; if False, clear any current contents of the cache</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Scope" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The scope of the cache determines the length of time the cache exists and 
the visibility of the cache to other jobs and users. &lt;I&gt;Job Only&lt;/I&gt; creates a cache that is visible
only to components in the currently-running protocol, and which is deleted when the protocol finishes.
&lt;I&gt;User Only&lt;/I&gt; creates a cache that is visible to components in any protocol a particular user runs;  
&lt;I&gt;All Users&lt;/I&gt; creates a cache that is visible to any user on the Pipeline Pilot server. 
&lt;P&gt;Each scope has its own namespace, so you have to 
specify both the &lt;i&gt;CacheID&lt;/i&gt; and the &lt;i&gt;Scope&lt;/i&gt; to fully determine a particular cache.&lt;/P&gt;
&lt;P&gt;Since the caches created with scopes &lt;I&gt;User Only&lt;/I&gt; and &lt;I&gt;All Users&lt;/I&gt;
may be accessed by multiple jobs, you should use caution, as problems may arise if two jobs try to write to 
the same shared cache at once. Also, to save disk space, you are responsible for deleting these caches
when finished, using the &lt;I&gt;Delete Cache&lt;/I&gt; component. &lt;/P&gt;
			</sci:help>
								<sci:legalval selected="true">Job Only</sci:legalval>
								<sci:legalval>User Only</sci:legalval>
								<sci:legalval>All Users</sci:legalval>
							</sci:arg>
							<sci:arg name="Create Index for Join" type="BoolType" required="false" visibility="visible" multi="false" expanded="true">
								<sci:help>If set to True, creates an index for the cache that can be used by subsequent &lt;a href=&quot;javascript:DoLink(&apos;{BDEEEC41-E62B-4FDE-B0D0-8B9C96CA2497}&apos;)&quot;&gt;Join Data from Cache&lt;/a&gt; components.  As long as the later Join components use identical settings, the created index will greatly improve the performance of the join.  When set to true, you will also need to update &lt;i&gt;JoinUsing&lt;/i&gt;, &lt;i&gt;JoinUsingListType&lt;/i&gt;, &lt;i&gt;JoinPropertyType&lt;/i&gt;, and &lt;i&gt;IgnoreCase&lt;/i&gt; to match your Join component.</sci:help>
								<sci:member>JoinUsing</sci:member>
								<sci:member>IgnoreCase</sci:member>
								<sci:member>JoinPropertyType</sci:member>
								<sci:member>JoinUsingListType</sci:member>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="JoinUsing" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>The name of the property or properties to index for use by &lt;a href=&quot;javascript:DoLink(&apos;{BDEEEC41-E62B-4FDE-B0D0-8B9C96CA2497}&apos;)&quot;&gt;Join Data from Cache&lt;/a&gt; components.  This parameter must match the identically named parameter on the Join component in order to benefit from the created index.</sci:help>
								<sci:validscript>SetInvalidDetails(&apos;This parameter is required.&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
								<sci:enabledscript>Parameter(&apos;Create Index for Join&apos;);</sci:enabledscript>
								<sci:value>accession</sci:value>
							</sci:arg>
							<sci:arg name="JoinUsingListType" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>&lt;p&gt;Indicates how &lt;i&gt;JoinUsing&lt;/i&gt; properties are interpreted for creating a cache index when more than one property is listed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;UseFirstDefinedValue&lt;/i&gt;: The join will use only the first property in the list with a defined value for a record.
&lt;li&gt;&lt;i&gt;UseAllValues&lt;/i&gt;: The join will use the concatentation of the values of all properties listed; a match occurs only when records share the same value for all the properties.
&lt;/ul&gt;
&lt;p&gt;This parameter must match the identically named parameter on the Join component in order to benefit from the created index.&lt;/p&gt;</sci:help>
								<sci:enabledscript>Parameter(&apos;Create Index for Join&apos;);</sci:enabledscript>
								<sci:legalval>UseFirstDefinedValue</sci:legalval>
								<sci:legalval selected="true">UseAllValues</sci:legalval>
							</sci:arg>
							<sci:arg name="JoinPropertyType" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>The data type of the &lt;i&gt;JoinUsing&lt;/i&gt; property. This parameter must match the identically named parameter on the Join component in order to benefit from the created index.</sci:help>
								<sci:enabledscript>Parameter(&apos;Create Index for Join&apos;);</sci:enabledscript>
								<sci:legalval>IsNumeric</sci:legalval>
								<sci:legalval selected="true">IsText</sci:legalval>
								<sci:legalval>IsDate</sci:legalval>
							</sci:arg>
							<sci:arg name="IgnoreCase" type="BoolType" required="false" visibility="visible" multi="false">
								<sci:help>Consider lower-case and upper-case letters as equivalent when determining the identity of &lt;i&gt;JoinUsing&lt;/i&gt; property values.  This parameter must match the identically named parameter on the Join component in order to benefit from the created index.</sci:help>
								<sci:enabledscript>Parameter(&apos;Create Index for Join&apos;);</sci:enabledscript>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false">
								<sci:help>Additional parameters to control the component behavior.</sci:help>
								<sci:member>Write Globals</sci:member>
								<sci:member>Enable Compression</sci:member>
							</sci:arg>
							<sci:arg name="Write Globals" type="StringType" required="false" visibility="visible" multi="true">
								<sci:help>&lt;p&gt;Specifies which globals, if any, are written into the cache.&lt;/p&gt;
&lt;p&gt;The value is an array of top-level global names or global nodes specified using XPath notation. Note that node names should end with a forward slash (/).&lt;/p&gt;</sci:help>
							</sci:arg>
							<sci:arg name="Enable Compression" type="BoolType" required="false" visibility="visible" multi="false" expanded="true" legalvalsenforced="false">
								<sci:help>&lt;p&gt;Specifies if compression of the data should be enabled whenever available.&lt;/p&gt;
&lt;b&gt;Warning:&lt;b&gt; Due to the resulting larger size of the cache files when using uncompressed files, this option should typically only be used for smaller data sets.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval>ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="CacheCategory" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The cache type, that determines its folder location within the job.
               </sci:help>
							</sci:arg>
							<sci:arg name="Mode" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:help>Specifies the action of this component:

 - Writer: The component writes data records to a new cache.
 - Reader: The component reads data records from a pre-existing, completed cache.
 - Writer/Reader: The component writes data out to a cache and then reads it in again to generate new records.
               </sci:help>
								<sci:legalval selected="true">Writer</sci:legalval>
								<sci:legalval>Reader</sci:legalval>
								<sci:legalval>Writer/Reader</sci:legalval>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Wed Oct 03 14:48:02 2012</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>Cache Writer</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>666 -470</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>DATABASENODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{674E3781-33EA-42BB-9099-49CB4C3D08E6}</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>Cache Writer</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Writes data records to a named cache</sci:value>
								<sci:value>&lt;p&gt;A data cache is place where you can temporarily store data records without losing information.  Use &lt;i&gt;CacheID&lt;/i&gt; to specify the name of the cache.  A cache can contain records of different types.&lt;/p&gt;

&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To avoid clashes with other cache names, you can use the &lt;a href=&quot;javascript:DoLink(&apos;{B91EE521-C028-46BE-89A4-51CDE9877589}&apos;)&quot;&gt;Create Temporary CacheIDs&lt;/a&gt; component to obtain a global with a unique cacheID.  For example, you could have a temporary cacheID identified by MYCACHE and set &lt;i&gt;CacheID&lt;/i&gt; to $(MYCACHE).&lt;/li&gt;
&lt;li&gt;Typically, a cache is scoped to only be visible to component in the currently-running job.  To create caches that outlive a job, and may be seen by other users, use the &lt;I&gt;Scope&lt;/I&gt; parameter.&lt;/li&gt;
&lt;li&gt;Caches can be used with the &lt;a href=&quot;javascript:DoLink(&apos;{BDEEEC41-E62B-4FDE-B0D0-8B9C96CA2497}&apos;)&quot;&gt;Join Data from Cache&lt;/a&gt; component to add properties to a separate data stream.  To improve the performance of the join, the cache can be indexed during creation by using the &lt;i&gt;Create Index for Join&lt;/i&gt; parameter.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To retrieve data from a cache, use &lt;a href=&quot;javascript:DoLink(&apos;{704E3781-33EA-42BB-9099-05B44C3D08E6}&apos;)&quot;&gt;Cache Reader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To join against a cache, use &lt;a href=&quot;javascript:DoLink(&apos;{BDEEEC41-E62B-4FDE-B0D0-8B9C96CA2497}&apos;)&quot;&gt;Join Data from Cache&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To delete a cache, use &lt;a href=&quot;javascript:DoLink(&apos;{704E3781-33EA-42BB-9088-05B44C3D08E6}&apos;)&quot;&gt;Delete Cache&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>None</sci:value>
								<sci:value/>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>%VERSION 3%</sci:value>
								<sci:value>1029 -489 305 176</sci:value>
								<sci:value>255 255 0</sci:value>
								<sci:value>Protein Descriptors</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>9.0.0.100</sci:value>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>22</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\File Writers\Cache Writer</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.CalculateSmiles.1">
						<sci:component name="Molecule from SMILES" version="2">
							<sci:arg name="FromProperty" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The name of the property in the data
which holds the SMILES information</sci:help>
								<sci:member>KekulizeAromaticBonds</sci:member>
								<sci:member>Send Empty SMILES to Fail Port</sci:member>
								<sci:member>Parse RAtoms from CXSMILES</sci:member>
								<sci:value>canonical_smiles</sci:value>
							</sci:arg>
							<sci:arg name="KekulizeAromaticBonds" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Turn aromatic bonds into single/double bonds (set to True) or into aromatic query bonds (set to False). Molecules created with aromatic query bonds are more suitable as queries than as specific molecules. They should not be used as input for property calculators such as Molecular Weight, pKa and others, which require the structure to be uniquely defined.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Send Empty SMILES to Fail Port" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>When set to True, data records with SMILES represented by empty strings or strings with only blank characters are sent to the Fail port. 
&lt;p&gt;
When set to False, empty SMILES strings generate empty molecules with no atoms or bonds.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Parse RAtoms from CXSMILES" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Set this parameter to True to parse any Rgroup information from ChemAxon SMILES extentions (CXSMILES), if present. The extension is separated from the actual SMILES by a space or tab. When the parameter is set to False (the default state) the extension is ignored.
&lt;p&gt;
Examples
&lt;br&gt;
C1O[*]CO[*]1 |$;;_R2;;;_R1$,RG:_R1={C},{N},_R2={C},{N}|
&lt;br&gt;
Cl[*](Br)I |$;_R1;;$,RG:_R1={*CCCC(C*)CC*|
&lt;br&gt;
[*]N[C@@H](C=O)C([*])=O |$_R1;;;;;;_R2;$|
&lt;br&gt;
NC(=N)NCCC[C@H](N[*])C([*])=O |$;;;;;;;;;_R1;;_R2;$|
&lt;p&gt;
The star atoms (unknown atom type) in the SMILES are replaced by the corresponding numbered R atoms from the extension. Any RG fragment information present in the Rgroup extension is ignored.
&lt;p&gt;
Only the Rgroup information in the CXSMILES extension is parsed, any other extension is ignored.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval>Halt</sci:legalval>
								<sci:legalval selected="true">Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval>Halt</sci:legalval>
								<sci:legalval selected="true">Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/chemistry</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Wed Mar 30 15:06:09 2016</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>Molecule from SMILES</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>Molecule from SMILES</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>COMPONENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{AC8262DA-E648-4D24-9CD1-D731A8F53F9D}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>90 -820</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Converts a Daylight SMILES text property to a molecule</sci:value>
								<sci:value>&lt;p&gt;Builds a molecular representation for each data record from the SMILES string found in the property list. If a molecular representation is already present, it is overwritten by the new molecule. The input SMILES string is preserved.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To create a string property containing SMILES data, use &lt;a href=&quot;javascript:DoLink(&apos;{0C60C40A-5189-42DA-A3C0-4EA44BFF7D15}&apos;)&quot;&gt;Molecule to SMILES&lt;/a&gt; or &lt;a href=&quot;javascript:DoLink(&apos;{0C60C40A-5189-42DA-A3C0-4EA44BC27D15}&apos;)&quot;&gt;Canonical Smiles&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To read and write SMILES files, use &lt;a href=&quot;javascript:DoLink(&apos;{60FC1A04-61FD-4D4F-AC3F-A818AB614C78}&apos;)&quot;&gt;SMILES Reader&lt;/a&gt; and &lt;a href=&quot;javascript:DoLink(&apos;{72A5A427-651F-4847-9525-54CB438A7166}&apos;)&quot;&gt;SMILES Writer&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Molecule</sci:value>
								<sci:value>Molecular data record created from SMILES string</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>17.1.0.51</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Chemistry\Data Access and Manipulation\Converters\Molecule From Text\Molecule from SMILES</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.Protocol.1">
						<sci:component name="Set Property Value" version="2">
							<sci:arg name="Property Name" type="PropertyNameType" required="true" visibility="visible" multi="false">
								<sci:help>The name of the property</sci:help>
								<sci:value>accession</sci:value>
							</sci:arg>
							<sci:arg name="Value" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The value to assign.

If you want to assign from an existing data property or global property, use the &lt;i&gt;Initialize Using...&lt;/i&gt; operation on the parameter.</sci:help>
								<sci:value>P23975</sci:value>
							</sci:arg>
							<sci:arg name="RunToCompletion" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - For Each Data Record&quot;, the subprotocol is re-initialized and executed in its entirety for each individual data record it processes.
&lt;p&gt;
When set to &quot;True - For Each Category&quot;, the data records are divided into categories based on the value of the Categorize Using parameter and then the subprotocol is re-initialized and executed in its entirety for each category of data records. When used in conjunction with &lt;i&gt;Parallel Processing Options&lt;/i&gt;, each category of data records will be sent to the remote server as part of one single batch.</sci:help>
								<sci:member>RunToCompletion Categorize Using</sci:member>
								<sci:legalval selected="true">False</sci:legalval>
								<sci:legalval>True - For Each Data Record</sci:legalval>
								<sci:legalval>True - For Each Category</sci:legalval>
							</sci:arg>
							<sci:arg name="RunToCompletion Categorize Using" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>Required when RunToCompletion is set to &lt;i&gt;True - For Each Category&lt;/i&gt;, this parameter specifies the property or properties used to define the categories.</sci:help>
								<sci:validscript>SetInvalidDetails(&apos;This parameter is required when RunToCompletion is set to True - For Each Category&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
								<sci:enabledscript>SetDisabledDetails(&apos;To Enable, Set RunToCompletion to True - For Each Category&apos;);
Parameter(&apos;RunToCompletion&apos;) eq &apos;True - For Each Category&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>&lt;p&gt;
When set to True, this set of options allows the subprotocol to execute in parallel on one or more independent Pipeline Pilot servers, running locally or remotely.  Additional parameters control the number of data records to send in each process batch, the list of Pipeline Pilot servers to use, the number of protocol processes that can be executed on each server, and whether to preserve the order of the processed data records.
&lt;/p&gt;&lt;p&gt;
Use this option with care, since it will not increase throughput in all circumstances. Generally speaking, it yields improved performance when the parallelization benefits outweigh the data transfer overhead for the specified batch size.  As a rough guide, performance can be improved when each individual batch requires at least 10 seconds to execute, although this can be affected by the size of each data record.
&lt;/p&gt;&lt;p&gt;
When running the protocol with debugging, the subprotocol will provide debugging messages to detail each of the various steps of execution.  Also, components located within the parallel subprotocol will display their debugging messages as well.
&lt;/p&gt;&lt;p&gt;
For more information on the parallel subprotocol options, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_parallel_processing.htm&apos;)&quot;&gt;Parallel Processing Subprotocols&lt;/a&gt;.
&lt;/p&gt;
</sci:help>
								<sci:member>Parallel Processing Options Batch Size</sci:member>
								<sci:member>Parallel Processing Options Server</sci:member>
								<sci:member>Parallel Processing Options Preserve Order</sci:member>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Batch Size" type="LongType" required="true" visibility="visible" multi="false" uimpl="false">
								<sci:help>&lt;p&gt;The number of records to send to the remote server(s) for each subprotocol execution.  In general, performance is optimized when the amount of time required to process each batch is at least 10 seconds (note that this can vary depending on the characteristics of the remote server&apos;s hardware).  Use a batch size of -1 to pass all data in a single batch.&lt;/p&gt;
&lt;p&gt;When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - for each category&quot;, the batch sizes will be determined by the number of records in each individual category.  Therefore, the &lt;i&gt;Batch Size&lt;/i&gt; parameter is not applicable.</sci:help>
								<sci:enabledscript>#parallel := Parameter(&apos;Parallel Processing Options&apos;);
if (not #parallel) then
	SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
end if;
#parallel;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Server" type="StringType" required="false" visibility="visible" multi="true" expanded="true" legalvalsenforced="false" uimpl="false">
								<sci:help>&lt;p&gt;
A comma-separated list of Pipeline Pilot servers on which to execute the parallel subprotocol.  The server names should be in the same format as the Pipeline Pilot Client&apos;s change server dialog (that is, server-name:port-number).
&lt;/p&gt;&lt;p&gt;
Specifying &lt;b&gt;localhost&lt;/b&gt; as a server will cause the subprotocol to use its own Pipeline Pilot server.  This can be useful on multi-CPU/multi-core systems (where the subprotocol jobs are spawned on the same machine) and Pipeline Pilot Linux clusters (where &apos;localhost&apos; requests spawning the subprotocol jobs on the same cluster).
&lt;/p&gt;</sci:help>
								<sci:member>Parallel Processing Options Server Processes</sci:member>
								<sci:member>Parallel Processing Options Server Run On Grid</sci:member>
								<sci:validscript>SetInvalidDetails(&apos;This parameter is required.&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
								<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Server Processes" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>A comma-separated list of the maximum number of batches that can be simultaneously executed on each remote server.  The number of entries in this parameter must equal the number of servers. If &apos;*&apos; is specified as the number of processes, then that server will only launch as many batches as the administrator of the remote server has permitted.</sci:help>
								<sci:validscript>/* Server Processes must have the same number of comma separated entries as the Server parameter and must have a value*/
#processes := parameter();
expand(&apos;,&apos;, #processes);
#servers := parameter(&apos;Parallel Processing Options Server&apos;);
expand(&apos;,&apos;, #servers);

if (numvalues(#processes) == 0) then
	SetInvalidDetails(&apos;This parameter is required.&apos;);
else
	SetInvalidDetails(&apos;The number of server processes (&apos; . numvalues(#processes) . &apos;) must equal the number of servers (&apos; . numvalues(#servers) . &apos;).&apos;);
end if;
numvalues(#processes) &gt; 0 and numvalues(#processes) == numvalues(#servers);</sci:validscript>
								<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Server Run On Grid" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>Run subprotocol on grid engine if available.</sci:help>
								<sci:member>Parallel Processing Options Server Run On Grid Queue Name</sci:member>
								<sci:member>Parallel Processing Options Server Run On Grid Grid Options</sci:member>
								<sci:enabledscript>parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Server Run On Grid Queue Name" type="StringType" required="false" visibility="visible" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>Select the queue name on the grid to submit jobs to. Leave blank to use default queue name.</sci:help>
								<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Server Run On Grid Grid Options" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>Use this to specify grid engine specific command line parameters to the job submission command. Leave blank to use defaults.</sci:help>
								<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Preserve Order" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>Whether to preserve the order of the data as it enters and leaves the remote subprotocol.</sci:help>
								<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Tempfiles" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
								<sci:help>&lt;p&gt;A comma-delimited list of global properties, each of which is automatically populated with the name of a file in the job&apos;s temporary folder, which always has a unique name.&lt;p/&gt;For each global name, an additional global is created (with the suffix &lt;i&gt;_Filename&lt;/i&gt;) that hold only the leaf file name of the temporary file.&lt;/p&gt;</sci:help>
							</sci:arg>
							<sci:arg name="DeclareLocal" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
								<sci:help>&lt;p&gt;Lists a set of properties (without the @) to create on the global property list for this subprotocol. Such properties can only be accessed within the scope of this subprotocol and its descendent subprotocols.&lt;p/&gt;

&lt;p&gt;Any global property not declared in this way is created on the top-level global property list and is accessible from all subprotocols, but breaks the encapsulation of the subprotocol and may collide with another property of the same name.&lt;/p&gt;

&lt;p&gt;Therefore, you should always declare a new global property in the &lt;i&gt;DeclareLocal&lt;/i&gt; parameter, to scope the global property to the subprotocol where it is used.&lt;/p&gt;</sci:help>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="Refresh rather than Reinitialize" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>Refresh rather than Reinitialize</sci:help>
								<sci:value>1</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>set accession to NET</sci:value>
							</sci:arg>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Destination&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>
#prop := trim(Parameter(&apos;Property Name&apos;, 2));
#value := trim(Parameter(&apos;Value&apos;, 2));
if(strlength(#prop) &gt; 0 AND strlength(#value) &gt; 0) then	
	&apos;Set &apos; . #prop . &apos; to &apos; . #value;
else
	&apos;&apos;;
end if;</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol AutoLayout</sci:help>
								<sci:value>1</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>ComponentNode</sci:value>
							</sci:arg>
							<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
								<sci:help>Component Revision</sci:help>
								<sci:value>790</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{68C8B76A-B698-4B78-9B58-2D8D5E1B8D8D}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>378 -820</sci:value>
							</sci:arg>
							<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>By Ref</sci:help>
								<sci:value>1</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Set a property value</sci:value>
								<sci:value>&lt;p&gt;
This component allows you to set a property value from a value. To set a value on a subset of your data records, use the &lt;i&gt;Compare Property to Value Filter&lt;/i&gt; upstream.</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value>The data record</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value>Data records with the property assigned to the new value (and if provided, passed the test)</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>17.1.0.119</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Sticky Notes</sci:help>
							</sci:arg>
							<sci:arg name="ProtocolScale2" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Scale</sci:help>
								<sci:value>100</sci:value>
							</sci:arg>
							<sci:arg name="Protocol Options" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Options</sci:help>
								<sci:legalval selected="true">Owner Access Only</sci:legalval>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Mon Sep 19 13:15:39 2016</sci:value>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>1</sci:value>
							</sci:arg>
							<sci:arg name="SubProtocolMadeLinkIntoCopy" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>Subprotocol Made Link Into Copy</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Property Manipulators\Set Property Value</sci:value>
							</sci:arg>
						</sci:component>
						<sci:protocol/>
					</sci:data>
					<sci:data object="SciTegic.JoinProperties.1">
						<sci:component name="Join Data from Cache" version="2">
							<sci:arg name="JoinUsing" type="PropertyNameType" required="true" visibility="visible" multi="false">
								<sci:help>The name of the property that identifies which records to join. When a record in the cache 
has the same value for this property as the incoming streaming data record, its properties and child 
nodes are added to the streaming record. Calculable properties can be used for the streaming data, but 
data in the cache must already contain stored properties to join.

If you provide a comma-separated list 
of property names, then by default all values must match. (You can control this behavior by changing 
JoinUsingListType.) Or, if you provide a property that is an array of values, then all values must match 
(and the source must provide the data in an array-based form.)</sci:help>
								<sci:member>JoinUsingListType</sci:member>
								<sci:member>IgnoreCase</sci:member>
								<sci:member>AcceptNonNumericStringsAsNumbers</sci:member>
								<sci:member>JoinPropertyType</sci:member>
								<sci:value>accession</sci:value>
							</sci:arg>
							<sci:arg name="JoinUsingListType" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>&lt;p&gt;Indicates how &lt;i&gt;JoinUsing&lt;/i&gt; properties are interpreted when more than one property is listed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;UseFirstDefinedValue&lt;/i&gt;: Join using only the first property in the list with a defined value for a record.
&lt;li&gt;&lt;i&gt;UseAllValues&lt;/i&gt;: Joins using the concatentation of the values of all properties listed; a match occurs only when records share the same value for all the properties.
&lt;/ul&gt;</sci:help>
								<sci:legalval>UseFirstDefinedValue</sci:legalval>
								<sci:legalval selected="true">UseAllValues</sci:legalval>
							</sci:arg>
							<sci:arg name="JoinPropertyType" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The data type of the join property</sci:help>
								<sci:legalval>IsNumeric</sci:legalval>
								<sci:legalval selected="true">IsText</sci:legalval>
								<sci:legalval>IsDate</sci:legalval>
							</sci:arg>
							<sci:arg name="IgnoreCase" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Consider lower-case and upper-case letters as equivalent when determining the identity of &lt;i&gt;JoinUsing&lt;/i&gt; property values.</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, set JoinPropertyType to IsText&apos;);
Parameter(&apos;JoinPropertyType&apos;) eq &apos;IsText&apos;</sci:enabledscript>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="CacheID" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The name of the cache that was written using the Cache Writer</sci:help>
								<sci:member>Scope</sci:member>
								<sci:value>protdesc</sci:value>
							</sci:arg>
							<sci:arg name="Scope" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The scope within which the cache we wish to join against exists.
&lt;ul&gt;
&lt;li&gt;&lt;I&gt;Job Only&lt;/I&gt; all caches created within the currently-running protocol.
&lt;li&gt;&lt;I&gt;User Only&lt;/I&gt; all caches created so that all jobs by that user can see them.
&lt;li&gt;&lt;I&gt;All Users&lt;/I&gt; all caches created by any user in the global scope. 
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">Job Only</sci:legalval>
								<sci:legalval>User Only</sci:legalval>
								<sci:legalval>All Users</sci:legalval>
							</sci:arg>
							<sci:arg name="Join Behavior" type="GroupType" required="false" visibility="visible" multi="false" expanded="true">
								<sci:member>JoinOnto</sci:member>
								<sci:member>WhenJoiningOnto</sci:member>
								<sci:member>JoinAllNullString</sci:member>
								<sci:member>MultipleReferenceBehavior</sci:member>
								<sci:member>AppendNodes</sci:member>
							</sci:arg>
							<sci:arg name="JoinOnto" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>&lt;p&gt;Indicates which data record will be output:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;ProcessData&lt;/i&gt;: The data streaming through the pipeline remains with properties and child nodes from the cache copied onto the record.
&lt;li&gt;&lt;i&gt;Reference&lt;/i&gt;: The data from the cache remains with properties and child nodes from the streaming data record copied onto the record.  Only data records that successfully join against the incoming data stream will be output.
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">ProcessData</sci:legalval>
								<sci:legalval>Reference</sci:legalval>
							</sci:arg>
							<sci:arg name="WhenJoiningOnto" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>&lt;p&gt;During the joining of two property lists, this parameter indicates how differences 
between the property lists are resolved.  
By default, the streaming input data (process data) serves 
as the base for a join and the cache data (reference data) is treated as the joining data (this distinction 
can be reversed using the &lt;i&gt;JoinOnto&lt;/i&gt; parameter).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;OverwriteOrCreate&lt;/i&gt;: 
Copies all properties from the joining data onto the base data, overwriting the values of any properties 
that already exist.
&lt;li&gt;&lt;i&gt;OverwriteExisting&lt;/i&gt;: Copies only those properties from 
the joining data to the base data that already exist on the base.
&lt;li&gt;&lt;i&gt;CreateIfNew&lt;/i&gt;: 
Copies only those properties from the joining data to the base data that do not already exist on the 
base data.
&lt;li&gt;&lt;i&gt;AppendOrCreate&lt;/i&gt;: The value of a joining property that already 
exists in the base data is appended  (as an array) to the value in the base property.  The other joining 
properties that are not already present in the base data are copied there.
&lt;li&gt;&lt;i&gt;AppendExisting&lt;/i&gt;: 
The value of a joining property that already exists in the base data is appended  (as an array) to the 
value in the base property.  No other properties are copied. 
&lt;li&gt;&lt;i&gt;GroupData&lt;/i&gt;: 
Creates a hierarchical group containing both the joining and base data.
&lt;/ul&gt;</sci:help>
								<sci:legalval>OverwriteOrCreate</sci:legalval>
								<sci:legalval>OverwriteExisting</sci:legalval>
								<sci:legalval>CreateIfNew</sci:legalval>
								<sci:legalval selected="true">AppendOrCreate</sci:legalval>
								<sci:legalval>AppendExisting</sci:legalval>
								<sci:legalval>GroupData</sci:legalval>
							</sci:arg>
							<sci:arg name="AppendNodes" type="BoolType" required="false" visibility="visible" multi="false">
								<sci:help>When joining data records that contain child nodes, whether to append the child nodes of the joining data onto the base data as determined by the &lt;i&gt;JoinOnto&lt;/i&gt; parameter.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="MultipleReferenceBehavior" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>&lt;p&gt;What to do if there are multiple records in the cache (reference data) with a matching 
value for the &lt;i&gt;JoinUsing&lt;/i&gt; property of an incoming streaming record.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;JoinFirst&lt;/i&gt;: 
Uses the first one found. 
&lt;li&gt;&lt;i&gt;JoinLast&lt;/i&gt;: Uses the last one found. 
&lt;li&gt;&lt;i&gt;JoinAll&lt;/i&gt;: 
Appends all values for each property together in an array. 
&lt;li&gt;&lt;i&gt;JoinTogether&lt;/i&gt;: 
Joins each of the matching records in the cache with the streaming record individually and independently, 
which results in multiple records output for one input record.
&lt;/ul&gt;</sci:help>
								<sci:legalval>JoinFirst</sci:legalval>
								<sci:legalval>JoinLast</sci:legalval>
								<sci:legalval>JoinAll</sci:legalval>
								<sci:legalval selected="true">JoinTogether</sci:legalval>
							</sci:arg>
							<sci:arg name="JoinAllNullString" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>&lt;p&gt;This string is used during append to pad out empty values when MultipleReferenceBehavior is set to  &quot;JoinAll&quot;. This keeps the generated arrays of values in sync for multiple references.&lt;/p&gt;
&lt;p&gt;The value &quot;None&quot; causes no padding to occur.&lt;/p&gt;</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, set MultipleReferenceBehavior to JoinAll&apos;);
Parameter(&apos;MultipleReferenceBehavior&apos;) eq &apos;JoinAll&apos;</sci:enabledscript>
								<sci:value>None</sci:value>
							</sci:arg>
							<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false">
								<sci:help>Contains less commonly used parameters</sci:help>
								<sci:member>Prefix</sci:member>
								<sci:member>GroupName</sci:member>
							</sci:arg>
							<sci:arg name="Prefix" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>A prefix to add to each property name as it is joined onto the streaming data (instead of overwriting or appending to the existing value).</sci:help>
							</sci:arg>
							<sci:arg name="GroupName" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>If &lt;i&gt;WhenJoiningOnto&lt;/i&gt; is set to &quot;GroupData&quot;, this is the name of the group node into which the results are placed</sci:help>
								<sci:enabledscript>SetDisabledDetails(&apos;To enable, set WhenJoiningOnto to GroupData&apos;);
Parameter(&apos;WhenJoiningOnto&apos;) eq &apos;GroupData&apos;</sci:enabledscript>
								<sci:value>Data</sci:value>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="PassDownParameters" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Parameters to pass on to the reader</sci:help>
								<sci:value>Scope</sci:value>
							</sci:arg>
							<sci:arg name="AcceptNonNumericStringsAsNumbers" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>Determines whether &lt;b&gt;all&lt;/b&gt; string values for the JoinUsing property -- even 
non-numeric ones such as &apos;abc&apos; or &apos;1.0c&apos; -- will be coerced to numbers when  JoinPropertyType 
is set to IsNumeric.  

If set to True, then a string such as &apos;abc&apos; that does not begin with 
a numeric portion will be coerced to zero, while a string such as &apos;1.0c&apos; that begins with a 
numeric portion will be coerced to the corresponding number (in this case 1.0).  

If set to False, then 
records containing non-numeric strings for the JoinUsing property will be sent out the Fail port.</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Source" type="URLType" required="true" visibility="nevershow" multi="false">
								<sci:help>Names of data files, a learned model, or data cache ID, to join with the streaming data that enters this component. If multiple files are given, each is joined in sequence. (The Windows browser reverses the order of the files during selection, so you should select from last to first.)</sci:help>
								<sci:value>$(CacheID)</sci:value>
							</sci:arg>
							<sci:arg name="SourceFormat" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:help>The name of the reader to use for the join source. (For readers with particular parameters, you can create them and save them, then add their name to the options list for this protocol.  For example, you could create a Delimited Text with Commas and No Column Names component, save it to your tab, then add it to this list and select.)</sci:help>
								<sci:legalval>Delimited Text With Column Names</sci:legalval>
								<sci:legalval>Delimited Text No Column Names</sci:legalval>
								<sci:legalval>Comma Delimited With Column Names</sci:legalval>
								<sci:legalval>Tab Delimited With Column Names</sci:legalval>
								<sci:legalval>Space Delimited With Column Names</sci:legalval>
								<sci:legalval>Excel XLS With Column Names</sci:legalval>
								<sci:legalval>Excel XLS No Column Names</sci:legalval>
								<sci:legalval>MDL SD Format</sci:legalval>
								<sci:legalval>Learned Model Reader</sci:legalval>
								<sci:legalval selected="true">{704E3781-33EA-42BB-9099-05B44C3D08E6}</sci:legalval>
							</sci:arg>
							<sci:arg name="Keep Properties" type="PropertyPreviewType" required="false" visibility="nevershow" multi="false">
								<sci:help>A list of properties to join from the source file. If this value is not defined, all properties are joined into the record.</sci:help>
							</sci:arg>
							<sci:arg name="UseIndexFile" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>Uses an index file when performing the Join operation when set to &quot;True&quot;. An index file is created if it does not already exist; it is used to accelerate the join process.

 Note: This option is useful for optimizing join operations against a file that may be used many times, at the first time of use an index file can be created to speed accesses in subsequent uses.  This file is created in the same directory as the source file and is automatically used for any subsequent join.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Tue Sep 13 07:03:53 2016</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{BDEEEC41-E62B-4FDE-B0D0-8B9C96CA2497}</sci:value>
							</sci:arg>
							<sci:arg name="CheckSyntax" type="BoolType" required="true" visibility="nevershow" multi="false">
								<sci:help>Whether to perform a quick syntax check at the beginning of the file when we open it, and if a problem is found, throw an error.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="SourceComponent" type="ComponentType" required="false" visibility="nevershow" multi="false">
								<sci:help>Name of the data format of the Source file</sci:help>
								<sci:value>$(SourceFormat)</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;JoinUsing&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>if (strlength(trim(parameter(&apos;JoinUsing&apos;, 2))) &gt; 0) then
	&quot;Join on &quot; . trim(parameter(&apos;JoinUsing&apos;, 2));
else
	&quot;&quot;;
end if;</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>Join Data from File</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>JOINNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>666 -820</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Augments data records with properties from data in a cache where specified property values match</sci:value>
								<sci:value>&lt;p&gt;For each incoming data record, a property value or set of values specified by 
&lt;i&gt;JoinUsing&lt;/i&gt; is used to identify matching records in the data cache created by the &lt;a 
href=&quot;javascript:DoLink(&apos;{674E3781-33EA-42BB-9099-49CB4C3D08E6}&apos;)&quot;&gt;Cache Writer&lt;/a&gt; 
specified by &lt;i&gt;CacheID&lt;/i&gt;.  Properties from these records are added to the incoming data 
record.  If no match is found, the record is sent out the Fail port.&lt;/p&gt;

&lt;p&gt;Records match 
if the value of the &lt;i&gt;JoinUsing&lt;/i&gt; property is the same for the incoming record as in the 
cache.  If multiple &lt;i&gt;JoinUsing&lt;/i&gt; properties are specified, the behavior depends on &lt;i&gt;JoinUsingListType&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;By 
default, this component expects the cache to have been created by the current job.  If the cache is outside 
the scope of the current job, update &lt;i&gt;Scope&lt;/i&gt; accordingly&lt;/p&gt;

&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;By 
default only properties are extracted from the matching records.  Use &lt;i&gt;JoinOnto&lt;/i&gt; to 
obtain additional information such as molecular data.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;Use 
&lt;a href=&quot;javascript:DoLink(&apos;{674E3781-33EA-42BB-9099-49CB4C3D08E6}&apos;)&quot;&gt;Cache 
Writer&lt;/a&gt; to create the data cache specified by &lt;i&gt;CacheID&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;Use 
&lt;a href=&quot;javascript:DoLink(&apos;{D24316C3-9D5C-4B5D-ADF3-28F258F11858}&apos;)&quot;&gt;Join 
Data from File&lt;/a&gt; to join against a source data file.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>Data records which received additional properties from the source file through a successful join.</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value>Data records for which no data was found in the source file.</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>17.1.0.119</sci:value>
							</sci:arg>
							<sci:arg name="ReplaceNullsInFirstRecord" type="BoolType" required="false" visibility="nevershow" multi="false" uimpl="false">
								<sci:help>Specifies whether to replace nulls in the first merged record when KeepAllNullString is specified.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>2</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Data Manipulators\Join Data from Cache</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="Scitegic.ShortcutComponent.1">
						<sci:component name="Shortcut Component" version="2">
							<sci:arg name="Component Name" type="LinkParentParameterType" required="true" visibility="visible" multi="false">
								<sci:metaproplist>
									<sci:propval name="SCI_InitializeUsingOrigType">StringType</sci:propval>
								</sci:metaproplist>
								<sci:help>Name of the component which will process the data. You can give either a short name such as &quot;alogpmodel&quot;, or a fully-specified name such as &quot;myname/LearnedProperties/alogpmodel&quot;, or
evan a universal identifier (GUID) such as &quot;{ABCDDCBA-CC5A-4517-8D55-6BB4D53DE12E}&quot;.

If a name is given, the search is conducted starting on the user&apos;s tab, then the Protocols tab, then the Components tab.</sci:help>
								<sci:member>Use Parameters</sci:member>
								<sci:value>Component Name</sci:value>
							</sci:arg>
							<sci:arg name="Protect Globals" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Controls whether to protect global values from change by the referenced component. Options are:
&lt;ul&gt;
&lt;li&gt;Don&apos;t Protect: allows the referenced component to access and change any globals. 
&lt;li&gt;Use Copy: allows the referenced component to access a copy made of the globals 
at initialization time. It may change these globals or create new ones, but these 
changes will not be transferred outside the component itself. 
&lt;li&gt;Use Copy of Read-Only: gives the referenced component a copy of read-only globals, 
but does not pass in writable globals. (Writable globals are more likely to be temporary 
in scope, and passing in information using them is not recommended. If you need the value of 
these, you may add parameters to the Shortcut Component to pass them in.)
You may create new globals, but they will remain local to the component; further, trying to assign an existing global 
will cause an error. These strict semantics help avoid unintentional problems caused by altering system-wide globals or using
temporary state-dependent globals.
&lt;/ul&gt; 

&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;WARNING:  If the reference component specified by &quot;Component Name&quot; is a subprotocol and the &quot;Protect Globals&quot; parameter is set to any value other than &quot;Don&apos;t Protect&quot;, the protocol will crash resulting in a &quot;No Server Process&quot; error.&lt;/li&gt;
&lt;/ul&gt;
</sci:help>
								<sci:member>Copy Hierarchical Data</sci:member>
								<sci:legalval selected="true">Don&apos;t Protect</sci:legalval>
								<sci:legalval>Use Copy</sci:legalval>
								<sci:legalval>Use Copy of Read-Only</sci:legalval>
							</sci:arg>
							<sci:arg name="Copy Hierarchical Data" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>&lt;p&gt;If set to true, any copy of the global data passed to the component will also contain any hierarchical properties. Otherwise, only properties defined on the root node will be passed.&lt;/p&gt;

&lt;p&gt;Has no effect unless the &apos;Use Copy&apos; or &apos;Use Read-Only Copy&apos; values of the &apos;Protect Globals&apos; parameter are selected.&lt;/p&gt;</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Link to Any Ancestor" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false" uimpl="true">
								<sci:help>If the component you are referring to has a link to a parent property, that property is expected to be on the parent protocol of the Shortcut Component. 

Sadly, sometimes additional layers of subprotocols might be added. In this case, setting Link to Any Ancestor to &quot;True&quot; causes the shortcut to walk all ancestor protocols looking for resolution of the links. </sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Use Parameters" type="PromotedGroupMemberType" required="false" visibility="nevershow" multi="false" expanded="true">
								<sci:help>Define whether to pass on the parameters from this component to the target component or to extract the parameter names and values from the Parameter Settings value.</sci:help>
								<sci:member>Parameter Settings</sci:member>
								<sci:value>Use Parameters</sci:value>
							</sci:arg>
							<sci:arg name="Parameter Settings" type="PromotedGroupMemberType" required="false" visibility="nevershow" multi="true">
								<sci:help>&lt;p&gt;A list of parameter settings to be applied to the target component, specified as an array. Each item in the array is one parameter setting, formatted as:&lt;/p&gt;
&lt;pre style=&quot;color:brown&quot;&gt;
&amp;lt;name&amp;gt;=&amp;lt;value&amp;gt;
&lt;/pre&gt;
Example:
&lt;pre style=&quot;color:brown&quot;&gt;
Property1=Total
Property2=NumSamples
Statistic=Mean
&lt;/pre&gt;
&lt;h5&gt;Parameter Arrays&lt;/h5&gt;
&lt;p&gt;To define an array parameter value, simply repeat the parameter name for each array item.
&lt;/p&gt;
&lt;pre style=&quot;color:brown&quot;&gt;
Catalog Number=6753
City List=Rome
City List=Athens
City List=Lisbon
&lt;/pre&gt;
&lt;h5&gt;Parameter Metadata&lt;/h5&gt;
&lt;p&gt;
You can also define metadata values for a parameter on the component. To do this, use a ^^ indicator to identify the parameter/metadata name pair. In the following example, the Measurement parameter has two metadata items, named Unit and Precision:
&lt;pre style=&quot;color:brown&quot;&gt;
Measurement=1000
Measurement^^Unit=Float
Measurement^^Precision=6
&lt;/pre&gt;
&lt;h5&gt;Parameter Group Series&lt;/h5&gt;
&lt;p&gt;
In general, a parameter value defined in the &lt;i&gt;Parameter Settings&lt;/i&gt; list should match a named parameter that exists on the target component for the shortcut. If there is no match, the parameter value is ignored. The only exception is for ordered series of parameter groups. In this case, a new parameter can be created using a parameter in the base parameter group (number 1) as a template. In this example, the target component includes the following parameter group:
&lt;/p&gt;
&lt;pre style=&quot;color:brown&quot;&gt;
List 1
List 1 Language
List 1 Format
&lt;/pre&gt;
The parameter list for the shortcut component might be:
&lt;pre style=&quot;color:brown&quot;&gt;
List 1 Language=English
List 1 Format=Left
List 2=
List 2 Language=Spanish
List 2 Format=Flow
List 3=
List 3 Language=French
List 3 Format=Center
&lt;/pre&gt;
&lt;p&gt;The first 2 items above simply define values for existing parameters in the base parameter group. The remaining items define two new parameter groups (group2 and group 3) with their values. 
&lt;/p&gt;&lt;p&gt;
You could also define metadata on the new parameters:
&lt;/p&gt;
&lt;pre style=&quot;color:brown&quot;&gt;
List 2=
List 2^^Filename=esp.txt
List 2 Language=Spanish
List 2 Format=Flow
List 2 Format^^Style=Bold
&lt;/pre&gt;</sci:help>
								<sci:value>Parameter Settings</sci:value>
							</sci:arg>
							<sci:arg name="Use New Parameter Copy" type="BoolType" required="false" visibility="nevershow" multi="false" legalvalsenforced="false">
								<sci:help>Whether to use the newer version of parameter copying</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Tue Feb 10 11:18:55 2015</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>Shortcut Component</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>ComponentNode</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{ABCDDCBA-CC5A-4517-8D55-6BB4D53DE12E}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint2" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Component Point</sci:help>
								<sci:value>370 -50</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>954 -820</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Run the component specified by name.</sci:value>
								<sci:value>&lt;p&gt;
This component can act as a shortcut to any other component in the system.  This means that it is replaced at run time with a copy of the target component it refers to. By default, the target component is run with parameters copied from this component. Alternatively, a list of parameter settings can be specified in a single array parameter.
&lt;/p&gt;
&lt;p&gt;
(The &quot;Shortcut Component&quot; is so-named because its operation is quite similar to that of a shortcut of a subprotocol, which gets the newest copy at run-time and sets the parameters from the values on the shortcut.)
&lt;/p&gt;
&lt;p&gt;
The component can be useful when you wish to write a protocol that uses a component that may not yet be in the system, such as a learned model. Another use is component substitution at run time, based upon protocol parameters or earlier results in the protocol.
&lt;/p&gt;
&lt;p&gt;
You can adjust the component port configuration to match those of the target component ports.
&lt;/p&gt;
&lt;p&gt;
If a name is given, the search is conducted starting on the user&apos;s tab, then the Protocols tab, then the Components tab.
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;WARNING:  If the reference component specified by &quot;Component Name&quot; is a subprotocol and the &quot;Protect Globals&quot; parameter is set to any value other than &quot;Don&apos;t Protect&quot;, the protocol will crash resulting in a &quot;No Server Process&quot; error.&lt;/li&gt;
&lt;/ul&gt;
</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon</sci:help>
								<sci:value>Shortcut Component</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>9.5.0.788</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>3</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Utilities\Subprotocol Utilities\Shortcut Component</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.NormalizePropertyTypes.1">
						<sci:component name="Set Property Format" version="2">
							<sci:arg name="Output What" type="StringType" required="false" visibility="hidden" multi="false">
								<sci:help>What to output - either a summary of the property information, one record per property, or the normalized data, one record per incoming data record.

If &lt;i&gt;Summary&lt;/i&gt; or &lt;i&gt;OriginalDataThenSummary&lt;/i&gt; is selected, the summary properties are:

&lt;ul&gt;
&lt;li&gt;name: the name of the property&lt;/li&gt;
&lt;li&gt;count: the number of incoming data records containing this property&lt;/li&gt;
&lt;li&gt;type: the normalized type of the data (see list of possible types below)&lt;/li&gt;
&lt;li&gt;min: if numeric, the minimum value of the property&lt;/li&gt;
&lt;li&gt;max: if numeric, the maximum value of the property&lt;/li&gt;
&lt;li&gt;values: if string, then the list of different values (if less than Maximum Number of Values)&lt;/li&gt;
&lt;/ul&gt;

The possible values for type are:

&lt;ul&gt;
&lt;li&gt;Null&lt;li&gt;
&lt;li&gt;Boolean&lt;li&gt;
&lt;li&gt;Integer&lt;li&gt;
&lt;li&gt;Double&lt;li&gt;
&lt;li&gt;String&lt;li&gt;
&lt;li&gt;Text&lt;li&gt;
&lt;li&gt;DateTime&lt;li&gt;
&lt;li&gt;Other&lt;li&gt;
&lt;/ul&gt;

      </sci:help>
								<sci:legalval>Original Data Then Summary</sci:legalval>
								<sci:legalval>Normalized Data</sci:legalval>
								<sci:legalval selected="true">Summary</sci:legalval>
							</sci:arg>
							<sci:arg name="Summary Options" type="GroupType" required="false" visibility="hidden" multi="false" legalvalsenforced="false">
								<sci:help>Options that affect the output of the summary data only</sci:help>
								<sci:member>Maximum Number of Values</sci:member>
								<sci:member>Text Length</sci:member>
							</sci:arg>
							<sci:arg name="Maximum Number of Values" type="LongType" required="false" visibility="hidden" multi="false" expanded="true">
								<sci:help>For String properties, we also return a list of possible values. This sets the maximum number of different values we wish to return. If that is exceeded, then no values are returned.
      </sci:help>
								<sci:value>20</sci:value>
							</sci:arg>
							<sci:arg name="Text Length" type="LongType" required="false" visibility="hidden" multi="false">
								<sci:help>
        For string properties, if the length of the value is greater than or equal to this number,
        then that property is considered Text, and no values are collected or returned.
      </sci:help>
								<sci:value>32</sci:value>
							</sci:arg>
							<sci:arg name="Missing Value Options" type="GroupType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Options to control the identification of missing values, and to possibly standardize (and then accept as clean) these values by column type using a provided replacement string.</sci:help>
								<sci:member>Missing Value Strings</sci:member>
								<sci:member>Replace Missing Values</sci:member>
							</sci:arg>
							<sci:arg name="Missing Value Strings" type="StringType" required="false" visibility="visible" multi="true" expanded="true">
								<sci:help>If provided, this is an array of string values that will be interpreted as missing values. Note that an empty entry causes the empty string to be treated as a missing value.</sci:help>
								<sci:value/>
								<sci:value>*</sci:value>
								<sci:value>?</sci:value>
								<sci:value>NULL</sci:value>
								<sci:value>NA</sci:value>
								<sci:value>N/A</sci:value>
								<sci:value>NaN</sci:value>
							</sci:arg>
							<sci:arg name="Replace Missing Values" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Whether to identify missing values, and once identified, ignore them in the formatting operation. </sci:help>
								<sci:member>Types to Replace</sci:member>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Types to Replace" type="StringType" required="false" visibility="visible" multi="true" expanded="true">
								<sci:help>Replace missing values with particular strings for particular column types</sci:help>
								<sci:member>Boolean Missing Values</sci:member>
								<sci:member>Integer Missing Values</sci:member>
								<sci:member>Double Missing Values</sci:member>
								<sci:member>String Missing Values</sci:member>
								<sci:member>DateTime Missing Values</sci:member>
								<sci:enabledscript>parameter(&apos;Replace Missing Values&apos;)</sci:enabledscript>
								<sci:legalval selected="true">Boolean</sci:legalval>
								<sci:legalval selected="true">Integer</sci:legalval>
								<sci:legalval selected="true">Double</sci:legalval>
								<sci:legalval selected="true">String</sci:legalval>
								<sci:legalval selected="true">DateTime</sci:legalval>
							</sci:arg>
							<sci:arg name="Boolean Missing Values" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Replace missing values in Boolean columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
								<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Boolean&apos;);</sci:enabledscript>
								<sci:value>False</sci:value>
							</sci:arg>
							<sci:arg name="Integer Missing Values" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Replace missing values in Integer columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
								<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Integer&apos;);</sci:enabledscript>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="Double Missing Values" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Replace missing values in Double columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
								<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Double&apos;);</sci:enabledscript>
								<sci:value>NaN</sci:value>
							</sci:arg>
							<sci:arg name="String Missing Values" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Replace missing values in String columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
								<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;String&apos;);</sci:enabledscript>
							</sci:arg>
							<sci:arg name="DateTime Missing Values" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Replace missing values in DateTime columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
								<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;DateTime&apos;);</sci:enabledscript>
								<sci:value>1/1/1970</sci:value>
							</sci:arg>
							<sci:arg name="Format Properties" type="GroupType" required="false" visibility="visible" multi="true" expanded="true" legalvalsenforced="false">
								<sci:help>The list of properties to coerce to formatted strings</sci:help>
								<sci:member>Property 1</sci:member>
								<sci:member>Property 2</sci:member>
								<sci:member>Property 3</sci:member>
								<sci:member>Property 4</sci:member>
								<sci:member>Property 5</sci:member>
								<sci:member>Property 6</sci:member>
							</sci:arg>
							<sci:arg name="Property 1" type="PropertyNameType" required="true" visibility="visible" multi="false" expanded="true">
								<sci:help>The property name </sci:help>
								<sci:member>Property 1 Format</sci:member>
								<sci:member>Property 1 Format String</sci:member>
								<sci:value>ChEMBL25 NET Prediction Model</sci:value>
							</sci:arg>
							<sci:arg name="Property 1 Format" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>The format we wish to convert the value to. Missing values are ignored.</sci:help>
								<sci:legalval>Boolean (TF)</sci:legalval>
								<sci:legalval>Boolean (True False)</sci:legalval>
								<sci:legalval>Boolean (YN)</sci:legalval>
								<sci:legalval>Boolean (10)</sci:legalval>
								<sci:legalval selected="true">Double (using Format string)</sci:legalval>
								<sci:legalval>DateTime (using Format string)</sci:legalval>
							</sci:arg>
							<sci:arg name="Property 1 Format String" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>For Double and DateTime types, the format string.

For Double formatting, look online for the format string format for &quot;swprintf&quot;. 

For DateTime formatting, the following is used (from strftime):

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;%a&lt;/b&gt; is replaced by the locale&apos;s abbreviated weekday name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%A&lt;/b&gt; is replaced by the locale&apos;s full weekday name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%b&lt;/b&gt; is replaced by the locale&apos;s abbreviated month name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%B&lt;/b&gt; is replaced by the locale&apos;s full month name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%c&lt;/b&gt; is replaced by the locale&apos;s appropriate date and time representation.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%C&lt;/b&gt; is replaced by the century number (the year divided by 100 and truncated to an integer) as a decimal number [00-99].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%d&lt;/b&gt; is replaced by the day of the month as a decimal number [01,31].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%D&lt;/b&gt; same as %m/%d/%y.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%e&lt;/b&gt; is replaced by the day of the month as a decimal number [1,31]; a single digit is preceded by a space.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%h&lt;/b&gt; same as %b.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%H&lt;/b&gt; is replaced by the hour (24-hour clock) as a decimal number [00,23].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%I&lt;/b&gt; is replaced by the hour (12-hour clock) as a decimal number [01,12].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%j&lt;/b&gt; is replaced by the day of the year as a decimal number [001,366].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%m&lt;/b&gt; is replaced by the month as a decimal number [01,12].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%M&lt;/b&gt; is replaced by the minute as a decimal number [00,59].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%n&lt;/b&gt; is replaced by a newline character.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%p&lt;/b&gt; is replaced by the locale&apos;s equivalent of either a.m. or p.m.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%r&lt;/b&gt; is replaced by the time in a.m. and p.m. notation; in the POSIX locale this is equivalent to %I:%M:%S %p.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%R&lt;/b&gt; is replaced by the time in 24 hour notation (%H:%M).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%S&lt;/b&gt; is replaced by the second as a decimal number [00,61].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%t&lt;/b&gt; is replaced by a tab character.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%T&lt;/b&gt; is replaced by the time (%H:%M:%S).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%u&lt;/b&gt; is replaced by the weekday as a decimal number [1,7], with 1 representing Monday.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%U&lt;/b&gt; is replaced by the week number of the year (Sunday as the first day of the week) as a decimal number [00,53].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%V&lt;/b&gt; is replaced by the week number of the year (Monday as the first day of the week) as a decimal number [01,53]. If the week containing 1 January has four or more days in the new year, then it is considered week 1. Otherwise, it is the last week of the previous year, and the next week is week 1.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%w&lt;/b&gt; is replaced by the weekday as a decimal number [0,6], with 0 representing Sunday.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%W&lt;/b&gt; is replaced by the week number of the year (Monday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Monday are considered to be in week 0.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%x&lt;/b&gt; is replaced by the locale&apos;s appropriate date representation.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%X&lt;/b&gt; is replaced by the locale&apos;s appropriate time representation.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%y&lt;/b&gt; is replaced by the year without century as a decimal number [00,99].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%Y&lt;/b&gt; is replaced by the year with century as a decimal number.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%Z&lt;/b&gt; is replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%%&lt;/b&gt; is replaced by %.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
								<sci:value>%3.2f</sci:value>
							</sci:arg>
							<sci:arg name="Property 2" type="PropertyNameType" required="false" visibility="visible" multi="false" expanded="true">
								<sci:help>The property name </sci:help>
								<sci:member>Property 2 Format</sci:member>
								<sci:member>Property 2 Format String</sci:member>
								<sci:value>pchembl_value</sci:value>
							</sci:arg>
							<sci:arg name="Property 2 Format" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>The format we wish to convert the value to. Missing values are ignored.</sci:help>
								<sci:legalval>Boolean (TF)</sci:legalval>
								<sci:legalval>Boolean (True False)</sci:legalval>
								<sci:legalval>Boolean (YN)</sci:legalval>
								<sci:legalval>Boolean (10)</sci:legalval>
								<sci:legalval selected="true">Double (using Format string)</sci:legalval>
								<sci:legalval>DateTime (using Format string)</sci:legalval>
							</sci:arg>
							<sci:arg name="Property 2 Format String" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>For Double and DateTime types, the format string.

For Double formatting, look online for the format string format for &quot;swprintf&quot;. 

For DateTime formatting, the following is used (from strftime):

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;%a&lt;/b&gt; is replaced by the locale&apos;s abbreviated weekday name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%A&lt;/b&gt; is replaced by the locale&apos;s full weekday name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%b&lt;/b&gt; is replaced by the locale&apos;s abbreviated month name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%B&lt;/b&gt; is replaced by the locale&apos;s full month name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%c&lt;/b&gt; is replaced by the locale&apos;s appropriate date and time representation.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%C&lt;/b&gt; is replaced by the century number (the year divided by 100 and truncated to an integer) as a decimal number [00-99].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%d&lt;/b&gt; is replaced by the day of the month as a decimal number [01,31].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%D&lt;/b&gt; same as %m/%d/%y.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%e&lt;/b&gt; is replaced by the day of the month as a decimal number [1,31]; a single digit is preceded by a space.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%h&lt;/b&gt; same as %b.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%H&lt;/b&gt; is replaced by the hour (24-hour clock) as a decimal number [00,23].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%I&lt;/b&gt; is replaced by the hour (12-hour clock) as a decimal number [01,12].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%j&lt;/b&gt; is replaced by the day of the year as a decimal number [001,366].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%m&lt;/b&gt; is replaced by the month as a decimal number [01,12].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%M&lt;/b&gt; is replaced by the minute as a decimal number [00,59].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%n&lt;/b&gt; is replaced by a newline character.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%p&lt;/b&gt; is replaced by the locale&apos;s equivalent of either a.m. or p.m.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%r&lt;/b&gt; is replaced by the time in a.m. and p.m. notation; in the POSIX locale this is equivalent to %I:%M:%S %p.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%R&lt;/b&gt; is replaced by the time in 24 hour notation (%H:%M).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%S&lt;/b&gt; is replaced by the second as a decimal number [00,61].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%t&lt;/b&gt; is replaced by a tab character.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%T&lt;/b&gt; is replaced by the time (%H:%M:%S).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%u&lt;/b&gt; is replaced by the weekday as a decimal number [1,7], with 1 representing Monday.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%U&lt;/b&gt; is replaced by the week number of the year (Sunday as the first day of the week) as a decimal number [00,53].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%V&lt;/b&gt; is replaced by the week number of the year (Monday as the first day of the week) as a decimal number [01,53]. If the week containing 1 January has four or more days in the new year, then it is considered week 1. Otherwise, it is the last week of the previous year, and the next week is week 1.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%w&lt;/b&gt; is replaced by the weekday as a decimal number [0,6], with 0 representing Sunday.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%W&lt;/b&gt; is replaced by the week number of the year (Monday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Monday are considered to be in week 0.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%x&lt;/b&gt; is replaced by the locale&apos;s appropriate date representation.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%X&lt;/b&gt; is replaced by the locale&apos;s appropriate time representation.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%y&lt;/b&gt; is replaced by the year without century as a decimal number [00,99].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%Y&lt;/b&gt; is replaced by the year with century as a decimal number.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%Z&lt;/b&gt; is replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%%&lt;/b&gt; is replaced by %.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
								<sci:value>%3.2f</sci:value>
							</sci:arg>
							<sci:arg name="Property 3" type="PropertyNameType" required="false" visibility="visible" multi="false">
								<sci:help>The property name </sci:help>
								<sci:member>Property 3 Format</sci:member>
								<sci:member>Property 3 Format String</sci:member>
							</sci:arg>
							<sci:arg name="Property 3 Format" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>The format we wish to convert the value to. Missing values are ignored.</sci:help>
								<sci:legalval selected="true">Boolean (TF)</sci:legalval>
								<sci:legalval>Boolean (True False)</sci:legalval>
								<sci:legalval>Boolean (YN)</sci:legalval>
								<sci:legalval>Boolean (10)</sci:legalval>
								<sci:legalval>Double (using Format string)</sci:legalval>
								<sci:legalval>DateTime (using Format string)</sci:legalval>
							</sci:arg>
							<sci:arg name="Property 3 Format String" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>For Double and DateTime types, the format string.

For Double formatting, look online for the format string format for &quot;swprintf&quot;. 

For DateTime formatting, the following is used (from strftime):

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;%a&lt;/b&gt; is replaced by the locale&apos;s abbreviated weekday name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%A&lt;/b&gt; is replaced by the locale&apos;s full weekday name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%b&lt;/b&gt; is replaced by the locale&apos;s abbreviated month name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%B&lt;/b&gt; is replaced by the locale&apos;s full month name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%c&lt;/b&gt; is replaced by the locale&apos;s appropriate date and time representation.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%C&lt;/b&gt; is replaced by the century number (the year divided by 100 and truncated to an integer) as a decimal number [00-99].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%d&lt;/b&gt; is replaced by the day of the month as a decimal number [01,31].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%D&lt;/b&gt; same as %m/%d/%y.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%e&lt;/b&gt; is replaced by the day of the month as a decimal number [1,31]; a single digit is preceded by a space.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%h&lt;/b&gt; same as %b.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%H&lt;/b&gt; is replaced by the hour (24-hour clock) as a decimal number [00,23].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%I&lt;/b&gt; is replaced by the hour (12-hour clock) as a decimal number [01,12].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%j&lt;/b&gt; is replaced by the day of the year as a decimal number [001,366].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%m&lt;/b&gt; is replaced by the month as a decimal number [01,12].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%M&lt;/b&gt; is replaced by the minute as a decimal number [00,59].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%n&lt;/b&gt; is replaced by a newline character.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%p&lt;/b&gt; is replaced by the locale&apos;s equivalent of either a.m. or p.m.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%r&lt;/b&gt; is replaced by the time in a.m. and p.m. notation; in the POSIX locale this is equivalent to %I:%M:%S %p.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%R&lt;/b&gt; is replaced by the time in 24 hour notation (%H:%M).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%S&lt;/b&gt; is replaced by the second as a decimal number [00,61].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%t&lt;/b&gt; is replaced by a tab character.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%T&lt;/b&gt; is replaced by the time (%H:%M:%S).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%u&lt;/b&gt; is replaced by the weekday as a decimal number [1,7], with 1 representing Monday.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%U&lt;/b&gt; is replaced by the week number of the year (Sunday as the first day of the week) as a decimal number [00,53].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%V&lt;/b&gt; is replaced by the week number of the year (Monday as the first day of the week) as a decimal number [01,53]. If the week containing 1 January has four or more days in the new year, then it is considered week 1. Otherwise, it is the last week of the previous year, and the next week is week 1.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%w&lt;/b&gt; is replaced by the weekday as a decimal number [0,6], with 0 representing Sunday.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%W&lt;/b&gt; is replaced by the week number of the year (Monday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Monday are considered to be in week 0.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%x&lt;/b&gt; is replaced by the locale&apos;s appropriate date representation.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%X&lt;/b&gt; is replaced by the locale&apos;s appropriate time representation.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%y&lt;/b&gt; is replaced by the year without century as a decimal number [00,99].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%Y&lt;/b&gt; is replaced by the year with century as a decimal number.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%Z&lt;/b&gt; is replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%%&lt;/b&gt; is replaced by %.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
							</sci:arg>
							<sci:arg name="Property 4" type="PropertyNameType" required="false" visibility="visible" multi="false">
								<sci:help>The property name </sci:help>
								<sci:member>Property 4 Format</sci:member>
								<sci:member>Property 4 Format String</sci:member>
							</sci:arg>
							<sci:arg name="Property 4 Format" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>The format we wish to convert the value to. Missing values are ignored.</sci:help>
								<sci:legalval selected="true">Boolean (TF)</sci:legalval>
								<sci:legalval>Boolean (True False)</sci:legalval>
								<sci:legalval>Boolean (YN)</sci:legalval>
								<sci:legalval>Boolean (10)</sci:legalval>
								<sci:legalval>Double (using Format string)</sci:legalval>
								<sci:legalval>DateTime (using Format string)</sci:legalval>
							</sci:arg>
							<sci:arg name="Property 4 Format String" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>For Double and DateTime types, the format string.

For Double formatting, look online for the format string format for &quot;swprintf&quot;. 

For DateTime formatting, the following is used (from strftime):

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;%a&lt;/b&gt; is replaced by the locale&apos;s abbreviated weekday name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%A&lt;/b&gt; is replaced by the locale&apos;s full weekday name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%b&lt;/b&gt; is replaced by the locale&apos;s abbreviated month name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%B&lt;/b&gt; is replaced by the locale&apos;s full month name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%c&lt;/b&gt; is replaced by the locale&apos;s appropriate date and time representation.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%C&lt;/b&gt; is replaced by the century number (the year divided by 100 and truncated to an integer) as a decimal number [00-99].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%d&lt;/b&gt; is replaced by the day of the month as a decimal number [01,31].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%D&lt;/b&gt; same as %m/%d/%y.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%e&lt;/b&gt; is replaced by the day of the month as a decimal number [1,31]; a single digit is preceded by a space.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%h&lt;/b&gt; same as %b.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%H&lt;/b&gt; is replaced by the hour (24-hour clock) as a decimal number [00,23].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%I&lt;/b&gt; is replaced by the hour (12-hour clock) as a decimal number [01,12].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%j&lt;/b&gt; is replaced by the day of the year as a decimal number [001,366].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%m&lt;/b&gt; is replaced by the month as a decimal number [01,12].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%M&lt;/b&gt; is replaced by the minute as a decimal number [00,59].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%n&lt;/b&gt; is replaced by a newline character.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%p&lt;/b&gt; is replaced by the locale&apos;s equivalent of either a.m. or p.m.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%r&lt;/b&gt; is replaced by the time in a.m. and p.m. notation; in the POSIX locale this is equivalent to %I:%M:%S %p.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%R&lt;/b&gt; is replaced by the time in 24 hour notation (%H:%M).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%S&lt;/b&gt; is replaced by the second as a decimal number [00,61].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%t&lt;/b&gt; is replaced by a tab character.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%T&lt;/b&gt; is replaced by the time (%H:%M:%S).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%u&lt;/b&gt; is replaced by the weekday as a decimal number [1,7], with 1 representing Monday.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%U&lt;/b&gt; is replaced by the week number of the year (Sunday as the first day of the week) as a decimal number [00,53].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%V&lt;/b&gt; is replaced by the week number of the year (Monday as the first day of the week) as a decimal number [01,53]. If the week containing 1 January has four or more days in the new year, then it is considered week 1. Otherwise, it is the last week of the previous year, and the next week is week 1.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%w&lt;/b&gt; is replaced by the weekday as a decimal number [0,6], with 0 representing Sunday.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%W&lt;/b&gt; is replaced by the week number of the year (Monday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Monday are considered to be in week 0.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%x&lt;/b&gt; is replaced by the locale&apos;s appropriate date representation.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%X&lt;/b&gt; is replaced by the locale&apos;s appropriate time representation.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%y&lt;/b&gt; is replaced by the year without century as a decimal number [00,99].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%Y&lt;/b&gt; is replaced by the year with century as a decimal number.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%Z&lt;/b&gt; is replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%%&lt;/b&gt; is replaced by %.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
							</sci:arg>
							<sci:arg name="Property 5" type="PropertyNameType" required="false" visibility="visible" multi="false">
								<sci:help>The property name </sci:help>
								<sci:member>Property 5 Format</sci:member>
								<sci:member>Property 5 Format String</sci:member>
							</sci:arg>
							<sci:arg name="Property 5 Format" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>The format we wish to convert the value to. Missing values are ignored.</sci:help>
								<sci:legalval selected="true">Boolean (TF)</sci:legalval>
								<sci:legalval>Boolean (True False)</sci:legalval>
								<sci:legalval>Boolean (YN)</sci:legalval>
								<sci:legalval>Boolean (10)</sci:legalval>
								<sci:legalval>Double (using Format string)</sci:legalval>
								<sci:legalval>DateTime (using Format string)</sci:legalval>
							</sci:arg>
							<sci:arg name="Property 5 Format String" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>For Double and DateTime types, the format string.

For Double formatting, look online for the format string format for &quot;swprintf&quot;. 

For DateTime formatting, the following is used (from strftime):

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;%a&lt;/b&gt; is replaced by the locale&apos;s abbreviated weekday name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%A&lt;/b&gt; is replaced by the locale&apos;s full weekday name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%b&lt;/b&gt; is replaced by the locale&apos;s abbreviated month name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%B&lt;/b&gt; is replaced by the locale&apos;s full month name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%c&lt;/b&gt; is replaced by the locale&apos;s appropriate date and time representation.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%C&lt;/b&gt; is replaced by the century number (the year divided by 100 and truncated to an integer) as a decimal number [00-99].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%d&lt;/b&gt; is replaced by the day of the month as a decimal number [01,31].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%D&lt;/b&gt; same as %m/%d/%y.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%e&lt;/b&gt; is replaced by the day of the month as a decimal number [1,31]; a single digit is preceded by a space.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%h&lt;/b&gt; same as %b.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%H&lt;/b&gt; is replaced by the hour (24-hour clock) as a decimal number [00,23].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%I&lt;/b&gt; is replaced by the hour (12-hour clock) as a decimal number [01,12].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%j&lt;/b&gt; is replaced by the day of the year as a decimal number [001,366].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%m&lt;/b&gt; is replaced by the month as a decimal number [01,12].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%M&lt;/b&gt; is replaced by the minute as a decimal number [00,59].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%n&lt;/b&gt; is replaced by a newline character.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%p&lt;/b&gt; is replaced by the locale&apos;s equivalent of either a.m. or p.m.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%r&lt;/b&gt; is replaced by the time in a.m. and p.m. notation; in the POSIX locale this is equivalent to %I:%M:%S %p.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%R&lt;/b&gt; is replaced by the time in 24 hour notation (%H:%M).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%S&lt;/b&gt; is replaced by the second as a decimal number [00,61].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%t&lt;/b&gt; is replaced by a tab character.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%T&lt;/b&gt; is replaced by the time (%H:%M:%S).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%u&lt;/b&gt; is replaced by the weekday as a decimal number [1,7], with 1 representing Monday.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%U&lt;/b&gt; is replaced by the week number of the year (Sunday as the first day of the week) as a decimal number [00,53].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%V&lt;/b&gt; is replaced by the week number of the year (Monday as the first day of the week) as a decimal number [01,53]. If the week containing 1 January has four or more days in the new year, then it is considered week 1. Otherwise, it is the last week of the previous year, and the next week is week 1.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%w&lt;/b&gt; is replaced by the weekday as a decimal number [0,6], with 0 representing Sunday.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%W&lt;/b&gt; is replaced by the week number of the year (Monday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Monday are considered to be in week 0.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%x&lt;/b&gt; is replaced by the locale&apos;s appropriate date representation.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%X&lt;/b&gt; is replaced by the locale&apos;s appropriate time representation.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%y&lt;/b&gt; is replaced by the year without century as a decimal number [00,99].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%Y&lt;/b&gt; is replaced by the year with century as a decimal number.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%Z&lt;/b&gt; is replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%%&lt;/b&gt; is replaced by %.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
							</sci:arg>
							<sci:arg name="Property 6" type="PropertyNameType" required="false" visibility="visible" multi="false">
								<sci:help>The property name </sci:help>
								<sci:member>Property 6 Format</sci:member>
								<sci:member>Property 6 Format String</sci:member>
							</sci:arg>
							<sci:arg name="Property 6 Format" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>The format we wish to convert the value to. Missing values are ignored.</sci:help>
								<sci:legalval selected="true">Boolean (TF)</sci:legalval>
								<sci:legalval>Boolean (True False)</sci:legalval>
								<sci:legalval>Boolean (YN)</sci:legalval>
								<sci:legalval>Boolean (10)</sci:legalval>
								<sci:legalval>Double (using Format string)</sci:legalval>
								<sci:legalval>DateTime (using Format string)</sci:legalval>
							</sci:arg>
							<sci:arg name="Property 6 Format String" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>For Double and DateTime types, the format string.

For Double formatting, look online for the format string format for &quot;swprintf&quot;. 

For DateTime formatting, the following is used (from strftime):

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;%a&lt;/b&gt; is replaced by the locale&apos;s abbreviated weekday name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%A&lt;/b&gt; is replaced by the locale&apos;s full weekday name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%b&lt;/b&gt; is replaced by the locale&apos;s abbreviated month name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%B&lt;/b&gt; is replaced by the locale&apos;s full month name.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%c&lt;/b&gt; is replaced by the locale&apos;s appropriate date and time representation.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%C&lt;/b&gt; is replaced by the century number (the year divided by 100 and truncated to an integer) as a decimal number [00-99].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%d&lt;/b&gt; is replaced by the day of the month as a decimal number [01,31].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%D&lt;/b&gt; same as %m/%d/%y.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%e&lt;/b&gt; is replaced by the day of the month as a decimal number [1,31]; a single digit is preceded by a space.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%h&lt;/b&gt; same as %b.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%H&lt;/b&gt; is replaced by the hour (24-hour clock) as a decimal number [00,23].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%I&lt;/b&gt; is replaced by the hour (12-hour clock) as a decimal number [01,12].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%j&lt;/b&gt; is replaced by the day of the year as a decimal number [001,366].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%m&lt;/b&gt; is replaced by the month as a decimal number [01,12].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%M&lt;/b&gt; is replaced by the minute as a decimal number [00,59].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%n&lt;/b&gt; is replaced by a newline character.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%p&lt;/b&gt; is replaced by the locale&apos;s equivalent of either a.m. or p.m.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%r&lt;/b&gt; is replaced by the time in a.m. and p.m. notation; in the POSIX locale this is equivalent to %I:%M:%S %p.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%R&lt;/b&gt; is replaced by the time in 24 hour notation (%H:%M).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%S&lt;/b&gt; is replaced by the second as a decimal number [00,61].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%t&lt;/b&gt; is replaced by a tab character.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%T&lt;/b&gt; is replaced by the time (%H:%M:%S).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%u&lt;/b&gt; is replaced by the weekday as a decimal number [1,7], with 1 representing Monday.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%U&lt;/b&gt; is replaced by the week number of the year (Sunday as the first day of the week) as a decimal number [00,53].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%V&lt;/b&gt; is replaced by the week number of the year (Monday as the first day of the week) as a decimal number [01,53]. If the week containing 1 January has four or more days in the new year, then it is considered week 1. Otherwise, it is the last week of the previous year, and the next week is week 1.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%w&lt;/b&gt; is replaced by the weekday as a decimal number [0,6], with 0 representing Sunday.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%W&lt;/b&gt; is replaced by the week number of the year (Monday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Monday are considered to be in week 0.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%x&lt;/b&gt; is replaced by the locale&apos;s appropriate date representation.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%X&lt;/b&gt; is replaced by the locale&apos;s appropriate time representation.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%y&lt;/b&gt; is replaced by the year without century as a decimal number [00,99].&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%Y&lt;/b&gt; is replaced by the year with century as a decimal number.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%Z&lt;/b&gt; is replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;%%&lt;/b&gt; is replaced by %.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Implementation Of" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:legalval>Normalize Property Types</sci:legalval>
								<sci:legalval>Clean Data</sci:legalval>
								<sci:legalval selected="true">Set Property Format</sci:legalval>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Sep 14 07:45:19 2017</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Destination&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>
#prop1 := trim(Parameter(&apos;Property 1&apos;, 2));
#prop1format := trim(Parameter(&apos;Property 1 Format&apos;, 2));
#prop2 := trim(Parameter(&apos;Property 2&apos;, 2));
#dots := &apos;&apos;;
if (StrLength(#prop2) &gt; 0) then
	#dots := &apos;,...&apos;;
end if;
if(strlength(#prop1) &gt; 0) then	
	&apos;Format &apos; . #prop1 . &apos; to &apos; . #prop1Format . #dots;
else
	&apos;&apos;;
end if;</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>COMPONENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{55C0EE28-B94C-4A98-A8E3-956D367F6B0E}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>1242 -820</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Convert all property values (that are not missing values) to the desired format</sci:value>
								<sci:value>You provide a list of properties and the desired format. Data containing any of those properties will have their values so formatted.

You can also manage &lt;i&gt;missing values&lt;i/&gt;, which are values that are ignored and not formatted. </sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>The Normalized data records, or the summary for each property.</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>4</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Property Manipulators\Set Property Format</sci:value>
							</sci:arg>
						</sci:component>
						<sci:proplist>
							<sci:propval name="RegistrationVersion">18.1.0.1590</sci:propval>
						</sci:proplist>
					</sci:data>
					<sci:data object="SciTegic.PropertyFunctions.1">
						<sci:component name="Keep Properties" version="2">
							<sci:arg name="PropertyList" type="PropertyNameType" required="true" visibility="visible" multi="true">
								<sci:help>The list of property names to keep</sci:help>
								<sci:member>RenameList</sci:member>
								<sci:value>canonical_smiles</sci:value>
								<sci:value>ChEMBL25 NET Prediction Model</sci:value>
								<sci:value>ChEMBL25 NET Prediction Model_StdDev</sci:value>
								<sci:value>idnumber</sci:value>
							</sci:arg>
							<sci:arg name="RenameList" type="PropertyNameType" required="false" visibility="visible" multi="true">
								<sci:help>If provided, it causes the properties given in PropertyList to be 
renamed to the corresponding name in this list.  If not provided, then no properties are renamed.</sci:help>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:help>the action to perform</sci:help>
								<sci:value>Keep</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Tue Sep 13 07:18:38 2016</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Destination&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>#propertyList := Parameter(&apos;PropertyList&apos;);
#displayName := &apos;&apos;;
for #i in 1 .. numvalues(#propertyList) loop
  #prop := trim(#propertyList[#i]);
  if (strlength(#prop) &gt; 0) then
    if (strlength(#displayName) &gt; 0) then
	  #displayName .= &apos;, &apos;;
	end if;
    #displayName .= #prop;
  end if;
end loop;
if(strlength(#displayName) &gt; 0) then		
	&apos;Keep &apos; . #displayName;
else
	&quot;&quot;;
end if;</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol AutoLayout</sci:help>
								<sci:value>true</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>EXPRESSIONNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
								<sci:help>Component Revision</sci:help>
								<sci:value>100</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>SubProtocol</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolScale" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Scale</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>1530 -820</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{456195EF-9708-4367-B3DD-21EBF3796604}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Keeps only the specified properties</sci:value>
								<sci:value>&lt;p&gt;For each incoming data record, retains only the properties found in the list of property names specified by &lt;i&gt;PropertyList&lt;/i&gt;.  All other properties are removed.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To remove specified properties from each data record, use 
&lt;a href=&quot;javascript:DoLink(&apos;{C2ED35FF-5397-4877-AADB-10F1A15D60E2}&apos;)&quot;&gt;Remove Properties&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>With only the specified properties remaining</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>17.1.0.119</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>By Ref</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Sticky Notes</sci:help>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>5</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Property Manipulators\Keep Properties</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.PropertyFunctions.1">
						<sci:component name="Rename Properties" version="2">
							<sci:arg name="Original Property Names" type="PropertyNameType" required="true" visibility="visible" multi="true">
								<sci:help>An array of property names to rename. The new name will be the corresponding name in &lt;i&gt;New Property Names&lt;i&gt;.</sci:help>
								<sci:value>ChEMBL25 NET Prediction Model</sci:value>
								<sci:value>ChEMBL25 NET Prediction Model_StdDev</sci:value>
							</sci:arg>
							<sci:arg name="New Property Names" type="PropertyNameType" required="true" visibility="visible" multi="true">
								<sci:help>An array of the new property names. The original name will be the corresponding name in &lt;i&gt;Original Property Names&lt;i&gt;.</sci:help>
								<sci:value>Aff_NET_Pred</sci:value>
								<sci:value>Aff_NET_Pred_StdDev</sci:value>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:help>the action to perform</sci:help>
								<sci:value>RenameProperties</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Tue Feb 28 12:30:36 2017</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Destination&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>
#orig := Parameter(&apos;Original Property Names&apos;);
#new := Parameter(&apos;New Property Names&apos;);
if (numvalues(#orig) == 0 OR #orig[1] eq &quot;&quot; OR numvalues(#new) == 0 OR #new[1] eq &quot;&quot;) then
	&quot;&quot;;
else
  #display := &apos;Rename &apos; . #orig[1] . &apos; to &apos; . #new[1];
  if (numvalues(#orig) &gt; 1) then
    #display .= &apos;, ...&apos;;
  end if;
  #display;
end if;
</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol AutoLayout</sci:help>
								<sci:value>true</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>EXPRESSIONNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
								<sci:help>Component Revision</sci:help>
								<sci:value>100</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>SubProtocol</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolScale" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Scale</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>1818 -820</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{04496ABE-C1D2-43D2-83D4-35AC9FC8D501}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Rename the specified properties</sci:value>
								<sci:value>&lt;p&gt;For each incoming data record, rename the properties found in the &lt;i&gt;Original Property Names&lt;/i&gt; list to the names provided in &lt;i&gt;New Property Names&lt;/i&gt;.

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To remove specified properties from each data record, use 
&lt;a href=&quot;javascript:DoLink(&apos;{C2ED35FF-5397-4877-AADB-10F1A15D60E2}&apos;)&quot;&gt;Remove Properties&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>With only the specified properties remaining</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>18.1.0.1376</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>By Ref</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Sticky Notes</sci:help>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>6</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Property Manipulators\Rename Properties</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:connectid from="20" to="21" type="true"/>
					<sci:connectid from="21" to="22" type="true"/>
					<sci:connectid from="0" to="1" type="true"/>
					<sci:connectid from="1" to="2" type="true"/>
					<sci:connectid from="2" to="3" type="true"/>
					<sci:connectid from="3" to="4" type="true"/>
					<sci:connectid from="4" to="5" type="true"/>
					<sci:connectid from="5" to="6" type="true"/>
				</sci:protocol>
			</sci:data>
			<sci:data object="SciTegic.SDWriter.1">
				<sci:component name="SD Writer" version="2">
					<sci:arg name="Destination" type="DestinationURLType" required="true" visibility="visible" multi="false" expanded="true">
						<sci:help>The filename or URL for the destination data. To save in compressed (zipped) format, add the extension .gz or .zip to the filename.</sci:help>
						<sci:member>Maximum</sci:member>
						<sci:member>IfFileExists</sci:member>
						<sci:member>CharacterEncoding</sci:member>
						<sci:value>$(UserDir)/PP/Predictions/NET/EnamineNETPredictions.sd.gz</sci:value>
					</sci:arg>
					<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
						<sci:help>The maximum number of data records to write (all if value is empty)</sci:help>
					</sci:arg>
					<sci:arg name="IfFileExists" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>What to do if the given destination file already exists</sci:help>
						<sci:legalval>Overwrite</sci:legalval>
						<sci:legalval selected="true">Append</sci:legalval>
						<sci:legalval>Halt</sci:legalval>
					</sci:arg>
					<sci:arg name="CharacterEncoding" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;Indicates the character set that will be used within the file.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;ANSI&lt;/b&gt; 
is the default and specifies a character set where each character is defined by a single byte.  This 
allows the Latin-1 (ISO-8859-1) character set to be written to the file.  Virtually all applications 
can read these files.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;UTF-8&lt;/b&gt; specifies a variable length character 
set.  Each character is represented by 1 to 6 bytes.  This allows writing out all extended characters 
specified in the Unicode character sets while maintaining reasonably lengthed files.  Many applications 
do not support UTF-8 files.&lt;/li&gt;
 
&lt;li&gt;&lt;b&gt;Unicode&lt;/b&gt; and &lt;b&gt;Unicode big 
endian&lt;/b&gt; are sets where each character is represented by exactly 2 bytes (also known as UCS-2).  
Depending on which is used will determine the order in which the bytes appear for each character. Many 
applications do not support Unicode or Unicode big endian files.&lt;/li&gt;
&lt;/ul&gt;
 
&lt;p&gt;&lt;b&gt;See 
Also&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For more information about each of these encoding styles, 
go to &lt;a href=&quot;javascript:DoLink(&apos;http://www.unicode.org/&apos;)&quot;&gt;http://www.unicode.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</sci:help>
						<sci:legalval selected="true">ANSI</sci:legalval>
						<sci:legalval>UTF-8</sci:legalval>
						<sci:legalval>Unicode</sci:legalval>
						<sci:legalval>Unicode big endian</sci:legalval>
					</sci:arg>
					<sci:arg name="SD Format Options" type="StringType" required="false" visibility="visible" multi="true" expanded="true">
						<sci:help>Options for the SD Writer:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Write Structure&lt;/b&gt;:  Includes 
available structure information with each record.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Write Properties&lt;/b&gt;:  
Includes available property information with each record.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Write Date&lt;/b&gt;:  
Writes the current date into the file.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Write Fully Padded Lines&lt;/b&gt;:  
Writes all the fields in the Atoms and Bonds lines, padding with zeroes those fields with undefined values.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Write 
Query Info&lt;/b&gt;:  Writes out MOL-file query information and also additional SciTegic molecule query 
information to the properties of the SD record.
To read the SciTegic-specific part of this information 
back in, use a SciTegic SD Reader with the ReadQueryInfo parameter set to True. (This option writes out 
substructure queries that may have come from SMARTS queries. It also stops writing query information 
for viewers that cannot handle it).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Write Two Spaces In Data Header Line&lt;/b&gt;:  
When on, data headers will be &lt;TT&gt;&amp;gt&amp;nbsp&amp;nbsp&amp;ltPropName&amp;gt&lt;/TT&gt;.  
When off, data headers will be &lt;TT&gt;&quot;&amp;gt&amp;nbsp&amp;ltPropName&amp;gt&quot;&lt;/TT&gt;.  
The standard does not specify how many spaces there should be. Making this option available for compatibility 
with 3rd party readers.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Wrap Long Property Lines&lt;/b&gt;:  By the CTFile 
standard property lines are limited to 200 characters.  When selected, properties longer than 200 characters 
are with newlines every 200 characters.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Skip Null Or Empty String Properties&lt;/b&gt;:  
When selected, properties that are either null or empty strings will be skipped upon SD export.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Write 
Dot For Empty String Properties&lt;/b&gt;:  In the CTFile format, an empty line is used to terminate 
a property value.  Because of this, there is a convention of writing a &apos;.&apos; on an empty line 
to distinguish between a property that has an empty string value (&quot;&quot;) and a property that has 
no value (or a null value).  Selecting this option enables this convention and empty string properties 
are written with a &apos;.&apos; on the first line and an empty second line to terminate the property.  
When not selected, empty string properties will be written with only a single empty terminating line 
(the same as null properties).  The default for this option is &quot;on&quot; to match the behavior in 
previous versions.  Note that empty string members of string array properties (i.e. empty lines in multi-line 
properties) will always be written with a &apos;.&apos; to prevent an empty line from terminating the 
property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Write Templates&lt;/b&gt;:  When the molecule has SCSR sequence 
atoms that refer to residue templates, this parameter specifies whether or not to include all the template 
definitions (local and global) in a TEMPLATE block as part of the CTAB, or to include only the local 
SCSR templates, the ones that are not defined in the global templates specified by &lt;i&gt;Global Templates&lt;/i&gt; 
in the SD Reader component. The local templates always need to be saved because the SD Reader would not 
be able to read the molecule otherwise. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;Convert To H2 And H+ Atom Types:&lt;/b&gt; 
&apos;H2&apos; and &apos;H+&apos; are two non-standard element types that can be assigned to atoms by 
the BIOVIA Draw sketcher. They represent unattached Hydrogen (a Hydrogen molecule) and charged Hydrogen 
(a proton), respectively. When this parameter is selected, explicit hydrogen atoms are checked to determine 
if they can be classified as &apos;H2&apos; or &apos;H+&apos; and, if so, they are written out with these 
special types instead of just &apos;H&apos;.&lt;/li&gt; 
&lt;li&gt;&lt;b&gt;Convert Pi Systems To Radicals:&lt;/b&gt; 
When checked, converts pi systems involved in pi bonds into their radical representation which is supported 
by both the V2000 and V3000 formats.  When not checked, pi bonds and pi systems are written out in V3000 
format using multiple-attachment point coordination bonds (type 9).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Use 
2H and 3H for Hydrogen Isotopes&lt;/b&gt;: Toggles whether to explicitly write out hydrogen isotopes 
using M ISO lines in the V2000 format or MASS values in the V3000 format.  When not checked, the simpler 
&quot;D&quot; and &quot;T&quot; symbols will be used.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&amp;nbsp
&lt;/p&gt;
&lt;b&gt;V2000 
and V3000 Format Parameters&lt;/b&gt;
&lt;p&gt;
The next two options can be used to force the SD file 
format to be exclusively V2000 or V3000. If none of the options is selected, the input molecules are 
written in V2000 format unless they contain features that require the use of the V3000 format. These 
features include presence of enhanced stereo markings, more than 999 atoms or bonds, atom lists with 
more than 16 atom types or bonds of zero order (dative, coordination, hydrogen bonds). In this case, 
the output SD file might contain a mix of V2000 and V300 molecules.
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Use 
V3000 Format&lt;/b&gt;:  Force the format to be V3000 for all molecules.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Use 
V2000 Format&lt;/b&gt;:  Force the format to be V2000 for all molecules. Any molecule with features that 
require the V3000 format is sent to the Fail port. Note that the Fail port in the SD Writer is not active 
by default. If you want to use this option, make sure to activate the component Fail port by right-clicking 
on the component and selecting the &lt;i&gt;Toggle Ports&lt;/i&gt; menu.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
						<sci:legalval selected="true">Write Structure</sci:legalval>
						<sci:legalval selected="true">Write Properties</sci:legalval>
						<sci:legalval selected="true">Write Date</sci:legalval>
						<sci:legalval>Write Fully Padded Lines</sci:legalval>
						<sci:legalval selected="true">Write Query Info</sci:legalval>
						<sci:legalval>Write Two Spaces In Data Header Line</sci:legalval>
						<sci:legalval selected="true">Wrap Long Property Lines</sci:legalval>
						<sci:legalval>Skip Null Or Empty String Properties</sci:legalval>
						<sci:legalval selected="true">Write Dot For Empty String Properties</sci:legalval>
						<sci:legalval>Use V3000 Format</sci:legalval>
						<sci:legalval>Use V2000 Format</sci:legalval>
						<sci:legalval selected="true">Write Templates</sci:legalval>
						<sci:legalval>Convert To H2 And H+ Atom Types</sci:legalval>
						<sci:legalval>Convert Pi Systems To Radicals</sci:legalval>
						<sci:legalval>Use 2H and 3H for Hydrogen Isotopes</sci:legalval>
					</sci:arg>
					<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false">
						<sci:help>Contains less commonly used parameters</sci:help>
						<sci:member>Name</sci:member>
						<sci:member>Comment</sci:member>
					</sci:arg>
					<sci:arg name="Name" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>Name of property that holds the name of each molecule</sci:help>
						<sci:value>Name</sci:value>
					</sci:arg>
					<sci:arg name="Comment" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>Name of the property that holds the comment to write in the CTAB header for each molecule</sci:help>
						<sci:value>Comment</sci:value>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval>ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="HasConvertPiSystemOption" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="HasWriteDotOption" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/chemistry</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Tue Oct 07 13:39:57 2014</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>SD Writer</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>DOCUMENTNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{DC8EE7B0-0620-42FE-944C-B4CD1E79480E}</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>SD Writer</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>1818 -470</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Writes an SD (structured data) file</sci:value>
						<sci:value>Writes the molecule and associated property data to the &lt;i&gt;Destination&lt;/i&gt; 
file in SD format.

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To read files 
in SD format, use the &lt;a href=&quot;javascript:DoLink(&apos;{CA65B896-4FE6-4E3A-B884-DC16B53B8D26}&apos;)&quot;&gt;SD 
Reader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To convert molecules to and from a text property containing the 
molecular connection table (CTAB) in MOL format, use &lt;a href=&quot;javascript:DoLink(&apos;{E622FBD9-9FA9-451A-A102-1800B5F28B6D}&apos;)&quot;&gt;Molecule 
to CTAB&lt;/a&gt; and &lt;a href=&quot;javascript:DoLink(&apos;{7D354B65-DDD8-4EA4-83A7-21501A8A6852}&apos;)&quot;&gt;Molecule 
from CTAB&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt;</sci:value>
						<sci:value>Molecule</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>9.5.0.606</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>7</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Chemistry\Data Access and Manipulation\Writers\SD Writer</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.EvaluateExpression.1">
				<sci:component name="Custom Manipulator (PilotScript)" version="2">
					<sci:arg name="Expression" type="ExpressionType" required="true" visibility="visible" multi="false" expanded="true" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>Expression (or list of expressions separated by semi-colons) to evaluate.</sci:help>
						<sci:member>Initial Expression</sci:member>
						<sci:member>Final Expression</sci:member>
						<sci:member>Keep Calculated Properties</sci:member>
						<sci:value>/* mannual entry of NSC87877 */

//SHP 1
property(&apos;smiles&apos;) := &quot;OC2=C(/N=N/C3=CC=C(C=C(S(=O)(O)=O)C=C4)C4=C3)C=C(S(=O)(O)=O)C1=CC=CN=C12&quot;;
property(&apos;name&apos;) := &quot;NSC87877&quot;;
property(&apos;accession&apos;) := &apos;P29350&apos;; //shp-2
property(&apos;pchembl_value&apos;) := -log(355/1000000000); //IC50 = 355 nM

//SHP 2
property(&apos;smiles&apos;) := &quot;OC2=C(/N=N/C3=CC=C(C=C(S(=O)(O)=O)C=C4)C4=C3)C=C(S(=O)(O)=O)C1=CC=CN=C12&quot;;
property(&apos;name&apos;) := &quot;NSC87877&quot;;
property(&apos;accession&apos;) := &apos;Q06124&apos;; //shp-2
property(&apos;pchembl_value&apos;) := -log(318/1000000000); //IC50 = 318 nM
</sci:value>
					</sci:arg>
					<sci:arg name="Initial Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>&lt;p&gt;
This expression is executed only the first time data passes into the component.
&lt;p/&gt; 
Since there is no data available at initialization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="Final Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>&lt;p&gt;
This expression is executed only at finalization (after the last data passes out of the component).
&lt;p/&gt; 
Since there is no data available at finalization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="Keep Calculated Properties" type="BoolType" required="true" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>Adds any properties calculated in this component to a data record&apos;s property list.</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval>ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Custom Error Message</sci:help>
					</sci:arg>
					<sci:arg name="Do Screen" type="BoolType" required="false" visibility="nevershow" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>When TRUE, controls which exit port is used for
each data record by evaluating the final expression
(or only one) listed in the &quot;Expression&quot; parameter.
   -Pass (green) port when expression true
   -Fail (red) port when expression false</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="ExpressionVersion" type="LongType" required="false" visibility="nevershow" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>Version of expression parser to use.</sci:help>
						<sci:value>2</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Mon Jan 21 09:55:43 2008</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>mannual entry of MSE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
						<sci:help>Automatically update the component display name when the &quot;Expression&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
						<sci:value>#displayName := trim(Parameter(&apos;Expression&apos;, 2));
if(strlength(#displayName) &gt; 0) then	
	/* Find the first line break */
	#nl := FindSubstring(#displayName, &quot;\r&quot;);
	if #nl &lt;= 0 then
		#nl := FindSubstring(#displayName, &quot;\n&quot;);
	end if;

	/* Keep the first line only */
	if (#nl &gt; 0) then
		StrErase(#displayName, #nl);
	end if;
	
	#displayName;
else
	&quot;&quot;;
end if;</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Custom Manipulator (PilotScript)</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>EXPRESSIONNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>4</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{0995D675-7EE2-432C-95DF-E91C14052B22}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>90 -820</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Applies a PilotScript expression to each data record
</sci:value>
						<sci:value>&lt;p&gt;PilotScript is the native scripting language in Pipeline Pilot.  It is based on PL/SQL and allows you to query or alter the properties on data records.  For example, the expression:

&lt;blockquote&gt;
&lt;code&gt;A := 10;&lt;/code&gt;
&lt;/blockquote&gt;
creates a property named &quot;A&quot; and sets the value to &quot;10&quot;.&lt;/p&gt;

&lt;p&gt;For each incoming data record the PilotScript statements in &lt;i&gt;Expression&lt;/i&gt; are evaluated.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To initialize global variables such as counters, use &lt;i&gt;Initial Expression&lt;/i&gt;.&lt;/li&gt; 
&lt;li&gt;To clean up global variables or calculate final results use &lt;i&gt;Final Expression&lt;/i&gt;.&lt;/li&gt;
&lt;li&gt;Parameters on Custom Manipulators do not become global variables that can be accessed via &lt;i&gt;@ParameterName&lt;/i&gt; syntax.  They must be accessed by using the &lt;i&gt;Parameter(&apos;ParameterName&apos;)&lt;/i&gt; function or by using token substitution via &lt;i&gt;$(ParameterName)&lt;/i&gt; syntax.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For more information on PilotScript, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/pscript/pscript_overview.htm&apos;)&quot;&gt;PilotScript Overview&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To use PilotScript to filter data records use &lt;a href=&quot;javascript:DoLink(&apos;{DD58ECD1-516F-48FE-A5DB-8328AED680F2}&apos;)&quot;&gt;Custom Filter (PilotScript)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>7.0.0.35</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Property Manipulators\Custom Manipulator (PilotScript)</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.PropertyFunctions.1">
				<sci:component name="Rename Properties" version="2">
					<sci:arg name="Original Property Names" type="PropertyNameType" required="true" visibility="visible" multi="true">
						<sci:help>An array of property names to rename. The new name will be the corresponding name in &lt;i&gt;New Property Names&lt;i&gt;.</sci:help>
						<sci:value>smiles</sci:value>
					</sci:arg>
					<sci:arg name="New Property Names" type="PropertyNameType" required="true" visibility="visible" multi="true">
						<sci:help>An array of the new property names. The original name will be the corresponding name in &lt;i&gt;Original Property Names&lt;i&gt;.</sci:help>
						<sci:value>canonical_smiles</sci:value>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Custom Error Message</sci:help>
					</sci:arg>
					<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:help>the action to perform</sci:help>
						<sci:value>RenameProperties</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Tue Feb 28 12:30:36 2017</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
						<sci:help>Automatically update the component display name when the &quot;Destination&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
						<sci:value>
#orig := Parameter(&apos;Original Property Names&apos;);
#new := Parameter(&apos;New Property Names&apos;);
if (numvalues(#orig) == 0 OR #orig[1] eq &quot;&quot; OR numvalues(#new) == 0 OR #new[1] eq &quot;&quot;) then
	&quot;&quot;;
else
  #display := &apos;Rename &apos; . #orig[1] . &apos; to &apos; . #new[1];
  if (numvalues(#orig) &gt; 1) then
    #display .= &apos;, ...&apos;;
  end if;
  #display;
end if;
</sci:value>
					</sci:arg>
					<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol AutoLayout</sci:help>
						<sci:value>true</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>EXPRESSIONNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
						<sci:help>Component Revision</sci:help>
						<sci:value>100</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>SubProtocol</sci:value>
					</sci:arg>
					<sci:arg name="ProtocolScale" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Scale</sci:help>
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>378 -820</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{04496ABE-C1D2-43D2-83D4-35AC9FC8D501}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Rename the specified properties</sci:value>
						<sci:value>&lt;p&gt;For each incoming data record, rename the properties found in the &lt;i&gt;Original Property Names&lt;/i&gt; list to the names provided in &lt;i&gt;New Property Names&lt;/i&gt;.

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To remove specified properties from each data record, use 
&lt;a href=&quot;javascript:DoLink(&apos;{C2ED35FF-5397-4877-AADB-10F1A15D60E2}&apos;)&quot;&gt;Remove Properties&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value>With only the specified properties remaining</sci:value>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>18.1.0.1376</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>By Ref</sci:help>
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Sticky Notes</sci:help>
					</sci:arg>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>2</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Property Manipulators\Rename Properties</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.PropertyFunctions.1">
				<sci:component name="No-op" version="2">
					<sci:arg name="DataActionOnError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When a General or DataType error occurs during processing:  
  LeaveData: The data is passed unalterd
  ClearData: The data is cleared before being passed (an empty data item)
  DeleteData: The data is deleted and not passed</sci:help>
						<sci:legalval selected="true">LeaveData</sci:legalval>
						<sci:legalval>ClearData</sci:legalval>
						<sci:legalval>DeleteData</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>CustomErrorText</sci:help>
					</sci:arg>
					<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:help>the action to perform</sci:help>
						<sci:value>PassDataToPort</sci:value>
					</sci:arg>
					<sci:arg name="Port" type="LongType" required="true" visibility="nevershow" multi="false">
						<sci:help>the port to pass data to</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>COMPONENTNODE</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Thu Sep 28 16:34:08 2006</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>No-op</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Evaluate Expression</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{6E468A38-A6F7-4371-B65B-501A3ED4C0D9}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>666 -820</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Sends all incoming records out the Pass port unchanged</sci:value>
						<sci:value>&lt;p&gt;Useful in subprotocols to capture the point of input. For example, if you wish to perform two different sequences of operations on the same input data, use No-op as the first component of the subprotocol and connect both pipes to the No-op output port.&lt;/p&gt;

&lt;p&gt;You can also use this component to simplify the layout for complex protocols. For example, if you have three Reader components that need to be connected to three Viewer components, placing a No-op in the middle reduces the number of required connections and clarifies the logic.&lt;/p&gt;
</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>6.0.1.1</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>3</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Utilities\Subprotocol Utilities\No-op</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.PropertyFunctions.1">
				<sci:component name="No-op" version="2">
					<sci:arg name="DataActionOnError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When a General or DataType error occurs during processing:  
  LeaveData: The data is passed unalterd
  ClearData: The data is cleared before being passed (an empty data item)
  DeleteData: The data is deleted and not passed</sci:help>
						<sci:legalval selected="true">LeaveData</sci:legalval>
						<sci:legalval>ClearData</sci:legalval>
						<sci:legalval>DeleteData</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>CustomErrorText</sci:help>
					</sci:arg>
					<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:help>the action to perform</sci:help>
						<sci:value>PassDataToPort</sci:value>
					</sci:arg>
					<sci:arg name="Port" type="LongType" required="true" visibility="nevershow" multi="false">
						<sci:help>the port to pass data to</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>COMPONENTNODE</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Thu Sep 28 16:34:08 2006</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>No-op</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Evaluate Expression</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{6E468A38-A6F7-4371-B65B-501A3ED4C0D9}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>954 -820</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Sends all incoming records out the Pass port unchanged</sci:value>
						<sci:value>&lt;p&gt;Useful in subprotocols to capture the point of input. For example, if you wish to perform two different sequences of operations on the same input data, use No-op as the first component of the subprotocol and connect both pipes to the No-op output port.&lt;/p&gt;

&lt;p&gt;You can also use this component to simplify the layout for complex protocols. For example, if you have three Reader components that need to be connected to three Viewer components, placing a No-op in the middle reduces the number of required connections and clarifies the logic.&lt;/p&gt;
</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>6.0.1.1</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>4</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Utilities\Subprotocol Utilities\No-op</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.PropertyFunctions.1">
				<sci:component name="No-op" version="2">
					<sci:arg name="DataActionOnError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When a General or DataType error occurs during processing:  
  LeaveData: The data is passed unalterd
  ClearData: The data is cleared before being passed (an empty data item)
  DeleteData: The data is deleted and not passed</sci:help>
						<sci:legalval selected="true">LeaveData</sci:legalval>
						<sci:legalval>ClearData</sci:legalval>
						<sci:legalval>DeleteData</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>CustomErrorText</sci:help>
					</sci:arg>
					<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:help>the action to perform</sci:help>
						<sci:value>PassDataToPort</sci:value>
					</sci:arg>
					<sci:arg name="Port" type="LongType" required="true" visibility="nevershow" multi="false">
						<sci:help>the port to pass data to</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>COMPONENTNODE</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Thu Sep 28 16:34:08 2006</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>No-op</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Evaluate Expression</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{6E468A38-A6F7-4371-B65B-501A3ED4C0D9}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>1242 -820</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Sends all incoming records out the Pass port unchanged</sci:value>
						<sci:value>&lt;p&gt;Useful in subprotocols to capture the point of input. For example, if you wish to perform two different sequences of operations on the same input data, use No-op as the first component of the subprotocol and connect both pipes to the No-op output port.&lt;/p&gt;

&lt;p&gt;You can also use this component to simplify the layout for complex protocols. For example, if you have three Reader components that need to be connected to three Viewer components, placing a No-op in the middle reduces the number of required connections and clarifies the logic.&lt;/p&gt;
</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>6.0.1.1</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>5</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Utilities\Subprotocol Utilities\No-op</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.MDLSDReader.1">
				<sci:component name="SD Reader" version="2">
					<sci:arg name="Source" type="URLType" required="true" visibility="visible" multi="false" expanded="true">
						<sci:help>The file or URL source to read</sci:help>
						<sci:member>Maximum</sci:member>
						<sci:member>SourceTag</sci:member>
						<sci:member>Keep Properties</sci:member>
						<sci:member>UTF-8 Auto Detect</sci:member>
						<sci:value>/zfsdata/data/datasets/ChemDiv/DC01_350000.sdf,/zfsdata/data/datasets/ChemDiv/DC02_350000.sdf,/zfsdata/data/datasets/ChemDiv/DC03_251343.sdf,/zfsdata/data/datasets/ChemDiv/DC_saltdata_not-available_115829.sdf,/zfsdata/data/datasets/ChemDiv/IC_135313.sdf,/zfsdata/data/datasets/ChemDiv/NC_325760.sdf</sci:value>
					</sci:arg>
					<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
						<sci:help>The maximum number of data records to read (all if value is empty)</sci:help>
					</sci:arg>
					<sci:arg name="SourceTag" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;The type of tag to create to identify the source of data records. A property called 
&lt;b&gt;SourceTag&lt;/b&gt; is created and holds the value indicated.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;None&lt;/b&gt;: 
No SourceTag property is created and any existing ones are removed.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Filename&lt;/b&gt;: 
The name of the file read.&lt;/li&gt;&lt;li&gt;&lt;b&gt;FilenameAndExtension&lt;/b&gt;: The name of the 
file read with its file extension.&lt;/li&gt;&lt;li&gt;&lt;b&gt;FullFilename&lt;/b&gt;: The name of the 
file read, including the directory path.&lt;/li&gt;&lt;li&gt;&lt;b&gt;ZipFilename&lt;/b&gt;: When reading 
a compressed zip file, the filename within the compressed archive.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Number&lt;/b&gt;: 
When multiple files are read in this component, they are numbered 1,2,3...&lt;/li&gt;&lt;li&gt;&lt;b&gt;Letter&lt;/b&gt;: 
When multiple files are read in this component, they are lettered A, B, C...&lt;/li&gt;&lt;li&gt;&lt;b&gt;KeepCurrent&lt;/b&gt;: 
Keeps the current value of SourceTag.&lt;/li&gt;&lt;/ul&gt;</sci:help>
						<sci:legalval selected="true">None</sci:legalval>
						<sci:legalval>Filename</sci:legalval>
						<sci:legalval>FilenameAndExtension</sci:legalval>
						<sci:legalval>FullFilename</sci:legalval>
						<sci:legalval>ZipFilename</sci:legalval>
						<sci:legalval>Number</sci:legalval>
						<sci:legalval>Letter</sci:legalval>
						<sci:legalval>KeepCurrent</sci:legalval>
					</sci:arg>
					<sci:arg name="Keep Properties" type="PropertyPreviewType" required="false" visibility="visible" multi="false">
						<sci:help>A list of properties the reader should retain for each data record that is output. If a value is not defined, retains all properties. If the parameter contains the value &quot;-&quot; (minus sign), properties are not retained.</sci:help>
					</sci:arg>
					<sci:arg name="UTF-8 Auto Detect" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false" uimpl="false">
						<sci:help>&lt;p&gt;UTF-8 is a type of character encoding used to represent international characters with multiple bytes whereas basic Latin characters remain as a single byte.  Files can be stored with a Byte Order Mark (BOM) to indicate that the type of character encoding.&lt;/p&gt;
&lt;p&gt;When reading files that do not have a BOM, this parameter allows the reader to attempt to automatically detect UTF-8 encodings and convert as needed.  However, be aware that automatic detection is not always reliable.  In some cases, valid text stored in different character encodings can appear to be valid UTF-8.  In these cases, the automatic detection will result in garbled text.  When this occurs, you can consider using the &lt;a href=&quot;javascript:DoLink(&apos;{B0B1B56C-3DF6-444C-BB78-B43211188F63}&apos;)&quot;&gt;Binary Reader&lt;/a&gt; to read the file, then converting using the Pilotscript function &lt;b&gt;ConvertBytesToString&lt;/b&gt;&lt;/p&gt;</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
						<sci:help>Contains less commonly used parameters</sci:help>
						<sci:member>ReadProperties</sci:member>
						<sci:member>PutNameInProperty</sci:member>
						<sci:member>ReadQueryInfo</sci:member>
						<sci:member>PutCommentInProperty</sci:member>
						<sci:member>SD Format Options</sci:member>
						<sci:member>Global Templates</sci:member>
					</sci:arg>
					<sci:arg name="SD Format Options" type="StringType" required="false" visibility="visible" multi="true">
						<sci:help>&lt;p&gt;Options available for the SD Reader:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Properties Can Contain $$$$:&lt;/b&gt;  By the CTFile standard, a property can contain a &apos;$$$$&apos;-line.  
Properties or data field values are terminated by a blank line.  Only then will the &apos;$$$$&apos;-line 
terminate the full data block.  Setting this option off will terminate the data block upon any read of 
a &apos;$$$$&apos;-line.  This option is available to provide compatibility with some 3rd Party SD files.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;One-space Lines Terminate Properties:&lt;/b&gt;  By the CTFile standard, properties or data fields values are 
terminated by a blank line. Selecting this option will terminate the data block when encountering a line 
containing a space as the only character in the line.  This option is available to provide compatibility 
with some 3rd Party SD files.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Unwrap Long Property Lines:&lt;/b&gt;  By the CTFile standard, lines in property fields cannot exceed 200 characters.  When this option is selected and a property line of exactly 200 characters is found, the newline character will be ignored and property string will continue on the next line.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Read Unknown Stereo Parity:&lt;/b&gt;  When selected, the SD Reader will use the &apos;Atom Parity&apos; value (parity of 
&apos;3&apos;) to mark unknown stereo centers in 3D mol files.  This will leave these atoms marked as 
&apos;unknown stereo&apos; and will not calculate the stereo from the coordinates.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Process Complex Data Header Lines:&lt;/b&gt; Data header lines are the lines in the SD format that precede the actual data. They can contain the data field name (enclosed in angular brackets &lt;&gt;), the data field number (as DTn), the external registry number (enclosed in parentheses), and other optional information. When this parameter is set to False, only the data field name is parsed and used to set the corresponding property name. All the other information in the line is ignored. When the parameter is set to true, all the information is parsed. The property name is set from either the field name in &lt;&gt; or the DTn. If both are present the field name takes priority and the DTn number is saved as an additional property named &lt;b&gt;FieldName#DTn&lt;/b&gt;. The external registry number is saved as &lt;b&gt;FieldName#ExtRegNum&lt;/b&gt; and any other information is saved as &lt;b&gt;FieldName#OtherDataFieldInfo&lt;/b&gt;. When the molecules are written to an SD file, the data header lines are reconstructed from these properties. The default state of this parameter is False, as parsing, preserving, and eventually writing all the information in the data header lines can be costly, specially for SD files with many data fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Convert From H2 And H+ Atom Types:&lt;/b&gt; &apos;H2&apos; and &apos;H+&apos; are two non-standard element types that can be assigned to atoms by the BIOVIA Draw sketcher. They represent unattached Hydrogen (a Hydrogen molecule) and charged Hydrogen (a proton), respectively. When this parameter is selected, these atom types are converted to standard hydrogen atoms upon reading, with charges of 0 for H2 and +1 for H+. Otherwise, these atoms are read and perceived as unknown atom types, with &apos;H2&apos; and &apos;H+&apos; as the atom labels.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Convert Radicals To Pi Systems:&lt;/b&gt; When selected, pi bonds will be perceived between adjacent atoms marked with radicals and any adjacent metal atom.  Once pi bonds are perceived, subsequent exports will represent the pi bonds using the V3000 format and one-to-many coordination bonds (type 9) unless the writer&apos;s &lt;i&gt;Convert Pi Systems To Radicals&lt;/i&gt; option is used to convert the pi systems back. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;Convert GEN+DAT to Polymer Repeat Units:&lt;/b&gt; When selected, this option will automatically convert input GEN sgroups with linked DAT sgroups having the special fieldname of &apos;rc&apos; and numeric or numeric range data internally into polymer repeat sgroups.  This usage is a special type of NONS (Non-Specific Structure) convention that was prototyped in previous releases.  Disabling this conversion will have a higher likelihood of producing a structure that can be registered into Direct databases. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;Always Keep Enhanced Stereo:&lt;/b&gt; Preserves any enhanced stereo collections that are read in from V3000 MOL file.  When disabled, stereo structures will be checked to see if they can be represented more simply using only the Chiral Flag.  That is, structures with only ABS centers can be represented without enhanced stereo by setting the Chiral Flag on and structures with all centers in a single AND group can be represented without enhanced stereo by setting the Chiral Flag off.  Enhanced stereo collections that do not fit into the above cases are always preserved.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
						<sci:legalval selected="true">Properties Can Contain $$$$</sci:legalval>
						<sci:legalval>One-space Lines Terminate Properties</sci:legalval>
						<sci:legalval selected="true">Unwrap Long Property Lines</sci:legalval>
						<sci:legalval>Read Unknown Stereo Parity</sci:legalval>
						<sci:legalval>Process Complex Data Header Lines</sci:legalval>
						<sci:legalval selected="true">Convert From H2 And H+ Atom Types</sci:legalval>
						<sci:legalval>Convert Radicals To Pi Systems</sci:legalval>
						<sci:legalval selected="true">Convert GEN+DAT to Polymer Repeat Units</sci:legalval>
						<sci:legalval>Always Keep Enhanced Stereo</sci:legalval>
					</sci:arg>
					<sci:arg name="ReadProperties" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>Select True to read the properties for each molecule (in addition to the structures)</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="ReadQueryInfo" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>If properties starting with &quot;QueryInfo&quot; are present, use them to set up query information on the atoms and bonds. (This is how, for example, SMARTS query information can be preserved when writing to an SD format file.) For molecules saved in MOL/SD format, this information only contains information that cannot be written out in the connection table.</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="PutNameInProperty" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>What to call the property that holds the name of each molecule</sci:help>
						<sci:value>Name</sci:value>
					</sci:arg>
					<sci:arg name="PutCommentInProperty" type="StringType" required="false" visibility="visible" multi="false" expanded="true">
						<sci:help>What to call the property that holds the comment associated with each molecule</sci:help>
					</sci:arg>
					<sci:arg name="Global Templates" type="URLType" required="false" visibility="visible" multi="false">
						<sci:help>V3000 SD or MOL files containing template definitions for amino acid, nucleic acid or other residues or monomers. These templates can then be refered to by molecules read by the SD reader.&lt;p&gt;
The default template file included in the Chemistry collection, &lt;i&gt;data\Direct\Direct_templates.mol&lt;/i&gt; contains definitions for 22 amino acids and 8 DNA and RNA templates.</sci:help>
						<sci:value>data\HELM\SCSRtemplates.mol</sci:value>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval>ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="HasConvertPiSystemOption" type="BoolType" required="false" visibility="nevershow" multi="false" legalvalsenforced="false">
						<sci:help>Hidden flag specifying the presence of the &quot;Convert Radicals To Pi Systems&quot; option.</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="AllowUnknownDoubleBondsFromCoordinates" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>According to the CTfile specifications, the cis/trans character of double bonds with bond stereo set to zero is determined from the coordinates. This parameter controls whether or not to assign unknown bond stereo to double bonds for which the stereo could not be determined from the coordinates, either because there are no coordinates or because of colinearity issues.  When the parameter is set to False and the stereo could not be determined, no specific stereo configuration is assigned to the double bond, but it is not marked as unknown stereo.</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/chemistry</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Wed Apr 06 11:41:13 2016</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>SD Reader</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>DOCUMENTNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{CA65B896-4FE6-4E3A-B884-DC16B53B8D26}</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>SD Reader</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>4</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>90 -1195</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Reads MOL (molecule CTAB) files and SD (structured data) files</sci:value>
						<sci:value>&lt;p&gt;Creates a molecular data record for each molecule represented in the &lt;i&gt;Source&lt;/i&gt; 
data file.  All properties contained in the file are read into the data records.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;p&gt;&lt;ul&gt;&lt;li&gt;This 
component can also read zipped (.zip) and URL-based files.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;See 
Also:&lt;/b&gt;&lt;p&gt;&lt;ul&gt;&lt;li&gt;To write files in MOL or SD format, use the &lt;a href=&quot;javascript:DoLink(&apos;{DC8EE7B0-0620-42FE-944C-B4CD1E79480E}&apos;)&quot;&gt;SD 
Writer&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;To convert a molecule to and from between text properties in CTAB 
format, use &lt;a href=&quot;javascript:DoLink(&apos;{E622FBD9-9FA9-451A-A102-1800B5F28B6D}&apos;)&quot;&gt;Molecule 
to CTAB&lt;/a&gt; and &lt;a href=&quot;javascript:DoLink(&apos;{7D354B65-DDD8-4EA4-83A7-21501A8A6852}&apos;)&quot;&gt;Molecule 
from CTAB&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Other related CTFile format file readers include &lt;a href=&quot;javascript:DoLink(&apos;{169AB4E5-A470-477B-AA65-50464411036C}&apos;)&quot;&gt;RG 
Reader&lt;/a&gt;, &lt;a href=&quot;javascript:DoLink(&apos;{036731AA-0015-4606-9750-7D9D020F21C8}&apos;)&quot;&gt;RXN 
Reader&lt;/a&gt; and &lt;a href=&quot;javascript:DoLink(&apos;{55431CCB-06EA-4741-B95B-633C877E3E9B}&apos;)&quot;&gt;RD 
Reader&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt;</sci:value>
						<sci:value>None</sci:value>
						<sci:value/>
						<sci:value>Molecule</sci:value>
						<sci:value>Data fields in the SD file will be added to the property fields</sci:value>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>17.1.0.59</sci:value>
					</sci:arg>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>12</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Chemistry\Data Access and Manipulation\Readers\SD Reader</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.Protocol.1">
				<sci:component name="Subprotocol" version="2">
					<sci:arg name="RunToCompletion" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - For Each Data Record&quot;, the subprotocol is re-initialized and executed in its entirety for each individual data record it processes.
&lt;p&gt;
When set to &quot;True - For Each Category&quot;, the data records are divided into categories based on the value of the Categorize Using parameter and then the subprotocol is re-initialized and executed in its entirety for each category of data records. When used in conjunction with &lt;i&gt;Parallel Processing Options&lt;/i&gt;, each category of data records will be sent to the remote server as part of one single batch.</sci:help>
						<sci:member>RunToCompletion Categorize Using</sci:member>
						<sci:legalval selected="true">False</sci:legalval>
						<sci:legalval>True - For Each Data Record</sci:legalval>
						<sci:legalval>True - For Each Category</sci:legalval>
					</sci:arg>
					<sci:arg name="RunToCompletion Categorize Using" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Required when RunToCompletion is set to &lt;i&gt;True - For Each Category&lt;/i&gt;, this parameter specifies the property or properties used to define the categories.</sci:help>
						<sci:validscript>SetInvalidDetails(&apos;This parameter is required when RunToCompletion is set to True - For Each Category&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
						<sci:enabledscript>SetDisabledDetails(&apos;To Enable, Set RunToCompletion to True - For Each Category&apos;);
Parameter(&apos;RunToCompletion&apos;) eq &apos;True - For Each Category&apos;;</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options" type="BoolType" required="false" visibility="visible" multi="false" expanded="true" uimpl="false">
						<sci:help>&lt;p&gt;
When set to True, this set of options allows the subprotocol to execute in parallel on one or more independent Pipeline Pilot servers, running locally or remotely.  Additional parameters control the number of data records to send in each process batch, the list of Pipeline Pilot servers to use, the number of protocol processes that can be executed on each server, and whether to preserve the order of the processed data records.
&lt;/p&gt;&lt;p&gt;
Use this option with care, since it will not increase throughput in all circumstances. Generally speaking, it yields improved performance when the parallelization benefits outweigh the data transfer overhead for the specified batch size.  As a rough guide, performance can be improved when each individual batch requires at least 10 seconds to execute, although this can be affected by the size of each data record.
&lt;/p&gt;&lt;p&gt;
When running the protocol with debugging, the subprotocol will provide debugging messages to detail each of the various steps of execution.  Also, components located within the parallel subprotocol will display their debugging messages as well.
&lt;/p&gt;&lt;p&gt;
For more information on the parallel subprotocol options, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_parallel_processing.htm&apos;)&quot;&gt;Parallel Processing Subprotocols&lt;/a&gt;.
&lt;/p&gt;
</sci:help>
						<sci:member>Parallel Processing Options Batch Size</sci:member>
						<sci:member>Parallel Processing Options Server</sci:member>
						<sci:member>Parallel Processing Options Preserve Order</sci:member>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Batch Size" type="LongType" required="true" visibility="visible" multi="false" uimpl="false">
						<sci:help>&lt;p&gt;The number of records to send to the remote server(s) for each subprotocol execution.  In general, performance is optimized when the amount of time required to process each batch is at least 10 seconds (note that this can vary depending on the characteristics of the remote server&apos;s hardware).  Use a batch size of -1 to pass all data in a single batch.&lt;/p&gt;
&lt;p&gt;When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - for each category&quot;, the batch sizes will be determined by the number of records in each individual category.  Therefore, the &lt;i&gt;Batch Size&lt;/i&gt; parameter is not applicable.</sci:help>
						<sci:enabledscript>#parallel := Parameter(&apos;Parallel Processing Options&apos;);
if (not #parallel) then
	SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
end if;
#parallel;</sci:enabledscript>
						<sci:value>300000</sci:value>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server" type="StringType" required="false" visibility="visible" multi="true" expanded="true" legalvalsenforced="false" uimpl="false">
						<sci:help>&lt;p&gt;
A comma-separated list of Pipeline Pilot servers on which to execute the parallel subprotocol.  The server names should be in the same format as the Pipeline Pilot Client&apos;s change server dialog (that is, server-name:port-number).
&lt;/p&gt;&lt;p&gt;
Specifying &lt;b&gt;localhost&lt;/b&gt; as a server will cause the subprotocol to use its own Pipeline Pilot server.  This can be useful on multi-CPU/multi-core systems (where the subprotocol jobs are spawned on the same machine) and Pipeline Pilot Linux clusters (where &apos;localhost&apos; requests spawning the subprotocol jobs on the same cluster).
&lt;/p&gt;</sci:help>
						<sci:member>Parallel Processing Options Server Processes</sci:member>
						<sci:member>Parallel Processing Options Server Run On Grid</sci:member>
						<sci:validscript>SetInvalidDetails(&apos;This parameter is required.&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:value>localhost</sci:value>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Processes" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>A comma-separated list of the maximum number of batches that can be simultaneously executed on each remote server.  The number of entries in this parameter must equal the number of servers. If &apos;*&apos; is specified as the number of processes, then that server will only launch as many batches as the administrator of the remote server has permitted.&lt;/br&gt;&lt;/br&gt;For non-Grid Engine job, the number of jobs will be limited to the value for the maximum number of simultaneous subprotocol jobs as defined in the Admin Console even if this value is higher than the value entered here or &apos;*&apos;.&lt;/br&gt;&lt;/br&gt;For Grid Engine jobs, the number of jobs will be limited to the value for the maximum number of simultaneous subprotocol grid jobs as defined in the Admin Console even if this value is higher than the value entered here or &apos;*&apos;.&lt;/br&gt;&lt;/br&gt;</sci:help>
						<sci:validscript>/* Server Processes must have the same number of comma separated entries as the Server parameter and must have a value*/
#processes := parameter();
expand(&apos;,&apos;, #processes);
#servers := parameter(&apos;Parallel Processing Options Server&apos;);
expand(&apos;,&apos;, #servers);

if (numvalues(#processes) == 0) then
	SetInvalidDetails(&apos;This parameter is required.&apos;);
else
	SetInvalidDetails(&apos;The number of server processes (&apos; . numvalues(#processes) . &apos;) must equal the number of servers (&apos; . numvalues(#servers) . &apos;).&apos;);
end if;
numvalues(#processes) &gt; 0 and numvalues(#processes) == numvalues(#servers);</sci:validscript>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Run On Grid" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Run subprotocol on grid engine if available.  Note: If no grid engine is configured the subprotocol will still run even if this parameter is set to true.</sci:help>
						<sci:member>Parallel Processing Options Server Run On Grid Queue Name</sci:member>
						<sci:member>Parallel Processing Options Server Run On Grid Grid Options</sci:member>
						<sci:enabledscript>parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Run On Grid Queue Name" type="StringType" required="false" visibility="visible" multi="false" legalvalsenforced="false" uimpl="false">
						<sci:help>Select the queue name on the grid to submit jobs to. Leave blank to use default queue name.</sci:help>
						<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Run On Grid Grid Options" type="StringType" required="false" visibility="visible" multi="true" uimpl="false">
						<sci:help>&lt;p&gt;This is an array of command line options to send to the Grid engine submit command.&lt;/p&gt;
&lt;p&gt;If you just include one line, whatever you enter will be sent &quot;as is&quot; to the submission command.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Just sending options directly to command line - PBS&lt;/b&gt;
&lt;p&gt;-l procs=16 -l walltime=08:00:00 -A PROJECTID&lt;/p&gt;
&lt;/br&gt;
&lt;p&gt;There are a number of parameters that Pipeline Pilot will translate to the correct command line options for whichever supported Grid Engine you are using.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Supported parameters&lt;/b&gt;
&lt;p&gt;Account=&amp;lt;Project/Account name&amp;gt;&lt;/p&gt;
&lt;p&gt;Maximum Execution Time=&amp;lt;DD:MM:SS&amp;gt; - LSF ignores seconds&lt;/p&gt;
&lt;p&gt;Number of Cores=&amp;lt;16&amp;gt;&lt;/p&gt;
&lt;p&gt;Parallel Environment=&amp;lt;The Parallel Environment to use&amp;gt; - Only needed for SGE&lt;/p&gt;
&lt;p&gt;Other=&amp;lt;Additional Parameters sent directly to submit command line&amp;gt;&lt;/p&gt;</sci:help>
						<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Preserve Order" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Whether to preserve the order of the data as it enters and leaves the remote subprotocol.</sci:help>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Tempfiles" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>&lt;p&gt;A comma-delimited list of global properties, each of which is automatically populated with the name of a file in the job&apos;s temporary folder, which always has a unique name.&lt;p/&gt;For each global name, an additional global is created (with the suffix &lt;i&gt;_Filename&lt;/i&gt;) that hold only the leaf file name of the temporary file.&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="DeclareLocal" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>&lt;p&gt;Lists a set of properties (without the @) to create on the global property list for this subprotocol. Separate property names with commas. Such properties can only be accessed within the scope of this subprotocol and its descendent subprotocols.&lt;p/&gt;

&lt;p&gt;Any global property not declared in this way is created on the top-level global property list and is accessible from all subprotocols, but breaks the encapsulation of the subprotocol and may collide with another property of the same name.&lt;/p&gt;

&lt;p&gt;Therefore, you should always declare a new global property in the &lt;i&gt;DeclareLocal&lt;/i&gt; parameter, to minimize the scope of the global property to the subprotocol where it is used.&lt;/p&gt;

&lt;p&gt;The example &lt;i&gt;DeclareLocal&lt;/i&gt; value below creates 3 global properties in the subprotocol scope. Note that you can initialize the declared global value with a scalar value using the &quot;:=&quot; syntax, as shown. You can surround text string values with quotes to aid clarity.&lt;/p&gt;
&lt;pre&gt;
    SubP_Counter := 0, SubP_NameHash, SubP_TitleText:=&quot;Sample 1&quot;
&lt;/pre&gt;
</sci:help>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Custom Error Message</sci:help>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>DataPrep</sci:value>
					</sci:arg>
					<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol AutoLayout</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>ExpressionNode</sci:value>
					</sci:arg>
					<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
						<sci:help>Component Revision</sci:help>
						<sci:value>790</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{17001C74-63CE-4B4B-B37C-F0EAA19CE4AA}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>378 -1195</sci:value>
					</sci:arg>
					<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>By Ref</sci:help>
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Builds subprotocols in Pipeline Pilot.</sci:value>
						<sci:value>&lt;p&gt;
Use a subprotocol to collapse one or more components into a single item. Open 
a subprotocol to view or edit its contents. 
&lt;/p&gt;&lt;p&gt;
To define input and output ports, display 
icon, and parameter settings, right-click and select Edit. You can save subprotocols and reuse them. 
For more information, see the User Guide help for &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_overview.htm&apos;)&quot;&gt;Subprotocols 
Overview&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;
For more information on the parallel subprotocol options, see 
&lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_parallel_processing.htm&apos;)&quot;&gt;Parallel 
Processing Subprotocols&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;
Tip: Any component can be made into a shortcut, 
so that the latest version is always used. For more information, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/shortcuts.htm&apos;)&quot;&gt;Creating 
Shortcuts&lt;/a&gt;.
&lt;/p&gt;</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value>Records passing out of any unconnected pass ports of components inside the subprotocol</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value>Records passing out of any unconnected fail ports of components inside the subprotocol</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>17.2.0.1267</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Sticky Notes</sci:help>
					</sci:arg>
					<sci:arg name="ProtocolScale2" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Scale</sci:help>
						<sci:value>100</sci:value>
					</sci:arg>
					<sci:arg name="Protocol Options" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Options</sci:help>
						<sci:legalval>Owner Access Only</sci:legalval>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/coreutils</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Thu Sep 15 15:57:54 2016</sci:value>
					</sci:arg>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>8</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Utilities\Subprotocol Utilities\Subprotocol</sci:value>
					</sci:arg>
				</sci:component>
				<sci:protocol>
					<sci:data object="SciTegic.PropertyFunctions.1">
						<sci:component name="Keep Properties" version="2">
							<sci:arg name="PropertyList" type="PropertyNameType" required="true" visibility="visible" multi="true">
								<sci:help>The list of property names to keep</sci:help>
								<sci:member>RenameList</sci:member>
								<sci:value>Smile</sci:value>
								<sci:value>IDNUMBER</sci:value>
							</sci:arg>
							<sci:arg name="RenameList" type="PropertyNameType" required="false" visibility="visible" multi="true">
								<sci:help>If provided, it causes the properties given in PropertyList to be 
renamed to the corresponding name in this list.  If not provided, then no properties are renamed.</sci:help>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:help>the action to perform</sci:help>
								<sci:value>Keep</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Tue Sep 13 07:18:38 2016</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Destination&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>#propertyList := Parameter(&apos;PropertyList&apos;);
#displayName := &apos;&apos;;
for #i in 1 .. numvalues(#propertyList) loop
  #prop := trim(#propertyList[#i]);
  if (strlength(#prop) &gt; 0) then
    if (strlength(#displayName) &gt; 0) then
	  #displayName .= &apos;, &apos;;
	end if;
    #displayName .= #prop;
  end if;
end loop;
if(strlength(#displayName) &gt; 0) then		
	&apos;Keep &apos; . #displayName;
else
	&quot;&quot;;
end if;</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol AutoLayout</sci:help>
								<sci:value>true</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>EXPRESSIONNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
								<sci:help>Component Revision</sci:help>
								<sci:value>100</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>SubProtocol</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolScale" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Scale</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>90 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{456195EF-9708-4367-B3DD-21EBF3796604}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Keeps only the specified properties</sci:value>
								<sci:value>&lt;p&gt;For each incoming data record, retains only the properties found in the list of property names specified by &lt;i&gt;PropertyList&lt;/i&gt;.  All other properties are removed.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To remove specified properties from each data record, use 
&lt;a href=&quot;javascript:DoLink(&apos;{C2ED35FF-5397-4877-AADB-10F1A15D60E2}&apos;)&quot;&gt;Remove Properties&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>With only the specified properties remaining</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>17.1.0.119</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>By Ref</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Sticky Notes</sci:help>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Property Manipulators\Keep Properties</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.PropertyFunctions.1">
						<sci:component name="Rename Properties" version="2">
							<sci:arg name="Original Property Names" type="PropertyNameType" required="true" visibility="visible" multi="true">
								<sci:help>An array of property names to rename. The new name will be the corresponding name in &lt;i&gt;New Property Names&lt;i&gt;.</sci:help>
								<sci:value>Smile</sci:value>
								<sci:value>IDNUMBER</sci:value>
							</sci:arg>
							<sci:arg name="New Property Names" type="PropertyNameType" required="true" visibility="visible" multi="true">
								<sci:help>An array of the new property names. The original name will be the corresponding name in &lt;i&gt;Original Property Names&lt;i&gt;.</sci:help>
								<sci:value>smiles</sci:value>
								<sci:value>idnumber</sci:value>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:help>the action to perform</sci:help>
								<sci:value>RenameProperties</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Tue Feb 28 12:30:36 2017</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Destination&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>
#orig := Parameter(&apos;Original Property Names&apos;);
#new := Parameter(&apos;New Property Names&apos;);
if (numvalues(#orig) == 0 OR #orig[1] eq &quot;&quot; OR numvalues(#new) == 0 OR #new[1] eq &quot;&quot;) then
	&quot;&quot;;
else
  #display := &apos;Rename &apos; . #orig[1] . &apos; to &apos; . #new[1];
  if (numvalues(#orig) &gt; 1) then
    #display .= &apos;, ...&apos;;
  end if;
  #display;
end if;
</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol AutoLayout</sci:help>
								<sci:value>true</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>EXPRESSIONNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
								<sci:help>Component Revision</sci:help>
								<sci:value>100</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>SubProtocol</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolScale" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Scale</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>378 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{04496ABE-C1D2-43D2-83D4-35AC9FC8D501}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Rename the specified properties</sci:value>
								<sci:value>&lt;p&gt;For each incoming data record, rename the properties found in the &lt;i&gt;Original Property Names&lt;/i&gt; list to the names provided in &lt;i&gt;New Property Names&lt;/i&gt;.

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To remove specified properties from each data record, use 
&lt;a href=&quot;javascript:DoLink(&apos;{C2ED35FF-5397-4877-AADB-10F1A15D60E2}&apos;)&quot;&gt;Remove Properties&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>With only the specified properties remaining</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>18.1.0.1376</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>By Ref</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Sticky Notes</sci:help>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>7</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Property Manipulators\Rename Properties</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.NormalizePropertyTypes.1">
						<sci:component name="Clean Data" version="2">
							<sci:arg name="Output What" type="StringType" required="false" visibility="hidden" multi="false">
								<sci:help>What to output - either a summary of the property information, one record per property, or the cleaned data, one record per incoming data record.

If &lt;i&gt;Summary Properties&lt;/i&gt; is selected, the summary properties are:

&lt;ul&gt;
&lt;li&gt;name: the name of the property&lt;/li&gt;
&lt;li&gt;count: the number of incoming data records containing this property&lt;/li&gt;
&lt;li&gt;type: the inferred type of the property (see list of possible types below)&lt;/li&gt;
&lt;li&gt;min: if numeric or date/time, the minimum value of the property&lt;/li&gt;
&lt;li&gt;max: if numeric or date/time, the maximum value of the property&lt;/li&gt;
&lt;li&gt;values: if string, then the list of different values (if less than Maximum Number of Values)&lt;/li&gt;
&lt;li&gt;missingvalues: if this property contained any missing values, then this will contain the missing values that were found&lt;/li&gt;
&lt;/ul&gt;

The possible values for type are:

&lt;ul&gt;
&lt;li&gt;Null&lt;li&gt;
&lt;li&gt;Boolean&lt;li&gt;
&lt;li&gt;Integer&lt;li&gt;
&lt;li&gt;Double&lt;li&gt;
&lt;li&gt;String&lt;li&gt;
&lt;li&gt;Text&lt;li&gt;
&lt;li&gt;DateTime&lt;li&gt;
&lt;li&gt;Other&lt;li&gt;
&lt;/ul&gt;

      </sci:help>
								<sci:legalval selected="true">Cleaned Data</sci:legalval>
								<sci:legalval>Property Summary</sci:legalval>
							</sci:arg>
							<sci:arg name="Summary Options" type="GroupType" required="false" visibility="hidden" multi="false" legalvalsenforced="false">
								<sci:help>Options that affect the output of the summary data only</sci:help>
								<sci:member>Maximum Number of Values</sci:member>
								<sci:member>Text Length</sci:member>
							</sci:arg>
							<sci:arg name="Maximum Number of Values" type="LongType" required="false" visibility="hidden" multi="false" expanded="true">
								<sci:help>For String properties, we also return a list of possible values. This sets the maximum number of different values we wish to return. If that is exceeded, then no values are returned.
      </sci:help>
								<sci:value>20</sci:value>
							</sci:arg>
							<sci:arg name="Text Length" type="LongType" required="false" visibility="hidden" multi="false">
								<sci:help>
        For string properties, if the length of the value is greater than or equal to this number,
        then that property is considered Text, and no values are collected or returned.
      </sci:help>
								<sci:value>32</sci:value>
							</sci:arg>
							<sci:arg name="Conversion Options" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>&lt;p&gt;Options that affect how we inspect and convert between types.&lt;/p&gt;

&lt;p&gt;Options are: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Check Date Time&lt;/b&gt;: check strings to see if they are datetime values. (This can be slow!)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Use Calculable Property Types&lt;/b&gt;: if the property name exists as a calculable property, use that type as the minimum type.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Numeric [0,1] is Integer&lt;/b&gt;: if we see a rpoperty with only 0 and 1&apos;s, that is normally considered a boolean. If this option is selected, it is considered an integer. &lt;/li&gt;
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">Check Date Time</sci:legalval>
								<sci:legalval>Use Calculable Property Types</sci:legalval>
								<sci:legalval selected="true">Numeric [0,1] is Integer</sci:legalval>
							</sci:arg>
							<sci:arg name="Clean Behavior" type="StringType" required="false" visibility="visible" multi="false" expanded="true">
								<sci:help>&lt;p&gt;The &lt;i&gt;Clean Data&lt;/i&gt; will pass only clean data out the Pass port. &quot;Clean data&quot; is data where there are no missing values or values that failed to coerce to a requested property type, across all the properties of the data record.&lt;/p&gt;

&lt;p&gt;If a particular property has an unclean value in at least one data record, there are two cleaning choices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Remove Any Data Record with Unclean Value&lt;/b&gt;: any data record containing at least one unclean property value will be removed from the data stream and passed out the Fail port.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Remove Unclean Property from All Data Records&lt;/b&gt;: any property having an unclean value in at least one data record, will be removed from &lt;i&gt;all&lt;/i&gt; data records. The remaining properties will be returned via the Pass port. The removed properties are collected onto another data record and passed out the Fail port.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">Remove Any Data Record with Unclean Value</sci:legalval>
								<sci:legalval>Remove Unclean Property from All Data Records</sci:legalval>
							</sci:arg>
							<sci:arg name="Missing Value Options" type="GroupType" required="false" visibility="visible" multi="false" expanded="true" legalvalsenforced="false">
								<sci:help>Options to control the identification of missing values, and to possibly standardize (and then accept as clean) these values by column type using a provided replacement string.</sci:help>
								<sci:member>Missing Value Strings</sci:member>
								<sci:member>Replace Missing Values</sci:member>
							</sci:arg>
							<sci:arg name="Missing Value Strings" type="StringType" required="false" visibility="visible" multi="true" expanded="true">
								<sci:help>If provided, this is an array of string values that will be interpreted as missing values. Note that an empty entry causes the empty string to be treated as a missing value.</sci:help>
								<sci:value/>
								<sci:value>*</sci:value>
								<sci:value>?</sci:value>
								<sci:value>NULL</sci:value>
								<sci:value>NA</sci:value>
								<sci:value>N/A</sci:value>
								<sci:value>NaN</sci:value>
							</sci:arg>
							<sci:arg name="Replace Missing Values" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Whether to identify missing values using the list of values in &lt;i&gt;Missing Values Strings&lt;/i&gt;.</sci:help>
								<sci:member>Types to Replace</sci:member>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Types to Replace" type="StringType" required="false" visibility="visible" multi="true" expanded="true">
								<sci:help>Replace missing values with particular strings for particular column types</sci:help>
								<sci:member>Boolean Missing Values</sci:member>
								<sci:member>Integer Missing Values</sci:member>
								<sci:member>Double Missing Values</sci:member>
								<sci:member>String Missing Values</sci:member>
								<sci:member>DateTime Missing Values</sci:member>
								<sci:enabledscript>parameter(&apos;Replace Missing Values&apos;)</sci:enabledscript>
								<sci:legalval selected="true">Boolean</sci:legalval>
								<sci:legalval selected="true">Integer</sci:legalval>
								<sci:legalval selected="true">Double</sci:legalval>
								<sci:legalval selected="true">String</sci:legalval>
								<sci:legalval selected="true">DateTime</sci:legalval>
							</sci:arg>
							<sci:arg name="Boolean Missing Values" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Replace missing values in Boolean columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
								<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Boolean&apos;);</sci:enabledscript>
								<sci:value>False</sci:value>
							</sci:arg>
							<sci:arg name="Integer Missing Values" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Replace missing values in Integer columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
								<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Integer&apos;);</sci:enabledscript>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="Double Missing Values" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Replace missing values in Double columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
								<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Double&apos;);</sci:enabledscript>
								<sci:value>0.0</sci:value>
							</sci:arg>
							<sci:arg name="String Missing Values" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Replace missing values in String columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
								<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;String&apos;);</sci:enabledscript>
							</sci:arg>
							<sci:arg name="DateTime Missing Values" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Replace missing values in DateTime columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
								<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;DateTime&apos;);</sci:enabledscript>
								<sci:value>1/1/1970</sci:value>
							</sci:arg>
							<sci:arg name="Property Type Coercion Options" type="GroupType" required="false" visibility="visible" multi="true" legalvalsenforced="false">
								<sci:help>You can force a particular property to a specific type. 

If you do this, and any of the values on a data record (other than missing values) fails to coerce, then the data is considered unclean. 
</sci:help>
								<sci:member>Property 1</sci:member>
								<sci:member>Property 2</sci:member>
								<sci:member>Property 3</sci:member>
								<sci:member>Property 4</sci:member>
								<sci:member>Property 5</sci:member>
								<sci:member>Property 6</sci:member>
							</sci:arg>
							<sci:arg name="Property 1" type="PropertyNameType" required="false" visibility="visible" multi="false" expanded="true">
								<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
								<sci:member>Property 1 Coerce to Type</sci:member>
							</sci:arg>
							<sci:arg name="Property 1 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
								<sci:legalval>Boolean</sci:legalval>
								<sci:legalval>Integer</sci:legalval>
								<sci:legalval selected="true">Double</sci:legalval>
								<sci:legalval>String</sci:legalval>
								<sci:legalval>DateTime</sci:legalval>
							</sci:arg>
							<sci:arg name="Property 2" type="PropertyNameType" required="false" visibility="visible" multi="false">
								<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
								<sci:member>Property 2 Coerce to Type</sci:member>
							</sci:arg>
							<sci:arg name="Property 2 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
								<sci:legalval>Boolean</sci:legalval>
								<sci:legalval>Integer</sci:legalval>
								<sci:legalval selected="true">Double</sci:legalval>
								<sci:legalval>String</sci:legalval>
								<sci:legalval>DateTime</sci:legalval>
							</sci:arg>
							<sci:arg name="Property 3" type="PropertyNameType" required="false" visibility="visible" multi="false">
								<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
								<sci:member>Property 3 Coerce to Type</sci:member>
							</sci:arg>
							<sci:arg name="Property 3 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
								<sci:legalval>Boolean</sci:legalval>
								<sci:legalval>Integer</sci:legalval>
								<sci:legalval selected="true">Double</sci:legalval>
								<sci:legalval>String</sci:legalval>
								<sci:legalval>DateTime</sci:legalval>
							</sci:arg>
							<sci:arg name="Property 4" type="PropertyNameType" required="false" visibility="visible" multi="false">
								<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
								<sci:member>Property 4 Coerce to Type</sci:member>
							</sci:arg>
							<sci:arg name="Property 4 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
								<sci:legalval>Boolean</sci:legalval>
								<sci:legalval>Integer</sci:legalval>
								<sci:legalval selected="true">Double</sci:legalval>
								<sci:legalval>String</sci:legalval>
								<sci:legalval>DateTime</sci:legalval>
							</sci:arg>
							<sci:arg name="Property 5" type="PropertyNameType" required="false" visibility="visible" multi="false">
								<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
								<sci:member>Property 5 Coerce to Type</sci:member>
							</sci:arg>
							<sci:arg name="Property 5 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
								<sci:legalval>Boolean</sci:legalval>
								<sci:legalval>Integer</sci:legalval>
								<sci:legalval selected="true">Double</sci:legalval>
								<sci:legalval>String</sci:legalval>
								<sci:legalval>DateTime</sci:legalval>
							</sci:arg>
							<sci:arg name="Property 6" type="PropertyNameType" required="false" visibility="visible" multi="false">
								<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
								<sci:member>Property 6 Coerce to Type</sci:member>
							</sci:arg>
							<sci:arg name="Property 6 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
								<sci:legalval>Boolean</sci:legalval>
								<sci:legalval>Integer</sci:legalval>
								<sci:legalval selected="true">Double</sci:legalval>
								<sci:legalval>String</sci:legalval>
								<sci:legalval>DateTime</sci:legalval>
							</sci:arg>
							<sci:arg name="Array Value Options" type="GroupType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Options to handle array data</sci:help>
								<sci:member>Array Values Are</sci:member>
							</sci:arg>
							<sci:arg name="Array Values Are" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Whether array values are OK, are unclean, or should be replaced by a single value, the first value in the array.</sci:help>
								<sci:legalval>OK</sci:legalval>
								<sci:legalval selected="true">Unclean</sci:legalval>
								<sci:legalval>Replaced by First Value</sci:legalval>
							</sci:arg>
							<sci:arg name="Ignore Properties" type="PropertyNameType" required="false" visibility="visible" multi="true" uimpl="false">
								<sci:help>A list of properties to ignore, if any. They will be passed through untouched, and never considered unclean.</sci:help>
								<sci:value>reagent1</sci:value>
								<sci:value>reagent2</sci:value>
								<sci:value>reagent3</sci:value>
								<sci:value>reagent4</sci:value>
								<sci:value>reaction</sci:value>
								<sci:value>PAINS</sci:value>
								<sci:value>BRENK</sci:value>
								<sci:value>NIH</sci:value>
								<sci:value>ZINC</sci:value>
								<sci:value>lead-like</sci:value>
								<sci:value>350/3_lead-like</sci:value>
								<sci:value>fragments</sci:value>
								<sci:value>strict_fragments</sci:value>
								<sci:value>PPI_modulators</sci:value>
								<sci:value>natural_product-like</sci:value>
							</sci:arg>
							<sci:arg name="Error Property Name" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>The name of the property to put error messages into. If left blank, do not add an error property.</sci:help>
								<sci:value>ErrorText</sci:value>
							</sci:arg>
							<sci:arg name="CacheSizeInflationFactor" type="LongType" required="false" visibility="hidden" multi="false" uimpl="true">
								<sci:help>When you run using a limited cache size, normally only that many records may be output.
This parameter allows you to increase that size by a multiplicative factor. </sci:help>
								<sci:value>2</sci:value>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Implementation Of" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:legalval>Normalize Property Types</sci:legalval>
								<sci:legalval selected="true">Clean Data</sci:legalval>
								<sci:legalval>Set Property Type</sci:legalval>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Sep 14 07:50:41 2017</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>Clean Data</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>COMPONENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{6E28C170-2FEC-4A3C-90A6-2DCEAA330E9E}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>666 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Ensure your data is clean; that is, has no missing values, is coerced to the desired type, and is not an array value.</sci:value>
								<sci:value>&lt;p&gt;&lt;i&gt;Cleaning&lt;/i&gt; data is the act of finding, for each property, that it has no missing values, is coerced to the desired type, and is not an array value. The type is inferred: for example, a property may contains strings, with values &quot;0&quot; and &quot;1&quot;. This will be cleaned into Boolean values.&lt;/p&gt;

The problems that cleaning addresses are:
&lt;ol&gt;
&lt;li&gt;The same property name may have different value types on different data records&lt;/li&gt;
&lt;li&gt;The property might be of types that are coercible to some simpler base type (e.g., numbers might be stored as strings, when they could be better represented as integers)&lt;/li&gt;
&lt;li&gt;The property might be missing from some data records&lt;/li&gt;
&lt;li&gt;The property might appear multiple times on a given data record (arrays)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The normalized type is the simplest type possible, ordered from: Null, Boolean, Integer, Double, String, DateTime.&lt;/p&gt;
</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>The Normalized data records, or the summary for each property.</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>1</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Data Manipulators\Clean Data</sci:value>
							</sci:arg>
						</sci:component>
						<sci:proplist>
							<sci:propval name="RegistrationVersion">18.1.0.1590</sci:propval>
						</sci:proplist>
					</sci:data>
					<sci:data object="SciTegic.PropertyFunctions.1">
						<sci:component name="First Occurrence Filter" version="2">
							<sci:arg name="KeyProperty" type="PropertyNameType" required="true" visibility="visible" multi="true">
								<sci:help>Name of the property holding values to keep only one of.  If you give more than one key property, then all values must have occurred at the same time on some other record for it to be rejected.</sci:help>
								<sci:member>CaseSensitive</sci:member>
								<sci:value>Smiles</sci:value>
							</sci:arg>
							<sci:arg name="CaseSensitive" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Whether to perform the comparison as case-sensitive or case-insensitive 
strings</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:help>the action to perform</sci:help>
								<sci:value>FirstOccurrence</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Jan 16 14:54:51 2003</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>First Occurrence
Filter</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>Expression Filter</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>FILTERNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{D2EC3EBB-CD17-4093-93A9-D9FB603DE083}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>954 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Passes data records for which the values of specified properties have not been seen on any previous record

</sci:value>
								<sci:value>&lt;p&gt;For each incoming data record, the value of the property specified by &lt;i&gt;KeyProperty&lt;/i&gt; is checked.  If the value has not been seen in earlier records, the record is sent out the Pass port.  Otherwise it is sent out the Fail port.&lt;/p&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To filter for data records with property values that occur once and only once in the input stream, use &lt;a href=&quot;javascript:DoLink(&apos;{2FD9ECF2-C47F-4A20-AC72-5F352E08FC98}&apos;)&quot;&gt;Unique Filter&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>Data records with the first occurrence of a value of the given property.</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value>Data records with the second and subsequent occurrences of a value of the given property.</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>2</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Data Filters\First Occurrence Filter</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.CalculateSmiles.1">
						<sci:component name="Molecule from SMILES" version="2">
							<sci:arg name="FromProperty" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The name of the property in the data
which holds the SMILES information</sci:help>
								<sci:member>KekulizeAromaticBonds</sci:member>
								<sci:member>Send Empty SMILES to Fail Port</sci:member>
								<sci:member>Parse RAtoms from CXSMILES</sci:member>
								<sci:value>smiles</sci:value>
							</sci:arg>
							<sci:arg name="KekulizeAromaticBonds" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Turn aromatic bonds into single/double bonds (set to True) or into aromatic query bonds (set to False). Molecules created with aromatic query bonds are more suitable as queries than as specific molecules. They should not be used as input for property calculators such as Molecular Weight, pKa and others, which require the structure to be uniquely defined.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Send Empty SMILES to Fail Port" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>When set to True, data records with SMILES represented by empty strings or strings with only blank characters are sent to the Fail port. 
&lt;p&gt;
When set to False, empty SMILES strings generate empty molecules with no atoms or bonds.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Parse RAtoms from CXSMILES" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Set this parameter to True to parse any Rgroup information from ChemAxon SMILES extentions (CXSMILES), if present. The extension is separated from the actual SMILES by a space or tab. When the parameter is set to False (the default state) the extension is ignored.
&lt;p&gt;
Examples
&lt;br&gt;
C1O[*]CO[*]1 |$;;_R2;;;_R1$,RG:_R1={C},{N},_R2={C},{N}|
&lt;br&gt;
Cl[*](Br)I |$;_R1;;$,RG:_R1={*CCCC(C*)CC*|
&lt;br&gt;
[*]N[C@@H](C=O)C([*])=O |$_R1;;;;;;_R2;$|
&lt;br&gt;
NC(=N)NCCC[C@H](N[*])C([*])=O |$;;;;;;;;;_R1;;_R2;$|
&lt;p&gt;
The star atoms (unknown atom type) in the SMILES are replaced by the corresponding numbered R atoms from the extension. Any RG fragment information present in the Rgroup extension is ignored.
&lt;p&gt;
Only the Rgroup information in the CXSMILES extension is parsed, any other extension is ignored.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval>Halt</sci:legalval>
								<sci:legalval selected="true">Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval>Halt</sci:legalval>
								<sci:legalval selected="true">Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/chemistry</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Wed Mar 30 15:06:09 2016</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>Molecule from SMILES</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>Molecule from SMILES</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>COMPONENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{AC8262DA-E648-4D24-9CD1-D731A8F53F9D}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>1242 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Converts a Daylight SMILES text property to a molecule</sci:value>
								<sci:value>&lt;p&gt;Builds a molecular representation for each data record from the SMILES string found in the property list. If a molecular representation is already present, it is overwritten by the new molecule. The input SMILES string is preserved.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To create a string property containing SMILES data, use &lt;a href=&quot;javascript:DoLink(&apos;{0C60C40A-5189-42DA-A3C0-4EA44BFF7D15}&apos;)&quot;&gt;Molecule to SMILES&lt;/a&gt; or &lt;a href=&quot;javascript:DoLink(&apos;{0C60C40A-5189-42DA-A3C0-4EA44BC27D15}&apos;)&quot;&gt;Canonical Smiles&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To read and write SMILES files, use &lt;a href=&quot;javascript:DoLink(&apos;{60FC1A04-61FD-4D4F-AC3F-A818AB614C78}&apos;)&quot;&gt;SMILES Reader&lt;/a&gt; and &lt;a href=&quot;javascript:DoLink(&apos;{72A5A427-651F-4847-9525-54CB438A7166}&apos;)&quot;&gt;SMILES Writer&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Molecule</sci:value>
								<sci:value>Molecular data record created from SMILES string</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>17.1.0.51</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>3</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Chemistry\Data Access and Manipulation\Converters\Molecule From Text\Molecule from SMILES</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.CalculateSmiles.1">
						<sci:component name="Canonical Smiles" version="2">
							<sci:arg name="Output" type="StringType" required="false" visibility="visible" multi="true">
								<sci:help>&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SMILES&lt;/b&gt; is a non-canonical representation for the molecule. (This is very fast to calculate compared to Canonical_SMILES.)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Canonical_SMILES&lt;/b&gt; is the representation that can be compared for identicality.&lt;/li&gt;
&lt;/ul&gt;

&lt;i&gt;Output&lt;/i&gt; properties can be calculated &quot;on demand&quot; by simply using their names within a PilotScript expression or as the parameter value to many parameters that require a property name.</sci:help>
								<sci:legalval type="StringType" selected="true">Canonical_Smiles</sci:legalval>
								<sci:legalval type="StringType">Smiles</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/chemistry</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Fri Apr 08 13:57:30 2011</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>Canonical Smiles</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>Canonical Smiles</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>CALCULATORNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{0C60C40A-5189-42DA-A3C0-4EA44BC27D15}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>1530 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Calculates a SMILES or canonical SMILES representation of the input molecule</sci:value>
								<sci:value>&lt;p&gt;SMILES is a terse textual representation of molecular data.  Canonical SMILES is a form of SMILES that is independent of how the molecule is drawn and so can be used to compare whether two molecules are identical.&lt;/P&gt;

Either or both of the following two properties can be calculated:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SMILES&lt;/b&gt; is a non-canonical representation for the molecule. (This is very fast to calculate compared to Canonical_SMILES.)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Canonical_SMILES&lt;/b&gt; is the representation that can be compared for identicality.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;The canonicalization algorithm is SciTegic&apos;s; while it is derived from the published Daylight algorithm, however, lack of complete documentation of their procedure means that it will not necessarily give identical results. Compare two SMILES for identity only when having both canonicalized by the same method. &lt;/li&gt;
&lt;li&gt;Stereo markings are only added to the SMILES when stereo is explicitly set on a stereocenter.  This is often not the case for 3D molecules where the stereo is implied from the coordinates of the attached atoms and not from explicit stereo markings.  To add stereo markings from coordinates use the &lt;i&gt;SetStereoFromCoordinates&lt;/i&gt; action in the &lt;a href=&quot;javascript:DoLink(&apos;{EFEA1A46-A6DB-4DB9-A5A9-C7F3D2ADFDE2}&apos;)&quot;&gt;Standardize Molecule&lt;/a&gt; component.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;You can create a SMILES string as text under any property name using &lt;a href=&quot;javascript:DoLink(&apos;{0C60C40A-5189-42DA-A3C0-4EA44BFF7D15}&apos;)&quot;&gt;Molecule to SMILES&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can convert a SMILES string into a molecule using &lt;a href=&quot;javascript:DoLink(&apos;{AC8262DA-E648-4D24-9CD1-D731A8F53F9D}&apos;)&quot;&gt;Molecule from SMILES&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For an alternative way of generating a canonical string representation, see &lt;a href=&quot;javascript:DoLink(&apos;{EB62CC30-BC6A-4d5f-8618-3EB9AF611C69}&apos;)&quot;&gt;Molecule to InChI&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</sci:value>
								<sci:value>Molecule</sci:value>
								<sci:value/>
								<sci:value>Molecule</sci:value>
								<sci:value>Records augmented with a text property containing the canonical SMILES or SMILES</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>8.4.5.28</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>4</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Chemistry\Property Calculators\Structural\Canonical Smiles</sci:value>
							</sci:arg>
						</sci:component>
						<sci:proplist>
							<sci:propval name="Canonical_Smiles|Category">Molecular Formats</sci:propval>
							<sci:propval name="Smiles|Category">Molecular Formats</sci:propval>
						</sci:proplist>
					</sci:data>
					<sci:data object="SciTegic.PropertyFunctions.1">
						<sci:component name="Remove Properties" version="2">
							<sci:arg name="PropertyList" type="PropertyNameType" required="true" visibility="visible" multi="true">
								<sci:help>The names of properties to remove from each data record entering the component</sci:help>
								<sci:value>smiles</sci:value>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:help>the action to perform</sci:help>
								<sci:value>Remove</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Tue Sep 13 07:18:43 2016</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;PropertyList&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>#propertyList := Parameter(&apos;PropertyList&apos;);
#displayName := &apos;&apos;;
for #i in 1 .. numvalues(#propertyList) loop
  #prop := trim(#propertyList[#i]);
  if (strlength(#prop) &gt; 0) then
    if (strlength(#displayName) &gt; 0) then
	  #displayName .= &apos;, &apos;;
	end if;
    #displayName .= #prop;
  end if;
end loop;
if(strlength(#displayName) &gt; 0) then		
	&apos;Remove &apos; . #displayName;
else
	&quot;&quot;;
end if;</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol AutoLayout</sci:help>
								<sci:value>true</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>EXPRESSIONNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
								<sci:help>Component Revision</sci:help>
								<sci:value>100</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>SubProtocol</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolScale" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Scale</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>1818 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{C2ED35FF-5397-4877-AADB-10F1A15D60E2}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Removes the specified properties</sci:value>
								<sci:value>For each data record that enters the component, the properties specified by &lt;i&gt;PropertyList&lt;/i&gt; are removed from the  record. 

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;To keep only a few properties from a long list, it may be more efficient to instead use &lt;a href=&quot;javascript:DoLink(&apos;{456195EF-9708-4367-B3DD-21EBF3796604}&apos;)&quot;&gt;Keep Properties&lt;/a&gt;.&lt;/p&gt;</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>Data records with the specified properties removed</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>17.1.0.119</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>By Ref</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Sticky Notes</sci:help>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>5</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Property Manipulators\Remove Properties</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.Protocol.1">
						<sci:component name="Subprotocol" version="2">
							<sci:arg name="RunToCompletion" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - For Each Data Record&quot;, the subprotocol is re-initialized and executed in its entirety for each individual data record it processes.
&lt;p&gt;
When set to &quot;True - For Each Category&quot;, the data records are divided into categories based on the value of the Categorize Using parameter and then the subprotocol is re-initialized and executed in its entirety for each category of data records. When used in conjunction with &lt;i&gt;Parallel Processing Options&lt;/i&gt;, each category of data records will be sent to the remote server as part of one single batch.</sci:help>
								<sci:member>RunToCompletion Categorize Using</sci:member>
								<sci:legalval selected="true">False</sci:legalval>
								<sci:legalval>True - For Each Data Record</sci:legalval>
								<sci:legalval>True - For Each Category</sci:legalval>
							</sci:arg>
							<sci:arg name="RunToCompletion Categorize Using" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>Required when RunToCompletion is set to &lt;i&gt;True - For Each Category&lt;/i&gt;, this parameter specifies the property or properties used to define the categories.</sci:help>
								<sci:validscript>SetInvalidDetails(&apos;This parameter is required when RunToCompletion is set to True - For Each Category&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
								<sci:enabledscript>SetDisabledDetails(&apos;To Enable, Set RunToCompletion to True - For Each Category&apos;);
Parameter(&apos;RunToCompletion&apos;) eq &apos;True - For Each Category&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>&lt;p&gt;
When set to True, this set of options allows the subprotocol to execute in parallel on one or more independent Pipeline Pilot servers, running locally or remotely.  Additional parameters control the number of data records to send in each process batch, the list of Pipeline Pilot servers to use, the number of protocol processes that can be executed on each server, and whether to preserve the order of the processed data records.
&lt;/p&gt;&lt;p&gt;
Use this option with care, since it will not increase throughput in all circumstances. Generally speaking, it yields improved performance when the parallelization benefits outweigh the data transfer overhead for the specified batch size.  As a rough guide, performance can be improved when each individual batch requires at least 10 seconds to execute, although this can be affected by the size of each data record.
&lt;/p&gt;&lt;p&gt;
When running the protocol with debugging, the subprotocol will provide debugging messages to detail each of the various steps of execution.  Also, components located within the parallel subprotocol will display their debugging messages as well.
&lt;/p&gt;&lt;p&gt;
For more information on the parallel subprotocol options, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_parallel_processing.htm&apos;)&quot;&gt;Parallel Processing Subprotocols&lt;/a&gt;.
&lt;/p&gt;
</sci:help>
								<sci:member>Parallel Processing Options Batch Size</sci:member>
								<sci:member>Parallel Processing Options Server</sci:member>
								<sci:member>Parallel Processing Options Preserve Order</sci:member>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Batch Size" type="LongType" required="true" visibility="visible" multi="false" uimpl="false">
								<sci:help>&lt;p&gt;The number of records to send to the remote server(s) for each subprotocol execution.  In general, performance is optimized when the amount of time required to process each batch is at least 10 seconds (note that this can vary depending on the characteristics of the remote server&apos;s hardware).  Use a batch size of -1 to pass all data in a single batch.&lt;/p&gt;
&lt;p&gt;When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - for each category&quot;, the batch sizes will be determined by the number of records in each individual category.  Therefore, the &lt;i&gt;Batch Size&lt;/i&gt; parameter is not applicable.</sci:help>
								<sci:enabledscript>#parallel := Parameter(&apos;Parallel Processing Options&apos;);
if (not #parallel) then
	SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
end if;
#parallel;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Server" type="StringType" required="false" visibility="visible" multi="true" expanded="true" legalvalsenforced="false" uimpl="false">
								<sci:help>&lt;p&gt;
A comma-separated list of Pipeline Pilot servers on which to execute the parallel subprotocol.  The server names should be in the same format as the Pipeline Pilot Client&apos;s change server dialog (that is, server-name:port-number).
&lt;/p&gt;&lt;p&gt;
Specifying &lt;b&gt;localhost&lt;/b&gt; as a server will cause the subprotocol to use its own Pipeline Pilot server.  This can be useful on multi-CPU/multi-core systems (where the subprotocol jobs are spawned on the same machine) and Pipeline Pilot Linux clusters (where &apos;localhost&apos; requests spawning the subprotocol jobs on the same cluster).
&lt;/p&gt;</sci:help>
								<sci:member>Parallel Processing Options Server Processes</sci:member>
								<sci:member>Parallel Processing Options Server Run On Grid</sci:member>
								<sci:validscript>SetInvalidDetails(&apos;This parameter is required.&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
								<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Server Processes" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>A comma-separated list of the maximum number of batches that can be simultaneously executed on each remote server.  The number of entries in this parameter must equal the number of servers. If &apos;*&apos; is specified as the number of processes, then that server will only launch as many batches as the administrator of the remote server has permitted.&lt;/br&gt;&lt;/br&gt;For non-Grid Engine job, the number of jobs will be limited to the value for the maximum number of simultaneous subprotocol jobs as defined in the Admin Console even if this value is higher than the value entered here or &apos;*&apos;.&lt;/br&gt;&lt;/br&gt;For Grid Engine jobs, the number of jobs will be limited to the value for the maximum number of simultaneous subprotocol grid jobs as defined in the Admin Console even if this value is higher than the value entered here or &apos;*&apos;.&lt;/br&gt;&lt;/br&gt;</sci:help>
								<sci:validscript>/* Server Processes must have the same number of comma separated entries as the Server parameter and must have a value*/
#processes := parameter();
expand(&apos;,&apos;, #processes);
#servers := parameter(&apos;Parallel Processing Options Server&apos;);
expand(&apos;,&apos;, #servers);

if (numvalues(#processes) == 0) then
	SetInvalidDetails(&apos;This parameter is required.&apos;);
else
	SetInvalidDetails(&apos;The number of server processes (&apos; . numvalues(#processes) . &apos;) must equal the number of servers (&apos; . numvalues(#servers) . &apos;).&apos;);
end if;
numvalues(#processes) &gt; 0 and numvalues(#processes) == numvalues(#servers);</sci:validscript>
								<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Server Run On Grid" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>Run subprotocol on grid engine if available.  Note: If no grid engine is configured the subprotocol will still run even if this parameter is set to true.</sci:help>
								<sci:member>Parallel Processing Options Server Run On Grid Queue Name</sci:member>
								<sci:member>Parallel Processing Options Server Run On Grid Grid Options</sci:member>
								<sci:enabledscript>parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Server Run On Grid Queue Name" type="StringType" required="false" visibility="visible" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>Select the queue name on the grid to submit jobs to. Leave blank to use default queue name.</sci:help>
								<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Server Run On Grid Grid Options" type="StringType" required="false" visibility="visible" multi="true" uimpl="false">
								<sci:help>&lt;p&gt;This is an array of command line options to send to the Grid engine submit command.&lt;/p&gt;
&lt;p&gt;If you just include one line, whatever you enter will be sent &quot;as is&quot; to the submission command.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Just sending options directly to command line - PBS&lt;/b&gt;
&lt;p&gt;-l procs=16 -l walltime=08:00:00 -A PROJECTID&lt;/p&gt;
&lt;/br&gt;
&lt;p&gt;There are a number of parameters that Pipeline Pilot will translate to the correct command line options for whichever supported Grid Engine you are using.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Supported parameters&lt;/b&gt;
&lt;p&gt;Account=&amp;lt;Project/Account name&amp;gt;&lt;/p&gt;
&lt;p&gt;Maximum Execution Time=&amp;lt;DD:MM:SS&amp;gt; - LSF ignores seconds&lt;/p&gt;
&lt;p&gt;Number of Cores=&amp;lt;16&amp;gt;&lt;/p&gt;
&lt;p&gt;Parallel Environment=&amp;lt;The Parallel Environment to use&amp;gt; - Only needed for SGE&lt;/p&gt;
&lt;p&gt;Other=&amp;lt;Additional Parameters sent directly to submit command line&amp;gt;&lt;/p&gt;</sci:help>
								<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Preserve Order" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>Whether to preserve the order of the data as it enters and leaves the remote subprotocol.</sci:help>
								<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Tempfiles" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
								<sci:help>&lt;p&gt;A comma-delimited list of global properties, each of which is automatically populated with the name of a file in the job&apos;s temporary folder, which always has a unique name.&lt;p/&gt;For each global name, an additional global is created (with the suffix &lt;i&gt;_Filename&lt;/i&gt;) that hold only the leaf file name of the temporary file.&lt;/p&gt;</sci:help>
							</sci:arg>
							<sci:arg name="DeclareLocal" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
								<sci:help>&lt;p&gt;Lists a set of properties (without the @) to create on the global property list for this subprotocol. Separate property names with commas. Such properties can only be accessed within the scope of this subprotocol and its descendent subprotocols.&lt;p/&gt;

&lt;p&gt;Any global property not declared in this way is created on the top-level global property list and is accessible from all subprotocols, but breaks the encapsulation of the subprotocol and may collide with another property of the same name.&lt;/p&gt;

&lt;p&gt;Therefore, you should always declare a new global property in the &lt;i&gt;DeclareLocal&lt;/i&gt; parameter, to minimize the scope of the global property to the subprotocol where it is used.&lt;/p&gt;

&lt;p&gt;The example &lt;i&gt;DeclareLocal&lt;/i&gt; value below creates 3 global properties in the subprotocol scope. Note that you can initialize the declared global value with a scalar value using the &quot;:=&quot; syntax, as shown. You can surround text string values with quotes to aid clarity.&lt;/p&gt;
&lt;pre&gt;
    SubP_Counter := 0, SubP_NameHash, SubP_TitleText:=&quot;Sample 1&quot;
&lt;/pre&gt;
</sci:help>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>standardize data according to Burggraaff et al.</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol AutoLayout</sci:help>
								<sci:value>1</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>ComponentNode</sci:value>
							</sci:arg>
							<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
								<sci:help>Component Revision</sci:help>
								<sci:value>790</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{17001C74-63CE-4B4B-B37C-F0EAA19CE4AA}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>2106 -95</sci:value>
							</sci:arg>
							<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>By Ref</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Builds subprotocols in Pipeline Pilot.</sci:value>
								<sci:value>&lt;p&gt;
Use a subprotocol to collapse one or more components into a single item. Open 
a subprotocol to view or edit its contents. 
&lt;/p&gt;&lt;p&gt;
To define input and output ports, display 
icon, and parameter settings, right-click and select Edit. You can save subprotocols and reuse them. 
For more information, see the User Guide help for &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_overview.htm&apos;)&quot;&gt;Subprotocols 
Overview&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;
For more information on the parallel subprotocol options, see 
&lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_parallel_processing.htm&apos;)&quot;&gt;Parallel 
Processing Subprotocols&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;
Tip: Any component can be made into a shortcut, 
so that the latest version is always used. For more information, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/shortcuts.htm&apos;)&quot;&gt;Creating 
Shortcuts&lt;/a&gt;.
&lt;/p&gt;</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>Records passing out of any unconnected pass ports of components inside the subprotocol</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value>Records passing out of any unconnected fail ports of components inside the subprotocol</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>17.2.0.1267</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Sticky Notes</sci:help>
							</sci:arg>
							<sci:arg name="ProtocolScale2" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Scale</sci:help>
								<sci:value>100</sci:value>
							</sci:arg>
							<sci:arg name="Protocol Options" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Options</sci:help>
								<sci:legalval>Owner Access Only</sci:legalval>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/coreutils</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Sep 15 15:57:54 2016</sci:value>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>6</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Utilities\Subprotocol Utilities\Subprotocol</sci:value>
							</sci:arg>
						</sci:component>
						<sci:protocol>
							<sci:data object="SciTegic.NormalizePropertyTypes.1">
								<sci:component name="Clean Data" version="2">
									<sci:arg name="Output What" type="StringType" required="false" visibility="hidden" multi="false">
										<sci:help>What to output - either a summary of the property information, one record per property, or the cleaned data, one record per incoming data record.

If &lt;i&gt;Summary Properties&lt;/i&gt; is selected, the summary properties are:

&lt;ul&gt;
&lt;li&gt;name: the name of the property&lt;/li&gt;
&lt;li&gt;count: the number of incoming data records containing this property&lt;/li&gt;
&lt;li&gt;type: the inferred type of the property (see list of possible types below)&lt;/li&gt;
&lt;li&gt;min: if numeric or date/time, the minimum value of the property&lt;/li&gt;
&lt;li&gt;max: if numeric or date/time, the maximum value of the property&lt;/li&gt;
&lt;li&gt;values: if string, then the list of different values (if less than Maximum Number of Values)&lt;/li&gt;
&lt;li&gt;missingvalues: if this property contained any missing values, then this will contain the missing values that were found&lt;/li&gt;
&lt;/ul&gt;

The possible values for type are:

&lt;ul&gt;
&lt;li&gt;Null&lt;li&gt;
&lt;li&gt;Boolean&lt;li&gt;
&lt;li&gt;Integer&lt;li&gt;
&lt;li&gt;Double&lt;li&gt;
&lt;li&gt;String&lt;li&gt;
&lt;li&gt;Text&lt;li&gt;
&lt;li&gt;DateTime&lt;li&gt;
&lt;li&gt;Other&lt;li&gt;
&lt;/ul&gt;

      </sci:help>
										<sci:legalval selected="true">Cleaned Data</sci:legalval>
										<sci:legalval>Property Summary</sci:legalval>
									</sci:arg>
									<sci:arg name="Summary Options" type="GroupType" required="false" visibility="hidden" multi="false" legalvalsenforced="false">
										<sci:help>Options that affect the output of the summary data only</sci:help>
										<sci:member>Maximum Number of Values</sci:member>
										<sci:member>Text Length</sci:member>
									</sci:arg>
									<sci:arg name="Maximum Number of Values" type="LongType" required="false" visibility="hidden" multi="false" expanded="true">
										<sci:help>For String properties, we also return a list of possible values. This sets the maximum number of different values we wish to return. If that is exceeded, then no values are returned.
      </sci:help>
										<sci:value>20</sci:value>
									</sci:arg>
									<sci:arg name="Text Length" type="LongType" required="false" visibility="hidden" multi="false">
										<sci:help>
        For string properties, if the length of the value is greater than or equal to this number,
        then that property is considered Text, and no values are collected or returned.
      </sci:help>
										<sci:value>32</sci:value>
									</sci:arg>
									<sci:arg name="Conversion Options" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>&lt;p&gt;Options that affect how we inspect and convert between types.&lt;/p&gt;

&lt;p&gt;Options are: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Check Date Time&lt;/b&gt;: check strings to see if they are datetime values. (This can be slow!)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Use Calculable Property Types&lt;/b&gt;: if the property name exists as a calculable property, use that type as the minimum type.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Numeric [0,1] is Integer&lt;/b&gt;: if we see a rpoperty with only 0 and 1&apos;s, that is normally considered a boolean. If this option is selected, it is considered an integer. &lt;/li&gt;
&lt;/ul&gt;</sci:help>
										<sci:legalval selected="true">Check Date Time</sci:legalval>
										<sci:legalval>Use Calculable Property Types</sci:legalval>
										<sci:legalval selected="true">Numeric [0,1] is Integer</sci:legalval>
									</sci:arg>
									<sci:arg name="Clean Behavior" type="StringType" required="false" visibility="visible" multi="false" expanded="true">
										<sci:help>&lt;p&gt;The &lt;i&gt;Clean Data&lt;/i&gt; will pass only clean data out the Pass port. &quot;Clean data&quot; is data where there are no missing values or values that failed to coerce to a requested property type, across all the properties of the data record.&lt;/p&gt;

&lt;p&gt;If a particular property has an unclean value in at least one data record, there are two cleaning choices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Remove Any Data Record with Unclean Value&lt;/b&gt;: any data record containing at least one unclean property value will be removed from the data stream and passed out the Fail port.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Remove Unclean Property from All Data Records&lt;/b&gt;: any property having an unclean value in at least one data record, will be removed from &lt;i&gt;all&lt;/i&gt; data records. The remaining properties will be returned via the Pass port. The removed properties are collected onto another data record and passed out the Fail port.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
										<sci:legalval selected="true">Remove Any Data Record with Unclean Value</sci:legalval>
										<sci:legalval>Remove Unclean Property from All Data Records</sci:legalval>
									</sci:arg>
									<sci:arg name="Missing Value Options" type="GroupType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
										<sci:help>Options to control the identification of missing values, and to possibly standardize (and then accept as clean) these values by column type using a provided replacement string.</sci:help>
										<sci:member>Missing Value Strings</sci:member>
										<sci:member>Replace Missing Values</sci:member>
									</sci:arg>
									<sci:arg name="Missing Value Strings" type="StringType" required="false" visibility="visible" multi="true" expanded="true">
										<sci:help>If provided, this is an array of string values that will be interpreted as missing values. Note that an empty entry causes the empty string to be treated as a missing value.</sci:help>
										<sci:value/>
										<sci:value>*</sci:value>
										<sci:value>?</sci:value>
										<sci:value>NULL</sci:value>
										<sci:value>NA</sci:value>
										<sci:value>N/A</sci:value>
										<sci:value>NaN</sci:value>
									</sci:arg>
									<sci:arg name="Replace Missing Values" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
										<sci:help>Whether to identify missing values using the list of values in &lt;i&gt;Missing Values Strings&lt;/i&gt;.</sci:help>
										<sci:member>Types to Replace</sci:member>
										<sci:legalval>True</sci:legalval>
										<sci:legalval selected="true">False</sci:legalval>
									</sci:arg>
									<sci:arg name="Types to Replace" type="StringType" required="false" visibility="visible" multi="true" expanded="true">
										<sci:help>Replace missing values with particular strings for particular column types</sci:help>
										<sci:member>Boolean Missing Values</sci:member>
										<sci:member>Integer Missing Values</sci:member>
										<sci:member>Double Missing Values</sci:member>
										<sci:member>String Missing Values</sci:member>
										<sci:member>DateTime Missing Values</sci:member>
										<sci:enabledscript>parameter(&apos;Replace Missing Values&apos;)</sci:enabledscript>
										<sci:legalval selected="true">Boolean</sci:legalval>
										<sci:legalval selected="true">Integer</sci:legalval>
										<sci:legalval selected="true">Double</sci:legalval>
										<sci:legalval selected="true">String</sci:legalval>
										<sci:legalval selected="true">DateTime</sci:legalval>
									</sci:arg>
									<sci:arg name="Boolean Missing Values" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Replace missing values in Boolean columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Boolean&apos;);</sci:enabledscript>
										<sci:value>False</sci:value>
									</sci:arg>
									<sci:arg name="Integer Missing Values" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Replace missing values in Integer columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Integer&apos;);</sci:enabledscript>
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="Double Missing Values" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Replace missing values in Double columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Double&apos;);</sci:enabledscript>
										<sci:value>0.0</sci:value>
									</sci:arg>
									<sci:arg name="String Missing Values" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Replace missing values in String columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;String&apos;);</sci:enabledscript>
									</sci:arg>
									<sci:arg name="DateTime Missing Values" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Replace missing values in DateTime columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;DateTime&apos;);</sci:enabledscript>
										<sci:value>1/1/1970</sci:value>
									</sci:arg>
									<sci:arg name="Property Type Coercion Options" type="GroupType" required="false" visibility="visible" multi="true" legalvalsenforced="false">
										<sci:help>You can force a particular property to a specific type. 

If you do this, and any of the values on a data record (other than missing values) fails to coerce, then the data is considered unclean. 
</sci:help>
										<sci:member>Property 1</sci:member>
										<sci:member>Property 2</sci:member>
										<sci:member>Property 3</sci:member>
										<sci:member>Property 4</sci:member>
										<sci:member>Property 5</sci:member>
										<sci:member>Property 6</sci:member>
									</sci:arg>
									<sci:arg name="Property 1" type="PropertyNameType" required="false" visibility="visible" multi="false" expanded="true">
										<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
										<sci:member>Property 1 Coerce to Type</sci:member>
									</sci:arg>
									<sci:arg name="Property 1 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
										<sci:legalval>Boolean</sci:legalval>
										<sci:legalval>Integer</sci:legalval>
										<sci:legalval selected="true">Double</sci:legalval>
										<sci:legalval>String</sci:legalval>
										<sci:legalval>DateTime</sci:legalval>
									</sci:arg>
									<sci:arg name="Property 2" type="PropertyNameType" required="false" visibility="visible" multi="false">
										<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
										<sci:member>Property 2 Coerce to Type</sci:member>
									</sci:arg>
									<sci:arg name="Property 2 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
										<sci:legalval>Boolean</sci:legalval>
										<sci:legalval>Integer</sci:legalval>
										<sci:legalval selected="true">Double</sci:legalval>
										<sci:legalval>String</sci:legalval>
										<sci:legalval>DateTime</sci:legalval>
									</sci:arg>
									<sci:arg name="Property 3" type="PropertyNameType" required="false" visibility="visible" multi="false">
										<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
										<sci:member>Property 3 Coerce to Type</sci:member>
									</sci:arg>
									<sci:arg name="Property 3 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
										<sci:legalval>Boolean</sci:legalval>
										<sci:legalval>Integer</sci:legalval>
										<sci:legalval selected="true">Double</sci:legalval>
										<sci:legalval>String</sci:legalval>
										<sci:legalval>DateTime</sci:legalval>
									</sci:arg>
									<sci:arg name="Property 4" type="PropertyNameType" required="false" visibility="visible" multi="false">
										<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
										<sci:member>Property 4 Coerce to Type</sci:member>
									</sci:arg>
									<sci:arg name="Property 4 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
										<sci:legalval>Boolean</sci:legalval>
										<sci:legalval>Integer</sci:legalval>
										<sci:legalval selected="true">Double</sci:legalval>
										<sci:legalval>String</sci:legalval>
										<sci:legalval>DateTime</sci:legalval>
									</sci:arg>
									<sci:arg name="Property 5" type="PropertyNameType" required="false" visibility="visible" multi="false">
										<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
										<sci:member>Property 5 Coerce to Type</sci:member>
									</sci:arg>
									<sci:arg name="Property 5 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
										<sci:legalval>Boolean</sci:legalval>
										<sci:legalval>Integer</sci:legalval>
										<sci:legalval selected="true">Double</sci:legalval>
										<sci:legalval>String</sci:legalval>
										<sci:legalval>DateTime</sci:legalval>
									</sci:arg>
									<sci:arg name="Property 6" type="PropertyNameType" required="false" visibility="visible" multi="false">
										<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
										<sci:member>Property 6 Coerce to Type</sci:member>
									</sci:arg>
									<sci:arg name="Property 6 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
										<sci:legalval>Boolean</sci:legalval>
										<sci:legalval>Integer</sci:legalval>
										<sci:legalval selected="true">Double</sci:legalval>
										<sci:legalval>String</sci:legalval>
										<sci:legalval>DateTime</sci:legalval>
									</sci:arg>
									<sci:arg name="Array Value Options" type="GroupType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
										<sci:help>Options to handle array data</sci:help>
										<sci:member>Array Values Are</sci:member>
									</sci:arg>
									<sci:arg name="Array Values Are" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Whether array values are OK, are unclean, or should be replaced by a single value, the first value in the array.</sci:help>
										<sci:legalval>OK</sci:legalval>
										<sci:legalval selected="true">Unclean</sci:legalval>
										<sci:legalval>Replaced by First Value</sci:legalval>
									</sci:arg>
									<sci:arg name="Ignore Properties" type="PropertyNameType" required="false" visibility="visible" multi="true" uimpl="false">
										<sci:help>A list of properties to ignore, if any. They will be passed through untouched, and never considered unclean.</sci:help>
										<sci:value>accession</sci:value>
										<sci:value>compound_chembl_id</sci:value>
										<sci:value>target_chembl_id</sci:value>
										<sci:value>canonical_smiles</sci:value>
										<sci:value>pref_name</sci:value>
										<sci:value>idnumber</sci:value>
										<sci:value>name</sci:value>
										<sci:value>pchembl_value</sci:value>
									</sci:arg>
									<sci:arg name="Error Property Name" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>The name of the property to put error messages into. If left blank, do not add an error property.</sci:help>
										<sci:value>ErrorText</sci:value>
									</sci:arg>
									<sci:arg name="CacheSizeInflationFactor" type="LongType" required="false" visibility="hidden" multi="false" uimpl="true">
										<sci:help>When you run using a limited cache size, normally only that many records may be output.
This parameter allows you to increase that size by a multiplicative factor. </sci:help>
										<sci:value>2</sci:value>
									</sci:arg>
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="Implementation Of" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:legalval>Normalize Property Types</sci:legalval>
										<sci:legalval selected="true">Clean Data</sci:legalval>
										<sci:legalval>Set Property Type</sci:legalval>
									</sci:arg>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/generic</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Thu Sep 14 07:50:41 2017</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>Clean Data</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>COMPONENTNODE</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{6E28C170-2FEC-4A3C-90A6-2DCEAA330E9E}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>90 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Ensure your data is clean; that is, has no missing values, is coerced to the desired type, and is not an array value.</sci:value>
										<sci:value>&lt;p&gt;&lt;i&gt;Cleaning&lt;/i&gt; data is the act of finding, for each property, that it has no missing values, is coerced to the desired type, and is not an array value. The type is inferred: for example, a property may contains strings, with values &quot;0&quot; and &quot;1&quot;. This will be cleaned into Boolean values.&lt;/p&gt;

The problems that cleaning addresses are:
&lt;ol&gt;
&lt;li&gt;The same property name may have different value types on different data records&lt;/li&gt;
&lt;li&gt;The property might be of types that are coercible to some simpler base type (e.g., numbers might be stored as strings, when they could be better represented as integers)&lt;/li&gt;
&lt;li&gt;The property might be missing from some data records&lt;/li&gt;
&lt;li&gt;The property might appear multiple times on a given data record (arrays)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The normalized type is the simplest type possible, ordered from: Null, Boolean, Integer, Double, String, DateTime.&lt;/p&gt;
</sci:value>
										<sci:value>Generic</sci:value>
										<sci:value/>
										<sci:value>Generic</sci:value>
										<sci:value>The Normalized data records, or the summary for each property.</sci:value>
										<sci:value>Generic</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Data Access and Manipulation\Data Manipulators\Clean Data</sci:value>
									</sci:arg>
								</sci:component>
								<sci:proplist>
									<sci:propval name="RegistrationVersion">18.1.0.1590</sci:propval>
								</sci:proplist>
							</sci:data>
							<sci:data object="SciTegic.TransformMolecule.1">
								<sci:component name="Deprotonate Bases" version="2">
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval>ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>Custom Error Message</sci:help>
									</sci:arg>
									<sci:arg name="Action" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:help>This parameter lists a set of options for the type of standardization that
you may perform.  The default is to standardize the charging and stereochemistry
of the molecule.  If multiple actions are selected, they are performed in 
the order given.</sci:help>
										<sci:legalval>ProtonateAcids</sci:legalval>
										<sci:legalval>DeprotonateAcids</sci:legalval>
										<sci:legalval>ProtonateBases</sci:legalval>
										<sci:legalval selected="true">DeprotonateBases</sci:legalval>
									</sci:arg>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/chemistryadv</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Tue Oct 31 12:23:58 2006</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>Deprotonate Bases</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>COMPONENTNODE</sci:value>
									</sci:arg>
									<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The component this component is based upon.</sci:help>
										<sci:value>Standardize Charges</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{805BEA88-0DDF-4bed-918D-8B1FC7A8512A}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>378 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Removes Hydrogen atoms from basic functional groups in the molecule, adjusting the charges accordingly
</sci:value>
										<sci:value>&lt;p&gt;Basic functional groups are defined as Nitrogen atoms with a positive formal charge and one or more attached Hydrogen atoms.  If the Nitrogen atom has implicit Hydrogen atoms, the number of implicit Hydrogen atoms is reduced by one.  If the Nitrogen atom has only explicit Hydrogen atoms, then one of the explicit Hydrogen atoms is removed.  The charge on the Nitrogen atom is set to zero.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The analogous component for acids is &lt;a href=&quot;javascript:DoLink(&apos;{AD51FE16-75A9-46a4-BADC-8E86800227AC}&apos;)&quot;&gt;Protonate Acids&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For handling both acids and bases at given levels of pH, use &lt;a href=&quot;javascript:DoLink(&apos;{72D1AEC5-EE9E-4a39-A3D6-63637069BF6E}&apos;)&quot;&gt;Ionize Molecule at pH&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</sci:value>
										<sci:value>Molecule</sci:value>
										<sci:value/>
										<sci:value>Molecule</sci:value>
										<sci:value/>
										<sci:value>None</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>1</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Chemistry\Data Access and Manipulation\Manipulators\Deprotonate Bases</sci:value>
									</sci:arg>
								</sci:component>
								<sci:proplist>
									<sci:propval name="RegistrationVersion">6.0.1.7</sci:propval>
								</sci:proplist>
							</sci:data>
							<sci:data object="SciTegic.TransformMolecule.1">
								<sci:component name="Protonate Acids" version="2">
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval>ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>Custom Error Message</sci:help>
									</sci:arg>
									<sci:arg name="Action" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:help>This parameter lists a set of options for the type of standardization that
you may perform.  The default is to standardize the charging and stereochemistry
of the molecule.  If multiple actions are selected, they are performed in 
the order given.</sci:help>
										<sci:legalval selected="true">ProtonateAcids</sci:legalval>
										<sci:legalval>DeprotonateAcids</sci:legalval>
										<sci:legalval>ProtonateBases</sci:legalval>
										<sci:legalval>DeprotonateBases</sci:legalval>
									</sci:arg>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/chemistryadv</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Fri Sep 22 14:18:00 2006</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>Protonate Acids</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>COMPONENTNODE</sci:value>
									</sci:arg>
									<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The component this component is based upon.</sci:help>
										<sci:value>Standardize Charges</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{AD51FE16-75A9-46a4-BADC-8E86800227AC}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>666 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Adds Hydrogen atoms to acid functional groups in the molecule, adjusting the charges accordingly

</sci:value>
										<sci:value>&lt;p&gt;Acid functional groups are defined as Oxygen, Sulfur, Nitrogen, or Carbon atoms with a negative formal charge, not attached to any charged atom. An implicit Hydrogen atom is added to the Oxygen or Sulfur atom and the charge is set to zero.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The analogous component for bases is &lt;a href=&quot;javascript:DoLink(&apos;{805BEA88-0DDF-4bed-918D-8B1FC7A8512A}&apos;)&quot;&gt;Deprotonate Bases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For handling both acids and bases at given levels of pH, use &lt;a href=&quot;javascript:DoLink(&apos;{72D1AEC5-EE9E-4a39-A3D6-63637069BF6E}&apos;)&quot;&gt;Ionize Molecule at pH&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</sci:value>
										<sci:value>Molecule</sci:value>
										<sci:value/>
										<sci:value>Molecule</sci:value>
										<sci:value/>
										<sci:value>None</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>2</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Chemistry\Data Access and Manipulation\Manipulators\Protonate Acids</sci:value>
									</sci:arg>
								</sci:component>
								<sci:proplist>
									<sci:propval name="RegistrationVersion">6.0.1.0</sci:propval>
								</sci:proplist>
							</sci:data>
							<sci:data object="SciTegic.TransformMolecule.1">
								<sci:component name="Standardize Molecule" version="2">
									<sci:arg name="Action" type="StringType" required="true" visibility="visible" multi="true" expanded="true">
										<sci:help>Options for the type of standardization you can perform. The default is to standardize the charging and stereochemistry of the molecule. If multiple actions are selected, they are performed in the given order.

Available actions:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;StandardizeStereo: &lt;/b&gt; 
Atoms that are perceived as true stereo atoms but which have no stereochemical 
markings (UnknownAtomStereo, EvenAtomStereo, or OddAtomStereo) are set to UnknownAtomStereo. 
Atoms that have stereochemical markings but which are not true stereoatoms are 
set to NoAtomStereo. 2D or 3D coordinates are not used in this process. &lt;br /&gt;
Similarly, bonds that are perceived as true stereo double bonds, but which have 
no stereochemical markings (UnknownBondStereo, CisBondStereo, or TransBondStereo) 
are set to UnknownBondStereo. Bonds that have stereochemical markings but which 
are not true stereo bonds are set to NoBondStereo. Again, 2D or 3D coordinates 
are not used in this process.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;StandardizeCharges:&lt;/b&gt; 
Sets standard formal charges for common functional groups: Quaternary Nitrogen: 
+1 &lt;br /&gt;
Nitro groups: N+(=O)O- &lt;br&gt;
Diazonium N: +1 &lt;br&gt;
Oxygen with three attachments: +1 &lt;br&gt;
X=O-C Oxygen: +1 &lt;br&gt;
Sulfur with three attachments: +1 &lt;br&gt;
S=O-C Sulfur: +1 &lt;br&gt;
F, Cl, Br, I with no attachments: -1 &lt;br&gt;
Note that halogen acids with explicit hydrogens (H-X) are not modified. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;StandardizePiSystems:&lt;/b&gt; 
Checks pi systems to convert them to a kekulized representation with single/double bonds and a net radical or charge (depending on the charge of the connected atom). &lt;/li&gt;
&lt;li&gt;&lt;b&gt;CenterMolecule:&lt;/b&gt; 
Translates the molecule to the center of geometry. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;RemoveSingleAtomFragments:&lt;/b&gt; 
Removes all unattached atoms from the molecule. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;KeepSmallestFragment:&lt;/b&gt; 
Keeps only the fragment with fewer atoms in the case of multifragment molecules. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;KeepLargestFragment:&lt;/b&gt; 
Keeps only the fragment with the most atoms in the case of multifragment molecules. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;RemoveLargestFragment:&lt;/b&gt; 
Removes the fragment with the most atoms in the case of multifragment molecules. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;MakeNon[H]Atoms[C]Atoms:&lt;/b&gt; 
Converts all the atoms in the molecule to Carbon. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;MakeNon[C,H]Atoms[Q]Atoms: &lt;/b&gt; 
Converts all non-carbon, non-hydrogen atoms in the molecule to the Q query atom type. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;MakeNon[H]Atoms[A]Atoms: &lt;/b&gt; 
Converts all non-hydrogen atoms in the molecule to the A query atom type. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;MakeAllBondsSingle: &lt;/b&gt; 
Converts all the bonds in the molecule to Single bonds. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearCoordinates:&lt;/b&gt; 
Sets all x, y, z coordinates to zero. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;FixCoordinateDimension:&lt;/b&gt; 
Checks the x, y, z atomic coordinates and sets the dimension for the molecule accordingly:
&lt;ul&gt;
&lt;li&gt;3 if non-zero values are found for x or y, and for z.&lt;/li&gt;
&lt;li&gt;2 if non-zero values are found for x or y, but not for z.&lt;/li&gt;
&lt;li&gt;0 if all x, y, z coordinates are zero.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;StraightenTripleBonds:&lt;/b&gt;
Looks for triple bonds with non-linear geometry and makes them linear. In some cases this action could cause atoms to overlap each other. This can be checked with the &lt;a href=&quot;javascript:DoLink(&apos;{0CFFF911-BF35-4A1B-8B2C-B9A586BD39F3}&apos;)&quot;&gt;Bump Check Filter&lt;/a&gt; and the bumps resolved using the &apos;Resolve Bumps Only&apos; option in &lt;a href=&quot;javascript:DoLink(&apos;{9164525E-5964-47A2-82D9-B8155B215724}&apos;)&quot;&gt;2D Coords&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;StraightenAllenes:&lt;/b&gt;
Looks for allene structures with non-linear geometry and makes them linear. In some cases this action could cause atoms to overlap each other. This can be checked with the &lt;a href=&quot;javascript:DoLink(&apos;{0CFFF911-BF35-4A1B-8B2C-B9A586BD39F3}&apos;)&quot;&gt;Bump Check Filter&lt;/a&gt; and the bumps resolved using the &apos;Resolve Bumps Only&apos; option in &lt;a href=&quot;javascript:DoLink(&apos;{9164525E-5964-47A2-82D9-B8155B215724}&apos;)&quot;&gt;2D Coords&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearMolecule:&lt;/b&gt; 
Deletes all atoms and bonds in the molecule, keeping the molecule object in the data record. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;RemoveMolecule:&lt;/b&gt; 
Deletes the molecule object from the data record. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;Convert to Absolute Stereo:&lt;/b&gt; 
Assign all stereo atoms present in the molecule to the absolute configuration represented in the molecule. This is equivalent to setting the molecule Chiral flag to 1. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;Convert to AND Enantiomer:&lt;/b&gt; 
Assign all stereo atoms present in the molecule to the same AND stereo group, representing a racemic mixture. This is equivalent to setting the molecule Chiral flag to 0.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Convert to OR Enantiomer:&lt;/b&gt; 
Assign all stereo atoms present in the molecule to the same OR stereo group. V3000 MOL format is required to represent this stereo configuration.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearStereo: &lt;/b&gt; 
Sets all atoms and bonds to NoStereo. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearEnhancedStereo: &lt;/b&gt; 
Clears all relative atom stereo groups (enhanced stereo) from the molecule.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearUnknownStereo:&lt;/b&gt; 
Sets all atoms and bonds that are marked UnknownStereo to NoStereo. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearUnknownAtomStereo:&lt;/b&gt; 
Sets all atoms that are marked UnknownStereo to NoStereo. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearUnknownCisTransBondStereo:&lt;/b&gt; 
Sets all bonds that are marked UnknownStereo to NoStereo. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearUnknownCisTransBondStereoInSmallRings:&lt;/b&gt; 
Sets all bonds in small rings that are marked UnknownStereo to NoStereo. This flag is useful because the SMILES writer suppresses Cis/Trans markings for bonds in small rings.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearCisTransBondStereo:&lt;/b&gt; 
Sets all bonds that are marked CisStereo or TransStereo to UnknownStereo. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearCharges: &lt;/b&gt; 
Sets all formal charges to zero. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;SetStereoFromCoordinates: &lt;/b&gt; 
This option uses the 2D coordinates and up/down bond markings, or the 
3D coordinates, to assign the stereochemistry of the atoms or bonds. Typically, 
this is done by the readers or the molecules from text components. Occasionally, 
components may create molecules that need to have their stereo reperceived. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;RepositionStereoBonds: &lt;/b&gt; 
This option repositions the stereo bond markings, trying to find the best bond to mark as a wedge bond for each stereo atom. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;RepositionAxialStereoBonds: &lt;/b&gt; 
This option repositions the stereo bond markings on axial stereo centers (allenes and atropisomers).  This is more expensive than the tetrahedral reposition action as it requires perceiving rings and aromaticity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;FixDirectionOfWedgeBonds: &lt;/b&gt; 
This option checks the wedge bonds in the molecule to make sure that the wedge is drawn with the stereo atom at the narrow end of the wedge. Any wedge bond for which there is a stereo atom at the wide end and no stereo atom at the narrow end is reversed to point in the other direction. A separate option, &lt;i&gt;Invert Wedge Bond When Changing Direction&lt;/i&gt;, controls whether or not to invert the bond stereo (up or down) when changing the direction of the wedge bond. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;StandardStereoToEnhancedStereo:&lt;/b&gt;  Converts structures which contain only standard chiral-flag on or chiral-flag off into structures that contain enhanced stereo groups.  If the structure has the chiral flag on, then all stereo centers will be added to a single ABS group.  If the structure has the chiral flag off, then all stereocenters  will be added to a single AND group.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearPiBonds: &lt;/b&gt; 
Deletes the pi bonds.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearQueryInfo: &lt;/b&gt; 
Deletes all query information from atoms and bonds. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearHighlightColors:&lt;/b&gt; 
Clears any highlight colors from atoms and bonds. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearAtomLabels:&lt;/b&gt; 
Clears any labels assigned to the atoms. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearBondLabels:&lt;/b&gt; 
Clears any labels assigned to the bonds. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;NeutralizeBondedZwitterions:&lt;/b&gt; 
Converts directly bonded zwitterions (positively charged atom bonded to negatively charged atom, A+B-) to the neutral representation (A=B)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearUnusualValence:&lt;/b&gt; 
Clears any atom valence query features and resets all implicit hydrogen counts to their standard values.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearIsotopes:&lt;/b&gt; 
Clears any isotope information from the atoms in the molecule, setting all to the most common isotopes.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearDativeBonds:&lt;/b&gt; 
Clears explicit dative bonds (as found in V3000 mol files).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearHydrogenBonds:&lt;/b&gt; 
Clears explicit hydrogen bonds (as found in V3000 mol files).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;LocalizeMarkushRAtomsOnRings:&lt;/b&gt; 
Takes molecules with delocalized R atoms (R atoms pointing to center of the ring) and replaces them with R atoms attached to all available positions in the ring.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To remove sgroups or invalidate their coordinates, use &lt;a href=&quot;javascript:DoLink(&apos;{C3FC63FA-492D-472C-8166-A1D73AE5B579}&apos;)&quot;&gt;Clear Sgroup Features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</sci:help>
										<sci:member>Invert Wedge Bond When Changing Direction</sci:member>
										<sci:member>Single Halogen Atoms</sci:member>
										<sci:member>Single Metal Atoms</sci:member>
										<sci:member>Normalize Metals in Group 1A</sci:member>
										<sci:member>Mark Unknown Stereo Centers</sci:member>
										<sci:member>Standardize Ionizable Groups</sci:member>
										<sci:member>Process Pseudo Stereo Atoms</sci:member>
										<sci:member>Preserve Stereo Marks On</sci:member>
										<sci:member>Remove Explicit Valences</sci:member>
										<sci:member>Acids</sci:member>
										<sci:legalval selected="true">StandardizeStereo</sci:legalval>
										<sci:legalval selected="true">StandardizeCharges</sci:legalval>
										<sci:legalval>StandardizePiSystems</sci:legalval>
										<sci:legalval>CenterMolecule</sci:legalval>
										<sci:legalval>RemoveSingleAtomFragments</sci:legalval>
										<sci:legalval>KeepSmallestFragment</sci:legalval>
										<sci:legalval>KeepLargestFragment</sci:legalval>
										<sci:legalval>RemoveLargestFragment</sci:legalval>
										<sci:legalval>MakeNon[H]Atoms[C]Atoms</sci:legalval>
										<sci:legalval>MakeNon[H]Atoms[A]Atoms</sci:legalval>
										<sci:legalval>MakeNon[C,H]Atoms[Q]Atoms</sci:legalval>
										<sci:legalval>MakeAllBondsSingle</sci:legalval>
										<sci:legalval>ClearCoordinates</sci:legalval>
										<sci:legalval>FixCoordinateDimension</sci:legalval>
										<sci:legalval>StraightenTripleBonds</sci:legalval>
										<sci:legalval>StraightenAllenes</sci:legalval>
										<sci:legalval>ClearMolecule</sci:legalval>
										<sci:legalval>RemoveMolecule</sci:legalval>
										<sci:legalval>Convert to Absolute Stereo</sci:legalval>
										<sci:legalval>Convert to AND Enantiomer</sci:legalval>
										<sci:legalval>Convert to OR Enantiomer</sci:legalval>
										<sci:legalval>ClearStereo</sci:legalval>
										<sci:legalval>ClearEnhancedStereo</sci:legalval>
										<sci:legalval>ClearUnknownStereo</sci:legalval>
										<sci:legalval>ClearUnknownAtomStereo</sci:legalval>
										<sci:legalval>ClearUnknownCisTransBondStereo</sci:legalval>
										<sci:legalval>ClearUnknownCisTransBondStereoInSmallRings</sci:legalval>
										<sci:legalval>ClearCisTransBondStereo</sci:legalval>
										<sci:legalval>SetStereoFromCoordinates</sci:legalval>
										<sci:legalval>RepositionStereoBonds</sci:legalval>
										<sci:legalval>RepositionAxialStereoBonds</sci:legalval>
										<sci:legalval>FixDirectionOfWedgeBonds</sci:legalval>
										<sci:legalval>StandardStereoToEnhancedStereo</sci:legalval>
										<sci:legalval>ClearCharges</sci:legalval>
										<sci:legalval>ClearPiBonds</sci:legalval>
										<sci:legalval>ClearHighlightColors</sci:legalval>
										<sci:legalval>ClearQueryInfo</sci:legalval>
										<sci:legalval>ClearAtomLabels</sci:legalval>
										<sci:legalval>ClearBondLabels</sci:legalval>
										<sci:legalval>NeutralizeBondedZwitterions</sci:legalval>
										<sci:legalval>ClearUnusualValence</sci:legalval>
										<sci:legalval>ClearIsotopes</sci:legalval>
										<sci:legalval>ClearDativeBonds</sci:legalval>
										<sci:legalval>ClearHydrogenBonds</sci:legalval>
										<sci:legalval>LocalizeMarkushRAtomsOnRings</sci:legalval>
									</sci:arg>
									<sci:arg name="Acids" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>Specify whether to charge, uncharge or keep the current charge for single-bonded Oxygen atoms in carboxylic, sulfuric and phosphoric acid groups.
&lt;br&gt;
This option is enabled only when &quot;StandardizeCharges&quot; is selected in the &lt;i&gt;Action&lt;/i&gt; parameter.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;StandardizeCharges&apos;)</sci:enabledscript>
										<sci:legalval>Charge</sci:legalval>
										<sci:legalval>Uncharge</sci:legalval>
										<sci:legalval selected="true">Keep Current Charge</sci:legalval>
									</sci:arg>
									<sci:arg name="Single Halogen Atoms" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Specify whether to charge, uncharge or keep the current charge for  any unconnected halogen atom found in the molecule.
&lt;br&gt;
This option is enabled only when &quot;StandardizeCharges&quot; is selected in the &lt;i&gt;Action&lt;/i&gt; parameter.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;StandardizeCharges&apos;)</sci:enabledscript>
										<sci:legalval>Charge</sci:legalval>
										<sci:legalval>Uncharge</sci:legalval>
										<sci:legalval selected="true">Keep Current Charge</sci:legalval>
									</sci:arg>
									<sci:arg name="Single Metal Atoms" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Specify whether to charge, uncharge or keep the current charge for  any unconnected metal atom found in the molecule.
&lt;br&gt;
This option is enabled only when &quot;StandardizeCharges&quot; is selected in the &lt;i&gt;Action&lt;/i&gt; parameter.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;StandardizeCharges&apos;)</sci:enabledscript>
										<sci:legalval>Charge</sci:legalval>
										<sci:legalval>Uncharge</sci:legalval>
										<sci:legalval selected="true">Keep Current Charge</sci:legalval>
									</sci:arg>
									<sci:arg name="Normalize Metals in Group 1A" type="BoolType" required="false" visibility="visible" multi="false">
										<sci:help>When set to True, a covalent bond is defined between positively charged ions in Group 1A (Li+, Na+, K+, Rb+, Cs+) and corresponding counter ions (C-, N-, Si-, P-). Also, covalent bonds between neutral Group 1A elements and neutral halogens or Oxygen are converted into ionic species, breaking the bond and charging the previously attached atoms to create (Li+, Na+, K+, Rb+, Cs+) and (X-, O-).

</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;StandardizeCharges&apos;)</sci:enabledscript>
										<sci:legalval>True</sci:legalval>
										<sci:legalval selected="true">False</sci:legalval>
									</sci:arg>
									<sci:arg name="Mark Unknown Stereo Centers" type="BoolType" required="false" visibility="visible" multi="false">
										<sci:help>When standardizing stereo, look for true stereo centers missing stereo marks (wedge bonds) and mark them as Unknown Stereo atoms, with their corresponding &apos;wiggly&apos; bonds.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;StandardizeStereo&apos;)</sci:enabledscript>
										<sci:legalval selected="true">True</sci:legalval>
										<sci:legalval>False</sci:legalval>
									</sci:arg>
									<sci:arg name="Process Pseudo Stereo Atoms" type="BoolType" required="false" visibility="visible" multi="false">
										<sci:help>Whether or not to include pseudo stereo atoms not marked with up or down bond wedges (unknown pseudo stereo) when doing &quot;StandardizeStereo&quot; or &quot;SetStereoFromCoordinates&quot;. </sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;SetStereoFromCoordinates&apos;) or
contains(parameter(&apos;Action&apos;), &apos;StandardizeStereo&apos;)</sci:enabledscript>
										<sci:legalval selected="true">True</sci:legalval>
										<sci:legalval>False</sci:legalval>
									</sci:arg>
									<sci:arg name="Preserve Stereo Marks On" type="StringType" required="false" visibility="visible" multi="true">
										<sci:help>Allow wedge bonds on certain atoms with perceived SP2 hybridization:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Allenes&lt;/b&gt;: Carbon atoms at the end of allene groups.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Restricted Biphenyls&lt;/b&gt;:Atoms at the ortho positions of geometrically restricted biphenyl or biaryl rings.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Conjugated SP2 Nitrogens&lt;/b&gt;:Nitrogen atoms with three single bonds which are perceived to be SP2 because of conjugation with neighboring groups.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Uncharged Tetrahedral Nitrogens&lt;/b&gt;: Normally Pipeline Pilot only recognizes Nitrogen as a tetrahedral stereocenter when it has a positive charge and four heavy attachments. Selecting this parameter will bypass this restriction and mark other Nitrogen stereocenters (such as Nitrogen atoms with three single bonds) as bad only if they fail the check of ambiguous wedge-bond geometry.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;StandardizeStereo&apos;)</sci:enabledscript>
										<sci:legalval selected="true">Allenes</sci:legalval>
										<sci:legalval selected="true">Restricted Biphenyls</sci:legalval>
										<sci:legalval>Conjugated SP2 Nitrogens</sci:legalval>
										<sci:legalval>Uncharged Tetrahedral Nitrogens</sci:legalval>
									</sci:arg>
									<sci:arg name="Invert Wedge Bond When Changing Direction" type="BoolType" required="false" visibility="visible" multi="false">
										<sci:help>This parameter controls whether or not to invert the bond stereo (up or down) when changing the direction of the wedge bond by selecting &quot;FixDirectionOfWedgeBonds&quot; in the &lt;i&gt;Action&lt;/i&gt; parameter.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;FixDirectionOfWedgeBonds&apos;)</sci:enabledscript>
										<sci:legalval selected="true">True</sci:legalval>
										<sci:legalval>False</sci:legalval>
									</sci:arg>
									<sci:arg name="Remove Explicit Valences" type="BoolType" required="false" visibility="visible" multi="false">
										<sci:help>Remove explicit valence values from atoms when clearing query infomation</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;ClearQueryInfo&apos;)</sci:enabledscript>
										<sci:legalval selected="true">True</sci:legalval>
										<sci:legalval>False</sci:legalval>
									</sci:arg>
									<sci:arg name="Track Actions Taken" type="BoolType" required="false" visibility="visible" multi="false">
										<sci:help>When enabled, this will keep track of which actions resulted in changes to the input molecule.  Actions that result in changes will be listed in a property called &lt;b&gt;Standardize_Actions_Taken&lt;/b&gt;.</sci:help>
										<sci:legalval>True</sci:legalval>
										<sci:legalval selected="true">False</sci:legalval>
									</sci:arg>
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval>ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="Standardize Ionizable Groups" type="BoolType" required="false" visibility="nevershow" multi="false">
										<sci:help>Transform ionizable groups such as sulphates, phosphates and guanidiniums to a standard form.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;StandardizeCharges&apos;)</sci:enabledscript>
										<sci:legalval>True</sci:legalval>
										<sci:legalval selected="true">False</sci:legalval>
									</sci:arg>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/chemistry</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Tue Jan 24 15:34:13 2017</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>Standardize Molecule</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>COMPONENTNODE</sci:value>
									</sci:arg>
									<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The component this component is based upon.</sci:help>
										<sci:value>Standardize Charges</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{EFEA1A46-A6DB-4DB9-A5A9-C7F3D2ADFDE2}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>954 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Applies selected predefined actions to input molecules such as standardizing charges or stereo, or the clearing of various attributes</sci:value>
										<sci:value>&lt;p&gt;One or more actions can be applied to each molecule to standardize the way molecules are presented to downstream components. See help text on &lt;i&gt;Action&lt;/i&gt; for a list and short description of all the available standardization actions.
&lt;p&gt;
Standardization is important when comparing molecular libraries from different sources. If different rules were used for structural representation when creating these libraries, a straight comparison would yield incorrect results. The options below allow you to apply a consistent set of rules to structures before comparing them.
&lt;p&gt;
</sci:value>
										<sci:value>Molecule</sci:value>
										<sci:value/>
										<sci:value>Molecule</sci:value>
										<sci:value>Transformed molecules </sci:value>
										<sci:value>None</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The server version when this component was registered</sci:help>
										<sci:value>18.1.0.1362</sci:value>
									</sci:arg>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>3</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Chemistry\Data Access and Manipulation\Manipulators\Standardize Molecule</sci:value>
									</sci:arg>
								</sci:component>
							</sci:data>
							<sci:data object="SciTegic.StripSalts.1">
								<sci:component name="Strip Salts" version="2">
									<sci:arg name="Salt Files" type="GroupType" required="false" visibility="visible" multi="false" expanded="true">
										<sci:member>Scitegic Salts</sci:member>
										<sci:member>User Salts</sci:member>
									</sci:arg>
									<sci:arg name="Scitegic Salts" type="URLType" required="false" visibility="visible" multi="false">
										<sci:help>File that contains the default salt queries</sci:help>
										<sci:value>data\Salts\Scitegic\Salts.sd</sci:value>
									</sci:arg>
									<sci:arg name="User Salts" type="URLType" required="false" visibility="visible" multi="false">
										<sci:help>File containing user-defined salt queries</sci:help>
									</sci:arg>
									<sci:arg name="Output SMILES of Identified Salts" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>Whether or not to output the SMILES strings of the salts found in the molecule in the property &lt;b&gt;SaltSmiles&lt;/b&gt;</sci:help>
										<sci:legalval>True</sci:legalval>
										<sci:legalval selected="true">False</sci:legalval>
									</sci:arg>
									<sci:arg name="Match Salt Queries Exactly" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>Toggles whether to use stricter search options on the internal substructure mapper used to identify salt fragments from the input set of salt queries.

&lt;p&gt;&lt;br&gt;When not enabled, the default salt identification options are used (these are the search options used in older versions of the component):
&lt;ul&gt;
&lt;li&gt;NonChiral Queries Are Enantiomers&lt;/li&gt;
&lt;li&gt;Uncharged Atoms Can Map Charged Atoms&lt;/li&gt;
&lt;li&gt;Stereo Atoms Can Map Nonstereo Atoms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;When enabled, the following more strict options are used:
&lt;ul&gt;
&lt;li&gt;Chiral Queries Only Map Chiral Targets&lt;/li&gt;
&lt;li&gt;NonChiral Queries Are Enantiomers&lt;/li&gt;
&lt;li&gt;Interpret RAtoms Literally&lt;/li&gt;
&lt;li&gt;Interpret ZAtoms Literally&lt;/li&gt;
&lt;li&gt;Interpret StarAtoms Literally&lt;/li&gt;
&lt;li&gt;Check Bonds To RAtoms&lt;/li&gt;
&lt;li&gt;Match Cis Trans Double Bonds&lt;/li&gt;
&lt;li&gt;Marked Isotopes Only Map Marked Isotopes&lt;/li&gt;
&lt;li&gt;Unmarked Isotopes Only Map Unmarked Isotopes&lt;/li&gt;
&lt;/ul&gt;

</sci:help>
										<sci:legalval>True</sci:legalval>
										<sci:legalval selected="true">False</sci:legalval>
									</sci:arg>
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval>ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The component this component is based upon.</sci:help>
										<sci:value>Substructure Map</sci:value>
									</sci:arg>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/chemistry</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Tue Feb 22 10:45:16 2011</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>Strip Salts</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>COMPONENTNODE</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{1A8DDD51-D1AE-45d9-823B-80E81B7BCAA6}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>1242 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Finds and removes salt fragments from the incoming molecules</sci:value>
										<sci:value>&lt;p&gt;Salt fragments in the input molecules are identified using supplied salt queries and removed.  The default salt queries are specified by the &lt;i&gt;Scitegic Salts&lt;/i&gt; parameter and are contained in the file data/Salts/Scitegic/Salts.sd.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;User Salts&lt;/i&gt; allows users to add their own salt queries by specifying the file or files containing them. Queries can be defined in either mol format (.mol, .sd, .sdf extension) or SMARTS (.sma extension).&lt;/p&gt;
&lt;p&gt;
When salts are identified and removed, the property &lt;b&gt;RemovedSalts&lt;/b&gt; is defined for the molecule. This array property contains the names of the removed salts. If the same salt fragment was present &lt;i&gt;N&lt;/i&gt; times, its name appears &lt;i&gt;N&lt;/i&gt; times in the array. 
&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only molecules consisting of more than one fragment are considered for salt removal.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To remove salt fragments specifying the salt queries in the input stream instead of reading them from a file, use &lt;a href=&quot;javascript:DoLink(&apos;{D79E4721-C1EE-4c68-9492-7B5720E4652D}&apos;)&quot;&gt;Strip Salts from Tag&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To only identify (and not remove) salt fragments, use &lt;a href=&quot;javascript:DoLink(&apos;{65582FDD-27E4-442f-BED7-71A254321894}&apos;)&quot;&gt;Identify Salts&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
										<sci:value>Molecule</sci:value>
										<sci:value/>
										<sci:value>Molecule</sci:value>
										<sci:value>Molecules with salts removed</sci:value>
										<sci:value>None</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The server version when this component was registered</sci:help>
										<sci:value>8.4.5.17</sci:value>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>4</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Chemistry\Data Access and Manipulation\Manipulators\Salts\Strip Salts</sci:value>
									</sci:arg>
								</sci:component>
							</sci:data>
							<sci:data object="SciTegic.CalculateSmiles.1">
								<sci:component name="Canonical Smiles" version="2">
									<sci:arg name="Output" type="StringType" required="false" visibility="visible" multi="true">
										<sci:help>&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SMILES&lt;/b&gt; is a non-canonical representation for the molecule. (This is very fast to calculate compared to Canonical_SMILES.)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Canonical_SMILES&lt;/b&gt; is the representation that can be compared for identicality.&lt;/li&gt;
&lt;/ul&gt;

&lt;i&gt;Output&lt;/i&gt; properties can be calculated &quot;on demand&quot; by simply using their names within a PilotScript expression or as the parameter value to many parameters that require a property name.</sci:help>
										<sci:legalval type="StringType" selected="true">Canonical_Smiles</sci:legalval>
										<sci:legalval type="StringType">Smiles</sci:legalval>
									</sci:arg>
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval>ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/chemistry</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Fri Apr 08 13:57:30 2011</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>Canonical Smiles</sci:value>
									</sci:arg>
									<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The component this component is based upon.</sci:help>
										<sci:value>Canonical Smiles</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>CALCULATORNODE</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{0C60C40A-5189-42DA-A3C0-4EA44BC27D15}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>1530 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Calculates a SMILES or canonical SMILES representation of the input molecule</sci:value>
										<sci:value>&lt;p&gt;SMILES is a terse textual representation of molecular data.  Canonical SMILES is a form of SMILES that is independent of how the molecule is drawn and so can be used to compare whether two molecules are identical.&lt;/P&gt;

Either or both of the following two properties can be calculated:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SMILES&lt;/b&gt; is a non-canonical representation for the molecule. (This is very fast to calculate compared to Canonical_SMILES.)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Canonical_SMILES&lt;/b&gt; is the representation that can be compared for identicality.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;The canonicalization algorithm is SciTegic&apos;s; while it is derived from the published Daylight algorithm, however, lack of complete documentation of their procedure means that it will not necessarily give identical results. Compare two SMILES for identity only when having both canonicalized by the same method. &lt;/li&gt;
&lt;li&gt;Stereo markings are only added to the SMILES when stereo is explicitly set on a stereocenter.  This is often not the case for 3D molecules where the stereo is implied from the coordinates of the attached atoms and not from explicit stereo markings.  To add stereo markings from coordinates use the &lt;i&gt;SetStereoFromCoordinates&lt;/i&gt; action in the &lt;a href=&quot;javascript:DoLink(&apos;{EFEA1A46-A6DB-4DB9-A5A9-C7F3D2ADFDE2}&apos;)&quot;&gt;Standardize Molecule&lt;/a&gt; component.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;You can create a SMILES string as text under any property name using &lt;a href=&quot;javascript:DoLink(&apos;{0C60C40A-5189-42DA-A3C0-4EA44BFF7D15}&apos;)&quot;&gt;Molecule to SMILES&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can convert a SMILES string into a molecule using &lt;a href=&quot;javascript:DoLink(&apos;{AC8262DA-E648-4D24-9CD1-D731A8F53F9D}&apos;)&quot;&gt;Molecule from SMILES&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For an alternative way of generating a canonical string representation, see &lt;a href=&quot;javascript:DoLink(&apos;{EB62CC30-BC6A-4d5f-8618-3EB9AF611C69}&apos;)&quot;&gt;Molecule to InChI&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</sci:value>
										<sci:value>Molecule</sci:value>
										<sci:value/>
										<sci:value>Molecule</sci:value>
										<sci:value>Records augmented with a text property containing the canonical SMILES or SMILES</sci:value>
										<sci:value>None</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The server version when this component was registered</sci:help>
										<sci:value>8.4.5.28</sci:value>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>5</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Chemistry\Property Calculators\Structural\Canonical Smiles</sci:value>
									</sci:arg>
								</sci:component>
								<sci:proplist>
									<sci:propval name="Canonical_Smiles|Category">Molecular Formats</sci:propval>
									<sci:propval name="Smiles|Category">Molecular Formats</sci:propval>
								</sci:proplist>
							</sci:data>
							<sci:data object="SciTegic.PropertyFunctions.1">
								<sci:component name="Rename Properties" version="2">
									<sci:arg name="Original Property Names" type="PropertyNameType" required="true" visibility="visible" multi="true">
										<sci:help>An array of property names to rename. The new name will be the corresponding name in &lt;i&gt;New Property Names&lt;i&gt;.</sci:help>
										<sci:value>Canonical_Smiles</sci:value>
									</sci:arg>
									<sci:arg name="New Property Names" type="PropertyNameType" required="true" visibility="visible" multi="true">
										<sci:help>An array of the new property names. The original name will be the corresponding name in &lt;i&gt;Original Property Names&lt;i&gt;.</sci:help>
										<sci:value>canonical_smiles</sci:value>
									</sci:arg>
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval>ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>Custom Error Message</sci:help>
									</sci:arg>
									<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:help>the action to perform</sci:help>
										<sci:value>RenameProperties</sci:value>
									</sci:arg>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/generic</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Tue Feb 28 12:30:36 2017</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
										<sci:help>Automatically update the component display name when the &quot;Destination&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
										<sci:value>
#orig := Parameter(&apos;Original Property Names&apos;);
#new := Parameter(&apos;New Property Names&apos;);
if (numvalues(#orig) == 0 OR #orig[1] eq &quot;&quot; OR numvalues(#new) == 0 OR #new[1] eq &quot;&quot;) then
	&quot;&quot;;
else
  #display := &apos;Rename &apos; . #orig[1] . &apos; to &apos; . #new[1];
  if (numvalues(#orig) &gt; 1) then
    #display .= &apos;, ...&apos;;
  end if;
  #display;
end if;
</sci:value>
									</sci:arg>
									<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
										<sci:help>Protocol AutoLayout</sci:help>
										<sci:value>true</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>EXPRESSIONNODE</sci:value>
									</sci:arg>
									<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
										<sci:help>Component Revision</sci:help>
										<sci:value>100</sci:value>
									</sci:arg>
									<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The component this component is based upon.</sci:help>
										<sci:value>SubProtocol</sci:value>
									</sci:arg>
									<sci:arg name="ProtocolScale" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Protocol Scale</sci:help>
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>1818 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{04496ABE-C1D2-43D2-83D4-35AC9FC8D501}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Rename the specified properties</sci:value>
										<sci:value>&lt;p&gt;For each incoming data record, rename the properties found in the &lt;i&gt;Original Property Names&lt;/i&gt; list to the names provided in &lt;i&gt;New Property Names&lt;/i&gt;.

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To remove specified properties from each data record, use 
&lt;a href=&quot;javascript:DoLink(&apos;{C2ED35FF-5397-4877-AADB-10F1A15D60E2}&apos;)&quot;&gt;Remove Properties&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</sci:value>
										<sci:value>Generic</sci:value>
										<sci:value/>
										<sci:value>Generic</sci:value>
										<sci:value>With only the specified properties remaining</sci:value>
										<sci:value>None</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The server version when this component was registered</sci:help>
										<sci:value>18.1.0.1376</sci:value>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
										<sci:help>By Ref</sci:help>
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>Protocol Sticky Notes</sci:help>
									</sci:arg>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>6</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Data Access and Manipulation\Property Manipulators\Rename Properties</sci:value>
									</sci:arg>
								</sci:component>
							</sci:data>
							<sci:data object="SciTegic.PropertyFunctions.1">
								<sci:component name="Remove Properties" version="2">
									<sci:arg name="PropertyList" type="PropertyNameType" required="true" visibility="visible" multi="true">
										<sci:help>The names of properties to remove from each data record entering the component</sci:help>
										<sci:value>RemovedSalts</sci:value>
									</sci:arg>
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval>ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>Custom Error Message</sci:help>
									</sci:arg>
									<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:help>the action to perform</sci:help>
										<sci:value>Remove</sci:value>
									</sci:arg>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/generic</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Tue Sep 13 07:18:43 2016</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
										<sci:help>Automatically update the component display name when the &quot;PropertyList&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
										<sci:value>#propertyList := Parameter(&apos;PropertyList&apos;);
#displayName := &apos;&apos;;
for #i in 1 .. numvalues(#propertyList) loop
  #prop := trim(#propertyList[#i]);
  if (strlength(#prop) &gt; 0) then
    if (strlength(#displayName) &gt; 0) then
	  #displayName .= &apos;, &apos;;
	end if;
    #displayName .= #prop;
  end if;
end loop;
if(strlength(#displayName) &gt; 0) then		
	&apos;Remove &apos; . #displayName;
else
	&quot;&quot;;
end if;</sci:value>
									</sci:arg>
									<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
										<sci:help>Protocol AutoLayout</sci:help>
										<sci:value>true</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>EXPRESSIONNODE</sci:value>
									</sci:arg>
									<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
										<sci:help>Component Revision</sci:help>
										<sci:value>100</sci:value>
									</sci:arg>
									<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The component this component is based upon.</sci:help>
										<sci:value>SubProtocol</sci:value>
									</sci:arg>
									<sci:arg name="ProtocolScale" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Protocol Scale</sci:help>
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>2106 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{C2ED35FF-5397-4877-AADB-10F1A15D60E2}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Removes the specified properties</sci:value>
										<sci:value>For each data record that enters the component, the properties specified by &lt;i&gt;PropertyList&lt;/i&gt; are removed from the  record. 

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;To keep only a few properties from a long list, it may be more efficient to instead use &lt;a href=&quot;javascript:DoLink(&apos;{456195EF-9708-4367-B3DD-21EBF3796604}&apos;)&quot;&gt;Keep Properties&lt;/a&gt;.&lt;/p&gt;</sci:value>
										<sci:value>Generic</sci:value>
										<sci:value/>
										<sci:value>Generic</sci:value>
										<sci:value>Data records with the specified properties removed</sci:value>
										<sci:value>None</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The server version when this component was registered</sci:help>
										<sci:value>17.1.0.119</sci:value>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
										<sci:help>By Ref</sci:help>
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>Protocol Sticky Notes</sci:help>
									</sci:arg>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>7</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Data Access and Manipulation\Property Manipulators\Remove Properties</sci:value>
									</sci:arg>
								</sci:component>
							</sci:data>
							<sci:connectid from="0" to="1" type="true"/>
							<sci:connectid from="1" to="2" type="true"/>
							<sci:connectid from="2" to="3" type="true"/>
							<sci:connectid from="3" to="4" type="true"/>
							<sci:connectid from="4" to="5" type="true"/>
							<sci:connectid from="5" to="6" type="true"/>
							<sci:connectid from="6" to="7" type="true"/>
						</sci:protocol>
					</sci:data>
					<sci:connectid from="0" to="7" type="true"/>
					<sci:connectid from="7" to="1" type="true"/>
					<sci:connectid from="1" to="2" type="true"/>
					<sci:connectid from="2" to="3" type="true"/>
					<sci:connectid from="3" to="4" type="true"/>
					<sci:connectid from="4" to="5" type="true"/>
					<sci:connectid from="5" to="6" type="true"/>
				</sci:protocol>
			</sci:data>
			<sci:data object="SciTegic.PropertyFunctions.1">
				<sci:component name="First Occurrence Filter" version="2">
					<sci:arg name="KeyProperty" type="PropertyNameType" required="true" visibility="visible" multi="true">
						<sci:help>Name of the property holding values to keep only one of.  If you give more than one key property, then all values must have occurred at the same time on some other record for it to be rejected.</sci:help>
						<sci:member>CaseSensitive</sci:member>
						<sci:value>canonical_smiles</sci:value>
					</sci:arg>
					<sci:arg name="CaseSensitive" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>Whether to perform the comparison as case-sensitive or case-insensitive 
strings</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Custom Error Message</sci:help>
					</sci:arg>
					<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:help>the action to perform</sci:help>
						<sci:value>FirstOccurrence</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Thu Jan 16 14:54:51 2003</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>First Occurrence
Filter</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Expression Filter</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>FILTERNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{D2EC3EBB-CD17-4093-93A9-D9FB603DE083}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>666 -1195</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Passes data records for which the values of specified properties have not been seen on any previous record

</sci:value>
						<sci:value>&lt;p&gt;For each incoming data record, the value of the property specified by &lt;i&gt;KeyProperty&lt;/i&gt; is checked.  If the value has not been seen in earlier records, the record is sent out the Pass port.  Otherwise it is sent out the Fail port.&lt;/p&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To filter for data records with property values that occur once and only once in the input stream, use &lt;a href=&quot;javascript:DoLink(&apos;{2FD9ECF2-C47F-4A20-AC72-5F352E08FC98}&apos;)&quot;&gt;Unique Filter&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value>Data records with the first occurrence of a value of the given property.</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value>Data records with the second and subsequent occurrences of a value of the given property.</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>9</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Data Filters\First Occurrence Filter</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.PropertyFunctions.1">
				<sci:component name="No-op" version="2">
					<sci:arg name="DataActionOnError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When a General or DataType error occurs during processing:  
  LeaveData: The data is passed unalterd
  ClearData: The data is cleared before being passed (an empty data item)
  DeleteData: The data is deleted and not passed</sci:help>
						<sci:legalval selected="true">LeaveData</sci:legalval>
						<sci:legalval>ClearData</sci:legalval>
						<sci:legalval>DeleteData</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>CustomErrorText</sci:help>
					</sci:arg>
					<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:help>the action to perform</sci:help>
						<sci:value>PassDataToPort</sci:value>
					</sci:arg>
					<sci:arg name="Port" type="LongType" required="true" visibility="nevershow" multi="false">
						<sci:help>the port to pass data to</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>COMPONENTNODE</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Thu Sep 28 16:34:08 2006</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>No-op</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Evaluate Expression</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{6E468A38-A6F7-4371-B65B-501A3ED4C0D9}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>954 -1195</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Sends all incoming records out the Pass port unchanged</sci:value>
						<sci:value>&lt;p&gt;Useful in subprotocols to capture the point of input. For example, if you wish to perform two different sequences of operations on the same input data, use No-op as the first component of the subprotocol and connect both pipes to the No-op output port.&lt;/p&gt;

&lt;p&gt;You can also use this component to simplify the layout for complex protocols. For example, if you have three Reader components that need to be connected to three Viewer components, placing a No-op in the middle reduces the number of required connections and clarifies the logic.&lt;/p&gt;
</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>6.0.1.1</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>10</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Utilities\Subprotocol Utilities\No-op</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.PropertyFunctions.1">
				<sci:component name="No-op" version="2">
					<sci:arg name="DataActionOnError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When a General or DataType error occurs during processing:  
  LeaveData: The data is passed unalterd
  ClearData: The data is cleared before being passed (an empty data item)
  DeleteData: The data is deleted and not passed</sci:help>
						<sci:legalval selected="true">LeaveData</sci:legalval>
						<sci:legalval>ClearData</sci:legalval>
						<sci:legalval>DeleteData</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>CustomErrorText</sci:help>
					</sci:arg>
					<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:help>the action to perform</sci:help>
						<sci:value>PassDataToPort</sci:value>
					</sci:arg>
					<sci:arg name="Port" type="LongType" required="true" visibility="nevershow" multi="false">
						<sci:help>the port to pass data to</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>COMPONENTNODE</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Thu Sep 28 16:34:08 2006</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>No-op</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Evaluate Expression</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{6E468A38-A6F7-4371-B65B-501A3ED4C0D9}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>1242 -1195</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Sends all incoming records out the Pass port unchanged</sci:value>
						<sci:value>&lt;p&gt;Useful in subprotocols to capture the point of input. For example, if you wish to perform two different sequences of operations on the same input data, use No-op as the first component of the subprotocol and connect both pipes to the No-op output port.&lt;/p&gt;

&lt;p&gt;You can also use this component to simplify the layout for complex protocols. For example, if you have three Reader components that need to be connected to three Viewer components, placing a No-op in the middle reduces the number of required connections and clarifies the logic.&lt;/p&gt;
</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>6.0.1.1</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>11</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Utilities\Subprotocol Utilities\No-op</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.DelimitedReader.1">
				<sci:component name="Delimited Text Reader" version="2">
					<sci:arg name="Source" type="URLType" required="true" visibility="visible" multi="false" expanded="true" legalvalsenforced="false">
						<sci:help>&lt;p&gt;
The location from which to read the data. Can be a file, a network resource, a global property, or a data record property.
&lt;/p&gt; 
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;For a file, enter a path.&lt;/li&gt;
&lt;li&gt;For a network resource, enter a network URL in the form &lt;b&gt;protocol://server:port/...&lt;/b&gt;. (If port is omitted, a default is used.) Protocols supported are:
	&lt;ul&gt;
	&lt;li&gt;http, https&lt;/li&gt;
	&lt;li&gt;ftp&lt;/li&gt;
	&lt;li&gt;hdfs (Hadoop Distributed File System)&lt;/li&gt;
	&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For a global property, enter &quot;global://property-name&quot;, or select &quot;Global Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;For a data record property, enter &quot;property://property-name&quot;, or add an input port and select &quot;Data Property...&quot; from the &quot;Initialize Using&quot; right-click menu.&lt;/li&gt;
&lt;li&gt;To read multiple files, enter a comma-separated list of any of the above.&lt;/i&gt;
&lt;/ul&gt;</sci:help>
						<sci:member>Maximum</sci:member>
						<sci:member>Keep Properties</sci:member>
						<sci:member>UTF-8 Auto Detect</sci:member>
						<sci:member>SourceTag</sci:member>
						<sci:member>HasColumnNames</sci:member>
						<sci:member>Column Name Lines</sci:member>
						<sci:member>Authentication Options</sci:member>
						<sci:value>/zfsdata/data/datasets/ZINC15_2018-08-15/AA/*,/zfsdata/data/datasets/ZINC15_2018-08-15/AB/*,/zfsdata/data/datasets/ZINC15_2018-08-15/AC/*,/zfsdata/data/datasets/ZINC15_2018-08-15/AD/*,/zfsdata/data/datasets/ZINC15_2018-08-15/AE/*,/zfsdata/data/datasets/ZINC15_2018-08-15/AF/*,/zfsdata/data/datasets/ZINC15_2018-08-15/AG/*,/zfsdata/data/datasets/ZINC15_2018-08-15/AH/*,/zfsdata/data/datasets/ZINC15_2018-08-15/AI/*,/zfsdata/data/datasets/ZINC15_2018-08-15/AJ/*,/zfsdata/data/datasets/ZINC15_2018-08-15/AK/*,/zfsdata/data/datasets/ZINC15_2018-08-15/BA/*,/zfsdata/data/datasets/ZINC15_2018-08-15/BB/*,/zfsdata/data/datasets/ZINC15_2018-08-15/BC/*,/zfsdata/data/datasets/ZINC15_2018-08-15/BD/*,/zfsdata/data/datasets/ZINC15_2018-08-15/BE/*,/zfsdata/data/datasets/ZINC15_2018-08-15/BF/*,/zfsdata/data/datasets/ZINC15_2018-08-15/BG/*,/zfsdata/data/datasets/ZINC15_2018-08-15/BH/*,/zfsdata/data/datasets/ZINC15_2018-08-15/BI/*,/zfsdata/data/datasets/ZINC15_2018-08-15/BJ/*,/zfsdata/data/datasets/ZINC15_2018-08-15/BK/*,/zfsdata/data/datasets/ZINC15_2018-08-15/CA/*,/zfsdata/data/datasets/ZINC15_2018-08-15/CB/*,/zfsdata/data/datasets/ZINC15_2018-08-15/CC/*,/zfsdata/data/datasets/ZINC15_2018-08-15/CD/*,/zfsdata/data/datasets/ZINC15_2018-08-15/CE/*,/zfsdata/data/datasets/ZINC15_2018-08-15/CF/*,/zfsdata/data/datasets/ZINC15_2018-08-15/CG/*,/zfsdata/data/datasets/ZINC15_2018-08-15/CH/*,/zfsdata/data/datasets/ZINC15_2018-08-15/CI/*,/zfsdata/data/datasets/ZINC15_2018-08-15/CJ/*,/zfsdata/data/datasets/ZINC15_2018-08-15/CK/*,/zfsdata/data/datasets/ZINC15_2018-08-15/DA/*,/zfsdata/data/datasets/ZINC15_2018-08-15/DB/*,/zfsdata/data/datasets/ZINC15_2018-08-15/DC/*,/zfsdata/data/datasets/ZINC15_2018-08-15/DD/*,/zfsdata/data/datasets/ZINC15_2018-08-15/DE/*,/zfsdata/data/datasets/ZINC15_2018-08-15/DF/*,/zfsdata/data/datasets/ZINC15_2018-08-15/DG/*,/zfsdata/data/datasets/ZINC15_2018-08-15/DH/*,/zfsdata/data/datasets/ZINC15_2018-08-15/DI/*,/zfsdata/data/datasets/ZINC15_2018-08-15/DJ/*,/zfsdata/data/datasets/ZINC15_2018-08-15/DK/*,/zfsdata/data/datasets/ZINC15_2018-08-15/EA/*,/zfsdata/data/datasets/ZINC15_2018-08-15/EB/*,/zfsdata/data/datasets/ZINC15_2018-08-15/EC/*,/zfsdata/data/datasets/ZINC15_2018-08-15/ED/*,/zfsdata/data/datasets/ZINC15_2018-08-15/EE/*,/zfsdata/data/datasets/ZINC15_2018-08-15/EF/*,/zfsdata/data/datasets/ZINC15_2018-08-15/EG/*,/zfsdata/data/datasets/ZINC15_2018-08-15/EH/*,/zfsdata/data/datasets/ZINC15_2018-08-15/EI/*,/zfsdata/data/datasets/ZINC15_2018-08-15/EJ/*,/zfsdata/data/datasets/ZINC15_2018-08-15/EK/*,/zfsdata/data/datasets/ZINC15_2018-08-15/FA/*,/zfsdata/data/datasets/ZINC15_2018-08-15/FB/*,/zfsdata/data/datasets/ZINC15_2018-08-15/FC/*,/zfsdata/data/datasets/ZINC15_2018-08-15/FD/*,/zfsdata/data/datasets/ZINC15_2018-08-15/FE/*,/zfsdata/data/datasets/ZINC15_2018-08-15/FF/*,/zfsdata/data/datasets/ZINC15_2018-08-15/FG/*,/zfsdata/data/datasets/ZINC15_2018-08-15/FH/*,/zfsdata/data/datasets/ZINC15_2018-08-15/FI/*,/zfsdata/data/datasets/ZINC15_2018-08-15/FJ/*,/zfsdata/data/datasets/ZINC15_2018-08-15/FK/*,/zfsdata/data/datasets/ZINC15_2018-08-15/GA/*</sci:value>
					</sci:arg>
					<sci:arg name="Authentication Options" type="GroupType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
						<sci:help>For HTTP, HTTPS, and HDFS URLs, you may optionally specify authentication information for the URL in the following parameters</sci:help>
						<sci:member>Username</sci:member>
						<sci:member>Password</sci:member>
						<sci:member>Authentication Method</sci:member>
						<sci:member>KDC Server</sci:member>
						<sci:member>KDC Realm</sci:member>
						<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HTTP or HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^(https?|hdfs):&apos;;</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Authentication Method" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
						<sci:help>Determines which method to use during authentication with an HTTP, HTTPS, or HDFS URL.

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Use Username and Password Parameters&lt;/b&gt;: Use the values provided by the parameter group&apos;s &lt;i&gt;Username&lt;/i&gt; and &lt;i&gt;Password&lt;/i&gt; parameters.
&lt;li&gt;&lt;b&gt;Use Pipeline Pilot Credentials&lt;/b&gt;: Use the username and password that were provided when the user logged into Pipeline Pilot if available.  NOTE: if the &lt;i&gt;Username&lt;/i&gt; parameter is provided, its value will override the user&apos;s logged in username.
&lt;/ul&gt;</sci:help>
						<sci:legalval selected="true">Use Username and Password Parameters</sci:legalval>
						<sci:legalval>Use Pipeline Pilot Credentials</sci:legalval>
					</sci:arg>
					<sci:arg name="Username" type="UserNameType" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
						<sci:help>&lt;p&gt;
The username used to connect to the supplied URL.
&lt;/p&gt;
&lt;p&gt;
If the Authentication Method is set to &apos;Use Username and Password Parameters&apos;, then this parameter
must be filled in to log into the remote server.
&lt;/p&gt;
&lt;p&gt; 
If the Authentication Method is set to &apos;Use Pipeline Pilot Credentials&apos;, then this parameter can be left empty
and the logged in username is used. As an override option, if the username is filled in, this
username will be used along with the user&apos;s Pipeline Pilot password.
&lt;/p&gt;
</sci:help>
					</sci:arg>
					<sci:arg name="Password" type="xpass" encrypt="bf_1" required="false" visibility="hidden" multi="false" legalvalsenforced="false" uimpl="false">
						<sci:help>The password used to authenticate to the URL.  This parameter is disabled if Authentication Method is not set to &apos;Use Username and Password Parameters&apos;.
</sci:help>
						<sci:enabledscript>SetDisabledDetails(&quot;To enable, set Authentication Method to &apos;Use Username and Password Parameters&apos;&quot;);
Parameter(&apos;Authentication Method&apos;) eq &apos;Use Username and Password Parameters&apos;;</sci:enabledscript>
					</sci:arg>
					<sci:arg name="KDC Server" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
						<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
						<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
					</sci:arg>
					<sci:arg name="KDC Realm" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
						<sci:help>For authentication to HDFS servers, KDC Server and Realm are also required</sci:help>
						<sci:enabledscript>SetDisabledDetails(&apos;To enable, specify an HDFS URL for Source&apos;);
Parameter(&apos;Source&apos;) rlike &apos;^hdfs:&apos;;</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
						<sci:help>The maximum number of data records to read. If empty, all records are read.</sci:help>
					</sci:arg>
					<sci:arg name="SourceTag" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>Specifies a tag format for identifying the source of data records. Causes a property named &lt;b&gt;SourceTag&lt;/b&gt; to be created to hold the value. Options and their associated tag values are:
&lt;ul&gt;
&lt;li&gt;None: No &lt;b&gt;SourceTag&lt;/b&gt; property is created and any existing &lt;b&gt;SourceTag&lt;/b&gt; properties are removed.
&lt;li&gt;Filename: The name of the file excluding its extension
&lt;li&gt;FilenameAndExtension: The name of the file including its file extension
&lt;li&gt;FullFilename: The name of the file, including its extension and directory path
&lt;li&gt;ZipFilename: When reading a compressed zip file, the filename within the compressed archive
&lt;li&gt;Number: When multiple files are read, a number (1, 2, 3...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;Letter: When multiple files are read , a letter (A, B, C...) corresponding to the order of the files in &lt;i&gt;Source&lt;/i&gt;
&lt;li&gt;KeepCurrent: Keeps the current value of &lt;b&gt;SourceTag&lt;/b&gt; if present
&lt;/ul&gt;</sci:help>
						<sci:legalval selected="true">None</sci:legalval>
						<sci:legalval>Filename</sci:legalval>
						<sci:legalval>FilenameAndExtension</sci:legalval>
						<sci:legalval>FullFilename</sci:legalval>
						<sci:legalval>ZipFilename</sci:legalval>
						<sci:legalval>Number</sci:legalval>
						<sci:legalval>Letter</sci:legalval>
						<sci:legalval>KeepCurrent</sci:legalval>
					</sci:arg>
					<sci:arg name="Keep Properties" type="PropertyPreviewType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
						<sci:help>Specifies properties from &lt;i&gt;Source&lt;/i&gt; to retain for each output data record. If not specified, all properties are retained. A value of &quot;-&quot; (minus sign) specifies that no properties are retained.</sci:help>
					</sci:arg>
					<sci:arg name="UTF-8 Auto Detect" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
						<sci:help>Specifies whether to attempt to infer the use of UTF-8 encoding in &lt;i&gt;Source&lt;/i&gt; files when a byte order mark (BOM) is absent from them.
&lt;p&gt;
&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;UTF-8 is a type of character encoding which represents international characters with multiple bytes, while basic Latin characters remain as a single byte.  If a file begins with a BOM, then the encoding can be inferred with confidence. If not, an indirect approach is necessary. This approach is not 100% reliable.  In some cases, valid text stored in different character encodings can appear to be valid UTF-8.  In these cases, the automatic detection will result in garbled text.  When this occurs, consider using the &lt;a href=&quot;javascript:DoLink(&apos;{B0B1B56C-3DF6-444C-BB78-B43211188F63}&apos;)&quot;&gt;Binary Reader&lt;/a&gt; to read the raw bytes from the file, then convert the data using the Pilotscript function &lt;b&gt;ConvertBytesToString&lt;/b&gt;, which allows you to specify the encoding.
&lt;/ul&gt;

</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="HasColumnNames" type="BoolType" required="true" visibility="visible" multi="false" legalvalsenforced="false">
						<sci:help>If True, property names are taken from the first line of data in &lt;i&gt;Source&lt;/i&gt; files. If False, the first line is assumed to contain data, and properties are given names &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, etc.</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Column Name Lines" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>If the column name is part of the file, you can specify which line (or lines) are used to construct the property name. So &quot;4&quot; would declare the fourth line to contain the column names, and &quot;4-5&quot; means the values from both lines 4 and 5 will be used to construct the column names.

If not provided, the first non-comment line becomes the column name line.

Any other lines less than the largest column name line are considered comment lines and are ignored.</sci:help>
						<sci:enabledscript>parameter(&apos;HasColumnNames&apos;)</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Delimiter" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>Specifies the character that separates fields. Options include:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;FigureOut:&lt;/b&gt; Determines the type automatically (looks for, in order: tab, comma, space, colon, semicolon).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Tab:&lt;/b&gt; For tab-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Space:&lt;/b&gt; For space-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Comma:&lt;/b&gt; For comma-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Colon:&lt;/b&gt; For colon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Semicolon:&lt;/b&gt; For semicolon-delimited fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;$:&lt;/b&gt; For fields delimited bty the &quot;$&quot; character.&lt;/li&gt;
&lt;/ul&gt;
</sci:help>
						<sci:member>MultipleValueDelimiter</sci:member>
						<sci:member>ParseNDimensionalArrayStrings</sci:member>
						<sci:legalval selected="true">FigureOut</sci:legalval>
						<sci:legalval>Tab</sci:legalval>
						<sci:legalval>Space</sci:legalval>
						<sci:legalval>Comma</sci:legalval>
						<sci:legalval>Colon</sci:legalval>
						<sci:legalval>Semicolon</sci:legalval>
						<sci:legalval>$</sci:legalval>
					</sci:arg>
					<sci:arg name="MultipleValueDelimiter" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>The delimiter to use between multiple values contained in a single property. If the multiple value delimiter exists in any of the input strings in any property, they are separated into an array of values. If &quot;None&quot;, 
values are never separated into multiple values.</sci:help>
						<sci:legalval selected="true">None</sci:legalval>
						<sci:legalval>Semicolon</sci:legalval>
						<sci:legalval>Colon</sci:legalval>
						<sci:legalval>Comma</sci:legalval>
						<sci:legalval>Linefeed</sci:legalval>
					</sci:arg>
					<sci:arg name="ParseNDimensionalArrayStrings" type="BoolType" required="false" visibility="visible" multi="false">
						<sci:help>Toggles whether to parse delimited N-Dimensional Array strings into N-Dimensional Array values.</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false">
						<sci:help>Contains less commonly used parameters</sci:help>
						<sci:member>UndefinedString</sci:member>
						<sci:member>AllLines</sci:member>
						<sci:member>TrimWhitespace</sci:member>
						<sci:member>CheckSyntax</sci:member>
						<sci:member>CommentLines</sci:member>
						<sci:member>AddEmptyProperties</sci:member>
					</sci:arg>
					<sci:arg name="CommentLines" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>A comma-separated list of line numbers and
line ranges to specify which lines should be 
ignored by the parser (column headers are read from the line that comes next).</sci:help>
					</sci:arg>
					<sci:arg name="UndefinedString" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>Character or string to represent an undefined string read in the file. To make an empty string to be treated as an undefined value, set the parameter value to &quot;EmptyString&quot;.</sci:help>
					</sci:arg>
					<sci:arg name="AllLines" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>If True, all lines of the text file become part of a single data record. The values for a column from each row become multiple [array] values for the property (column).</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="TrimWhitespace" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>Trims whitespace from the left and right ends of each value</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="CheckSyntax" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>Whether to perform a quick syntax check at the beginning of the file when it is opened, and if a problem is found, throw an error.</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="AddEmptyProperties" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>If True, then if a row does not have as many values as the number of columns, the missing properties are added to the data record as empty properties</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="Join Behavior" type="StringType" required="false" visibility="hidden" multi="false" uimpl="false">
						<sci:help>&lt;p&gt;How to merge the created data record onto the incoming data record. Options are:&lt;/p&gt;
 
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;OverwriteOrCreate&lt;/i&gt;: Copies all properties from the joining data onto the base data, overwriting the values of any properties that already exist.
&lt;li&gt;&lt;i&gt;OverwriteExisting&lt;/i&gt;: Copies only those properties from the joining data to the base data that already exist on the base.
&lt;li&gt;&lt;i&gt;CreateIfNew&lt;/i&gt;: Copies only those properties from the joining data to the base data that do not already exist on the base data.
&lt;li&gt;&lt;i&gt;AppendOrCreate&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  The other joining properties that are not already present in the base data are copied there.
&lt;li&gt;&lt;i&gt;AppendExisting&lt;/i&gt;: The value of a joining property that already exists in the base data is appended  (as an array) to the value in the base property.  No other properties are copied. 
&lt;li&gt;&lt;i&gt;Replace&lt;/i&gt;: The input data record is replaced by the created data record. &lt;/ul&gt;

</sci:help>
						<sci:legalval>OverwriteOrCreate</sci:legalval>
						<sci:legalval>OverwriteExisting</sci:legalval>
						<sci:legalval>CreateIfNew</sci:legalval>
						<sci:legalval>AppendOrCreate</sci:legalval>
						<sci:legalval>AppendExisting</sci:legalval>
						<sci:legalval selected="true">Replace</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval>ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Thu Sep 07 15:31:15 2017</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
						<sci:help>Automatically update the component display name when the &quot;Source&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
						<sci:value>
#displayNames := Parameter(&apos;Source&apos;, 2);
if (#displayNames ne &apos;&apos;) then
  Expand(&apos;,&apos;, #displayNames);
end if;
#displayName := Trim(#displayNames[1]);
#dots := &apos;&apos;;
if (NumValues(#displayNames) &gt; 1) then
	#dots := &apos;...&apos;;
end if;
if(StrLength(#displayName) &gt; 0) then	
	/* Find the last slash or backslash, extract the end */
	#name := #displayName;
	#ls1 := FindLastSubstring(#name, &apos;/&apos;);
	#ls2 := FindLastSubstring(#name, &apos;\&apos;);
	if (#ls1 &gt; #ls2) then
		#name := Substring(#name, #ls1+1);
	elsif (#ls2 &gt; #ls1) then
		#name := Substring(#name, #ls2+1);
	end if;

	if (#name eq &apos;&apos;) then
		&apos;&apos;;
	elsif (Substring(#displayName, 1, 9) eq &apos;global://&apos;) then
		&apos;Read from @&apos; . #name . #dots;
	elsif (Substring(#displayName, 1, 11) eq &apos;property://&apos;) then
		&apos;Read from property &apos; . #name . #dots;
	else
		&apos;Read &apos; . #name . #dots;
	end if;
else
	&apos;&apos;;
end if;
			</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component that this component is based upon.</sci:help>
						<sci:value>Delimited Reader</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>DOCUMENTNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>4</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{7D2AF7C7-A077-4201-B10B-8E8283A5EADD}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>90 -1545</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Reads data from text files containing one record per line with data separated by delimiters</sci:value>
						<sci:value>&lt;p&gt;The file or files are specified by &lt;i&gt;Source&lt;/i&gt;. The file(s) should contain textual data formatted with a single record per line. Individual property values on each line should be separated by a delimiter character (such as, space, comma, tab), as specified by &lt;i&gt;Delimiter&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;If &lt;i&gt;HasColumnNames&lt;/i&gt; is True, the values on the first line of the file are treated as the property names. Otherwise, &lt;b&gt;Column1&lt;/b&gt;, &lt;b&gt;Column2&lt;/b&gt;, and so on, are used as the property names.&lt;/p&gt;

Cells containing array data can be read by setting the &lt;i&gt;MultipleValueDelimiter&lt;/i&gt; option to the character that separates the array elements. (Of course, this cannot be the same as the delimiter character.) You can now use the &lt;i&gt;Unmerge Data&lt;/i&gt; component to unmerge these arrays into separate records.
&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;The new, recommended component for Excel (.xlsx or .xls) files that does not require Excel to be installed on the server machine, and therefore is operational on Linux and Windows platforms - &lt;a href=&quot;javascript:DoLink(&apos;{14D98B18-C990-432C-834B-7026565E5ABF}&apos;)&quot;&gt;Excel Reader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For non-delimited textual data, use &lt;a href=&quot;javascript:DoLink(&apos;{8056E8AD-33EA-42BB-9099-EAB24C3D08E6}&apos;)&quot;&gt;Text Reader&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</sci:value>
						<sci:value>None</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>18.1.0.1581</sci:value>
					</sci:arg>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>18</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\File Readers\Delimited Text Reader</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.CalculateSmiles.1">
				<sci:component name="Molecule from SMILES" version="2">
					<sci:arg name="FromProperty" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>The name of the property in the data
which holds the SMILES information</sci:help>
						<sci:member>KekulizeAromaticBonds</sci:member>
						<sci:member>Send Empty SMILES to Fail Port</sci:member>
						<sci:member>Parse RAtoms from CXSMILES</sci:member>
						<sci:value>smiles</sci:value>
					</sci:arg>
					<sci:arg name="KekulizeAromaticBonds" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>Turn aromatic bonds into single/double bonds (set to True) or into aromatic query bonds (set to False). Molecules created with aromatic query bonds are more suitable as queries than as specific molecules. They should not be used as input for property calculators such as Molecular Weight, pKa and others, which require the structure to be uniquely defined.</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Send Empty SMILES to Fail Port" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
						<sci:help>When set to True, data records with SMILES represented by empty strings or strings with only blank characters are sent to the Fail port. 
&lt;p&gt;
When set to False, empty SMILES strings generate empty molecules with no atoms or bonds.</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Parse RAtoms from CXSMILES" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
						<sci:help>Set this parameter to True to parse any Rgroup information from ChemAxon SMILES extentions (CXSMILES), if present. The extension is separated from the actual SMILES by a space or tab. When the parameter is set to False (the default state) the extension is ignored.
&lt;p&gt;
Examples
&lt;br&gt;
C1O[*]CO[*]1 |$;;_R2;;;_R1$,RG:_R1={C},{N},_R2={C},{N}|
&lt;br&gt;
Cl[*](Br)I |$;_R1;;$,RG:_R1={*CCCC(C*)CC*|
&lt;br&gt;
[*]N[C@@H](C=O)C([*])=O |$_R1;;;;;;_R2;$|
&lt;br&gt;
NC(=N)NCCC[C@H](N[*])C([*])=O |$;;;;;;;;;_R1;;_R2;$|
&lt;p&gt;
The star atoms (unknown atom type) in the SMILES are replaced by the corresponding numbered R atoms from the extension. Any RG fragment information present in the Rgroup extension is ignored.
&lt;p&gt;
Only the Rgroup information in the CXSMILES extension is parsed, any other extension is ignored.</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval>Halt</sci:legalval>
						<sci:legalval selected="true">Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval>Halt</sci:legalval>
						<sci:legalval selected="true">Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Custom Error Message</sci:help>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/chemistry</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Wed Mar 30 15:06:09 2016</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>Molecule from SMILES</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Molecule from SMILES</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>COMPONENTNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{AC8262DA-E648-4D24-9CD1-D731A8F53F9D}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>378 -1545</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Converts a Daylight SMILES text property to a molecule</sci:value>
						<sci:value>&lt;p&gt;Builds a molecular representation for each data record from the SMILES string found in the property list. If a molecular representation is already present, it is overwritten by the new molecule. The input SMILES string is preserved.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To create a string property containing SMILES data, use &lt;a href=&quot;javascript:DoLink(&apos;{0C60C40A-5189-42DA-A3C0-4EA44BFF7D15}&apos;)&quot;&gt;Molecule to SMILES&lt;/a&gt; or &lt;a href=&quot;javascript:DoLink(&apos;{0C60C40A-5189-42DA-A3C0-4EA44BC27D15}&apos;)&quot;&gt;Canonical Smiles&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To read and write SMILES files, use &lt;a href=&quot;javascript:DoLink(&apos;{60FC1A04-61FD-4D4F-AC3F-A818AB614C78}&apos;)&quot;&gt;SMILES Reader&lt;/a&gt; and &lt;a href=&quot;javascript:DoLink(&apos;{72A5A427-651F-4847-9525-54CB438A7166}&apos;)&quot;&gt;SMILES Writer&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Molecule</sci:value>
						<sci:value>Molecular data record created from SMILES string</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>17.1.0.51</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>19</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Chemistry\Data Access and Manipulation\Converters\Molecule From Text\Molecule from SMILES</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.Protocol.1">
				<sci:component name="Subprotocol" version="2">
					<sci:arg name="RunToCompletion" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - For Each Data Record&quot;, the subprotocol is re-initialized and executed in its entirety for each individual data record it processes.
&lt;p&gt;
When set to &quot;True - For Each Category&quot;, the data records are divided into categories based on the value of the Categorize Using parameter and then the subprotocol is re-initialized and executed in its entirety for each category of data records. When used in conjunction with &lt;i&gt;Parallel Processing Options&lt;/i&gt;, each category of data records will be sent to the remote server as part of one single batch.</sci:help>
						<sci:member>RunToCompletion Categorize Using</sci:member>
						<sci:legalval selected="true">False</sci:legalval>
						<sci:legalval>True - For Each Data Record</sci:legalval>
						<sci:legalval>True - For Each Category</sci:legalval>
					</sci:arg>
					<sci:arg name="RunToCompletion Categorize Using" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Required when RunToCompletion is set to &lt;i&gt;True - For Each Category&lt;/i&gt;, this parameter specifies the property or properties used to define the categories.</sci:help>
						<sci:validscript>SetInvalidDetails(&apos;This parameter is required when RunToCompletion is set to True - For Each Category&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
						<sci:enabledscript>SetDisabledDetails(&apos;To Enable, Set RunToCompletion to True - For Each Category&apos;);
Parameter(&apos;RunToCompletion&apos;) eq &apos;True - For Each Category&apos;;</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options" type="BoolType" required="false" visibility="visible" multi="false" expanded="true" uimpl="false">
						<sci:help>&lt;p&gt;
When set to True, this set of options allows the subprotocol to execute in parallel on one or more independent Pipeline Pilot servers, running locally or remotely.  Additional parameters control the number of data records to send in each process batch, the list of Pipeline Pilot servers to use, the number of protocol processes that can be executed on each server, and whether to preserve the order of the processed data records.
&lt;/p&gt;&lt;p&gt;
Use this option with care, since it will not increase throughput in all circumstances. Generally speaking, it yields improved performance when the parallelization benefits outweigh the data transfer overhead for the specified batch size.  As a rough guide, performance can be improved when each individual batch requires at least 10 seconds to execute, although this can be affected by the size of each data record.
&lt;/p&gt;&lt;p&gt;
When running the protocol with debugging, the subprotocol will provide debugging messages to detail each of the various steps of execution.  Also, components located within the parallel subprotocol will display their debugging messages as well.
&lt;/p&gt;&lt;p&gt;
For more information on the parallel subprotocol options, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_parallel_processing.htm&apos;)&quot;&gt;Parallel Processing Subprotocols&lt;/a&gt;.
&lt;/p&gt;
</sci:help>
						<sci:member>Parallel Processing Options Batch Size</sci:member>
						<sci:member>Parallel Processing Options Server</sci:member>
						<sci:member>Parallel Processing Options Preserve Order</sci:member>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Batch Size" type="LongType" required="true" visibility="visible" multi="false" uimpl="false">
						<sci:help>&lt;p&gt;The number of records to send to the remote server(s) for each subprotocol execution.  In general, performance is optimized when the amount of time required to process each batch is at least 10 seconds (note that this can vary depending on the characteristics of the remote server&apos;s hardware).  Use a batch size of -1 to pass all data in a single batch.&lt;/p&gt;
&lt;p&gt;When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - for each category&quot;, the batch sizes will be determined by the number of records in each individual category.  Therefore, the &lt;i&gt;Batch Size&lt;/i&gt; parameter is not applicable.</sci:help>
						<sci:enabledscript>#parallel := Parameter(&apos;Parallel Processing Options&apos;);
if (not #parallel) then
	SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
end if;
#parallel;</sci:enabledscript>
						<sci:value>300000</sci:value>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server" type="StringType" required="false" visibility="visible" multi="true" expanded="true" legalvalsenforced="false" uimpl="false">
						<sci:help>&lt;p&gt;
A comma-separated list of Pipeline Pilot servers on which to execute the parallel subprotocol.  The server names should be in the same format as the Pipeline Pilot Client&apos;s change server dialog (that is, server-name:port-number).
&lt;/p&gt;&lt;p&gt;
Specifying &lt;b&gt;localhost&lt;/b&gt; as a server will cause the subprotocol to use its own Pipeline Pilot server.  This can be useful on multi-CPU/multi-core systems (where the subprotocol jobs are spawned on the same machine) and Pipeline Pilot Linux clusters (where &apos;localhost&apos; requests spawning the subprotocol jobs on the same cluster).
&lt;/p&gt;</sci:help>
						<sci:member>Parallel Processing Options Server Processes</sci:member>
						<sci:member>Parallel Processing Options Server Run On Grid</sci:member>
						<sci:validscript>SetInvalidDetails(&apos;This parameter is required.&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:value>localhost</sci:value>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Processes" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>A comma-separated list of the maximum number of batches that can be simultaneously executed on each remote server.  The number of entries in this parameter must equal the number of servers. If &apos;*&apos; is specified as the number of processes, then that server will only launch as many batches as the administrator of the remote server has permitted.&lt;/br&gt;&lt;/br&gt;For non-Grid Engine job, the number of jobs will be limited to the value for the maximum number of simultaneous subprotocol jobs as defined in the Admin Console even if this value is higher than the value entered here or &apos;*&apos;.&lt;/br&gt;&lt;/br&gt;For Grid Engine jobs, the number of jobs will be limited to the value for the maximum number of simultaneous subprotocol grid jobs as defined in the Admin Console even if this value is higher than the value entered here or &apos;*&apos;.&lt;/br&gt;&lt;/br&gt;</sci:help>
						<sci:validscript>/* Server Processes must have the same number of comma separated entries as the Server parameter and must have a value*/
#processes := parameter();
expand(&apos;,&apos;, #processes);
#servers := parameter(&apos;Parallel Processing Options Server&apos;);
expand(&apos;,&apos;, #servers);

if (numvalues(#processes) == 0) then
	SetInvalidDetails(&apos;This parameter is required.&apos;);
else
	SetInvalidDetails(&apos;The number of server processes (&apos; . numvalues(#processes) . &apos;) must equal the number of servers (&apos; . numvalues(#servers) . &apos;).&apos;);
end if;
numvalues(#processes) &gt; 0 and numvalues(#processes) == numvalues(#servers);</sci:validscript>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Run On Grid" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Run subprotocol on grid engine if available.  Note: If no grid engine is configured the subprotocol will still run even if this parameter is set to true.</sci:help>
						<sci:member>Parallel Processing Options Server Run On Grid Queue Name</sci:member>
						<sci:member>Parallel Processing Options Server Run On Grid Grid Options</sci:member>
						<sci:enabledscript>parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Run On Grid Queue Name" type="StringType" required="false" visibility="visible" multi="false" legalvalsenforced="false" uimpl="false">
						<sci:help>Select the queue name on the grid to submit jobs to. Leave blank to use default queue name.</sci:help>
						<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Run On Grid Grid Options" type="StringType" required="false" visibility="visible" multi="true" uimpl="false">
						<sci:help>&lt;p&gt;This is an array of command line options to send to the Grid engine submit command.&lt;/p&gt;
&lt;p&gt;If you just include one line, whatever you enter will be sent &quot;as is&quot; to the submission command.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Just sending options directly to command line - PBS&lt;/b&gt;
&lt;p&gt;-l procs=16 -l walltime=08:00:00 -A PROJECTID&lt;/p&gt;
&lt;/br&gt;
&lt;p&gt;There are a number of parameters that Pipeline Pilot will translate to the correct command line options for whichever supported Grid Engine you are using.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Supported parameters&lt;/b&gt;
&lt;p&gt;Account=&amp;lt;Project/Account name&amp;gt;&lt;/p&gt;
&lt;p&gt;Maximum Execution Time=&amp;lt;DD:MM:SS&amp;gt; - LSF ignores seconds&lt;/p&gt;
&lt;p&gt;Number of Cores=&amp;lt;16&amp;gt;&lt;/p&gt;
&lt;p&gt;Parallel Environment=&amp;lt;The Parallel Environment to use&amp;gt; - Only needed for SGE&lt;/p&gt;
&lt;p&gt;Other=&amp;lt;Additional Parameters sent directly to submit command line&amp;gt;&lt;/p&gt;</sci:help>
						<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Preserve Order" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Whether to preserve the order of the data as it enters and leaves the remote subprotocol.</sci:help>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Tempfiles" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>&lt;p&gt;A comma-delimited list of global properties, each of which is automatically populated with the name of a file in the job&apos;s temporary folder, which always has a unique name.&lt;p/&gt;For each global name, an additional global is created (with the suffix &lt;i&gt;_Filename&lt;/i&gt;) that hold only the leaf file name of the temporary file.&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="DeclareLocal" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>&lt;p&gt;Lists a set of properties (without the @) to create on the global property list for this subprotocol. Separate property names with commas. Such properties can only be accessed within the scope of this subprotocol and its descendent subprotocols.&lt;p/&gt;

&lt;p&gt;Any global property not declared in this way is created on the top-level global property list and is accessible from all subprotocols, but breaks the encapsulation of the subprotocol and may collide with another property of the same name.&lt;/p&gt;

&lt;p&gt;Therefore, you should always declare a new global property in the &lt;i&gt;DeclareLocal&lt;/i&gt; parameter, to minimize the scope of the global property to the subprotocol where it is used.&lt;/p&gt;

&lt;p&gt;The example &lt;i&gt;DeclareLocal&lt;/i&gt; value below creates 3 global properties in the subprotocol scope. Note that you can initialize the declared global value with a scalar value using the &quot;:=&quot; syntax, as shown. You can surround text string values with quotes to aid clarity.&lt;/p&gt;
&lt;pre&gt;
    SubP_Counter := 0, SubP_NameHash, SubP_TitleText:=&quot;Sample 1&quot;
&lt;/pre&gt;
</sci:help>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Custom Error Message</sci:help>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>DataPrep</sci:value>
					</sci:arg>
					<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol AutoLayout</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>ExpressionNode</sci:value>
					</sci:arg>
					<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
						<sci:help>Component Revision</sci:help>
						<sci:value>790</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{17001C74-63CE-4B4B-B37C-F0EAA19CE4AA}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>666 -1545</sci:value>
					</sci:arg>
					<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>By Ref</sci:help>
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Builds subprotocols in Pipeline Pilot.</sci:value>
						<sci:value>&lt;p&gt;
Use a subprotocol to collapse one or more components into a single item. Open 
a subprotocol to view or edit its contents. 
&lt;/p&gt;&lt;p&gt;
To define input and output ports, display 
icon, and parameter settings, right-click and select Edit. You can save subprotocols and reuse them. 
For more information, see the User Guide help for &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_overview.htm&apos;)&quot;&gt;Subprotocols 
Overview&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;
For more information on the parallel subprotocol options, see 
&lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_parallel_processing.htm&apos;)&quot;&gt;Parallel 
Processing Subprotocols&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;
Tip: Any component can be made into a shortcut, 
so that the latest version is always used. For more information, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/shortcuts.htm&apos;)&quot;&gt;Creating 
Shortcuts&lt;/a&gt;.
&lt;/p&gt;</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value>Records passing out of any unconnected pass ports of components inside the subprotocol</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value>Records passing out of any unconnected fail ports of components inside the subprotocol</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>17.2.0.1267</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Sticky Notes</sci:help>
					</sci:arg>
					<sci:arg name="ProtocolScale2" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Scale</sci:help>
						<sci:value>100</sci:value>
					</sci:arg>
					<sci:arg name="Protocol Options" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Options</sci:help>
						<sci:legalval>Owner Access Only</sci:legalval>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/coreutils</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Thu Sep 15 15:57:54 2016</sci:value>
					</sci:arg>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>20</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Utilities\Subprotocol Utilities\Subprotocol</sci:value>
					</sci:arg>
				</sci:component>
				<sci:protocol>
					<sci:data object="SciTegic.PropertyFunctions.1">
						<sci:component name="Keep Properties" version="2">
							<sci:arg name="PropertyList" type="PropertyNameType" required="true" visibility="visible" multi="true">
								<sci:help>The list of property names to keep</sci:help>
								<sci:member>RenameList</sci:member>
								<sci:value>smiles</sci:value>
								<sci:value>zinc_id</sci:value>
							</sci:arg>
							<sci:arg name="RenameList" type="PropertyNameType" required="false" visibility="visible" multi="true">
								<sci:help>If provided, it causes the properties given in PropertyList to be 
renamed to the corresponding name in this list.  If not provided, then no properties are renamed.</sci:help>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:help>the action to perform</sci:help>
								<sci:value>Keep</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Tue Sep 13 07:18:38 2016</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Destination&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>#propertyList := Parameter(&apos;PropertyList&apos;);
#displayName := &apos;&apos;;
for #i in 1 .. numvalues(#propertyList) loop
  #prop := trim(#propertyList[#i]);
  if (strlength(#prop) &gt; 0) then
    if (strlength(#displayName) &gt; 0) then
	  #displayName .= &apos;, &apos;;
	end if;
    #displayName .= #prop;
  end if;
end loop;
if(strlength(#displayName) &gt; 0) then		
	&apos;Keep &apos; . #displayName;
else
	&quot;&quot;;
end if;</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol AutoLayout</sci:help>
								<sci:value>true</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>EXPRESSIONNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
								<sci:help>Component Revision</sci:help>
								<sci:value>100</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>SubProtocol</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolScale" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Scale</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>90 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{456195EF-9708-4367-B3DD-21EBF3796604}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Keeps only the specified properties</sci:value>
								<sci:value>&lt;p&gt;For each incoming data record, retains only the properties found in the list of property names specified by &lt;i&gt;PropertyList&lt;/i&gt;.  All other properties are removed.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To remove specified properties from each data record, use 
&lt;a href=&quot;javascript:DoLink(&apos;{C2ED35FF-5397-4877-AADB-10F1A15D60E2}&apos;)&quot;&gt;Remove Properties&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>With only the specified properties remaining</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>17.1.0.119</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>By Ref</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Sticky Notes</sci:help>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Property Manipulators\Keep Properties</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.PropertyFunctions.1">
						<sci:component name="Rename Properties" version="2">
							<sci:arg name="Original Property Names" type="PropertyNameType" required="true" visibility="visible" multi="true">
								<sci:help>An array of property names to rename. The new name will be the corresponding name in &lt;i&gt;New Property Names&lt;i&gt;.</sci:help>
								<sci:value>zinc_id</sci:value>
							</sci:arg>
							<sci:arg name="New Property Names" type="PropertyNameType" required="true" visibility="visible" multi="true">
								<sci:help>An array of the new property names. The original name will be the corresponding name in &lt;i&gt;Original Property Names&lt;i&gt;.</sci:help>
								<sci:value>idnumber</sci:value>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:help>the action to perform</sci:help>
								<sci:value>RenameProperties</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Tue Feb 28 12:30:36 2017</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;Destination&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>
#orig := Parameter(&apos;Original Property Names&apos;);
#new := Parameter(&apos;New Property Names&apos;);
if (numvalues(#orig) == 0 OR #orig[1] eq &quot;&quot; OR numvalues(#new) == 0 OR #new[1] eq &quot;&quot;) then
	&quot;&quot;;
else
  #display := &apos;Rename &apos; . #orig[1] . &apos; to &apos; . #new[1];
  if (numvalues(#orig) &gt; 1) then
    #display .= &apos;, ...&apos;;
  end if;
  #display;
end if;
</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol AutoLayout</sci:help>
								<sci:value>true</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>EXPRESSIONNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
								<sci:help>Component Revision</sci:help>
								<sci:value>100</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>SubProtocol</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolScale" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Scale</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>378 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{04496ABE-C1D2-43D2-83D4-35AC9FC8D501}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Rename the specified properties</sci:value>
								<sci:value>&lt;p&gt;For each incoming data record, rename the properties found in the &lt;i&gt;Original Property Names&lt;/i&gt; list to the names provided in &lt;i&gt;New Property Names&lt;/i&gt;.

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To remove specified properties from each data record, use 
&lt;a href=&quot;javascript:DoLink(&apos;{C2ED35FF-5397-4877-AADB-10F1A15D60E2}&apos;)&quot;&gt;Remove Properties&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>With only the specified properties remaining</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>18.1.0.1376</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>By Ref</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Sticky Notes</sci:help>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>7</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Property Manipulators\Rename Properties</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.NormalizePropertyTypes.1">
						<sci:component name="Clean Data" version="2">
							<sci:arg name="Output What" type="StringType" required="false" visibility="hidden" multi="false">
								<sci:help>What to output - either a summary of the property information, one record per property, or the cleaned data, one record per incoming data record.

If &lt;i&gt;Summary Properties&lt;/i&gt; is selected, the summary properties are:

&lt;ul&gt;
&lt;li&gt;name: the name of the property&lt;/li&gt;
&lt;li&gt;count: the number of incoming data records containing this property&lt;/li&gt;
&lt;li&gt;type: the inferred type of the property (see list of possible types below)&lt;/li&gt;
&lt;li&gt;min: if numeric or date/time, the minimum value of the property&lt;/li&gt;
&lt;li&gt;max: if numeric or date/time, the maximum value of the property&lt;/li&gt;
&lt;li&gt;values: if string, then the list of different values (if less than Maximum Number of Values)&lt;/li&gt;
&lt;li&gt;missingvalues: if this property contained any missing values, then this will contain the missing values that were found&lt;/li&gt;
&lt;/ul&gt;

The possible values for type are:

&lt;ul&gt;
&lt;li&gt;Null&lt;li&gt;
&lt;li&gt;Boolean&lt;li&gt;
&lt;li&gt;Integer&lt;li&gt;
&lt;li&gt;Double&lt;li&gt;
&lt;li&gt;String&lt;li&gt;
&lt;li&gt;Text&lt;li&gt;
&lt;li&gt;DateTime&lt;li&gt;
&lt;li&gt;Other&lt;li&gt;
&lt;/ul&gt;

      </sci:help>
								<sci:legalval selected="true">Cleaned Data</sci:legalval>
								<sci:legalval>Property Summary</sci:legalval>
							</sci:arg>
							<sci:arg name="Summary Options" type="GroupType" required="false" visibility="hidden" multi="false" legalvalsenforced="false">
								<sci:help>Options that affect the output of the summary data only</sci:help>
								<sci:member>Maximum Number of Values</sci:member>
								<sci:member>Text Length</sci:member>
							</sci:arg>
							<sci:arg name="Maximum Number of Values" type="LongType" required="false" visibility="hidden" multi="false" expanded="true">
								<sci:help>For String properties, we also return a list of possible values. This sets the maximum number of different values we wish to return. If that is exceeded, then no values are returned.
      </sci:help>
								<sci:value>20</sci:value>
							</sci:arg>
							<sci:arg name="Text Length" type="LongType" required="false" visibility="hidden" multi="false">
								<sci:help>
        For string properties, if the length of the value is greater than or equal to this number,
        then that property is considered Text, and no values are collected or returned.
      </sci:help>
								<sci:value>32</sci:value>
							</sci:arg>
							<sci:arg name="Conversion Options" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>&lt;p&gt;Options that affect how we inspect and convert between types.&lt;/p&gt;

&lt;p&gt;Options are: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Check Date Time&lt;/b&gt;: check strings to see if they are datetime values. (This can be slow!)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Use Calculable Property Types&lt;/b&gt;: if the property name exists as a calculable property, use that type as the minimum type.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Numeric [0,1] is Integer&lt;/b&gt;: if we see a rpoperty with only 0 and 1&apos;s, that is normally considered a boolean. If this option is selected, it is considered an integer. &lt;/li&gt;
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">Check Date Time</sci:legalval>
								<sci:legalval>Use Calculable Property Types</sci:legalval>
								<sci:legalval selected="true">Numeric [0,1] is Integer</sci:legalval>
							</sci:arg>
							<sci:arg name="Clean Behavior" type="StringType" required="false" visibility="visible" multi="false" expanded="true">
								<sci:help>&lt;p&gt;The &lt;i&gt;Clean Data&lt;/i&gt; will pass only clean data out the Pass port. &quot;Clean data&quot; is data where there are no missing values or values that failed to coerce to a requested property type, across all the properties of the data record.&lt;/p&gt;

&lt;p&gt;If a particular property has an unclean value in at least one data record, there are two cleaning choices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Remove Any Data Record with Unclean Value&lt;/b&gt;: any data record containing at least one unclean property value will be removed from the data stream and passed out the Fail port.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Remove Unclean Property from All Data Records&lt;/b&gt;: any property having an unclean value in at least one data record, will be removed from &lt;i&gt;all&lt;/i&gt; data records. The remaining properties will be returned via the Pass port. The removed properties are collected onto another data record and passed out the Fail port.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
								<sci:legalval selected="true">Remove Any Data Record with Unclean Value</sci:legalval>
								<sci:legalval>Remove Unclean Property from All Data Records</sci:legalval>
							</sci:arg>
							<sci:arg name="Missing Value Options" type="GroupType" required="false" visibility="visible" multi="false" expanded="true" legalvalsenforced="false">
								<sci:help>Options to control the identification of missing values, and to possibly standardize (and then accept as clean) these values by column type using a provided replacement string.</sci:help>
								<sci:member>Missing Value Strings</sci:member>
								<sci:member>Replace Missing Values</sci:member>
							</sci:arg>
							<sci:arg name="Missing Value Strings" type="StringType" required="false" visibility="visible" multi="true" expanded="true">
								<sci:help>If provided, this is an array of string values that will be interpreted as missing values. Note that an empty entry causes the empty string to be treated as a missing value.</sci:help>
								<sci:value/>
								<sci:value>*</sci:value>
								<sci:value>?</sci:value>
								<sci:value>NULL</sci:value>
								<sci:value>NA</sci:value>
								<sci:value>N/A</sci:value>
								<sci:value>NaN</sci:value>
							</sci:arg>
							<sci:arg name="Replace Missing Values" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Whether to identify missing values using the list of values in &lt;i&gt;Missing Values Strings&lt;/i&gt;.</sci:help>
								<sci:member>Types to Replace</sci:member>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Types to Replace" type="StringType" required="false" visibility="visible" multi="true" expanded="true">
								<sci:help>Replace missing values with particular strings for particular column types</sci:help>
								<sci:member>Boolean Missing Values</sci:member>
								<sci:member>Integer Missing Values</sci:member>
								<sci:member>Double Missing Values</sci:member>
								<sci:member>String Missing Values</sci:member>
								<sci:member>DateTime Missing Values</sci:member>
								<sci:enabledscript>parameter(&apos;Replace Missing Values&apos;)</sci:enabledscript>
								<sci:legalval selected="true">Boolean</sci:legalval>
								<sci:legalval selected="true">Integer</sci:legalval>
								<sci:legalval selected="true">Double</sci:legalval>
								<sci:legalval selected="true">String</sci:legalval>
								<sci:legalval selected="true">DateTime</sci:legalval>
							</sci:arg>
							<sci:arg name="Boolean Missing Values" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Replace missing values in Boolean columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
								<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Boolean&apos;);</sci:enabledscript>
								<sci:value>False</sci:value>
							</sci:arg>
							<sci:arg name="Integer Missing Values" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Replace missing values in Integer columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
								<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Integer&apos;);</sci:enabledscript>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="Double Missing Values" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Replace missing values in Double columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
								<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Double&apos;);</sci:enabledscript>
								<sci:value>0.0</sci:value>
							</sci:arg>
							<sci:arg name="String Missing Values" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Replace missing values in String columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
								<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;String&apos;);</sci:enabledscript>
							</sci:arg>
							<sci:arg name="DateTime Missing Values" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Replace missing values in DateTime columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
								<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;DateTime&apos;);</sci:enabledscript>
								<sci:value>1/1/1970</sci:value>
							</sci:arg>
							<sci:arg name="Property Type Coercion Options" type="GroupType" required="false" visibility="visible" multi="true" legalvalsenforced="false">
								<sci:help>You can force a particular property to a specific type. 

If you do this, and any of the values on a data record (other than missing values) fails to coerce, then the data is considered unclean. 
</sci:help>
								<sci:member>Property 1</sci:member>
								<sci:member>Property 2</sci:member>
								<sci:member>Property 3</sci:member>
								<sci:member>Property 4</sci:member>
								<sci:member>Property 5</sci:member>
								<sci:member>Property 6</sci:member>
							</sci:arg>
							<sci:arg name="Property 1" type="PropertyNameType" required="false" visibility="visible" multi="false" expanded="true">
								<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
								<sci:member>Property 1 Coerce to Type</sci:member>
							</sci:arg>
							<sci:arg name="Property 1 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
								<sci:legalval>Boolean</sci:legalval>
								<sci:legalval>Integer</sci:legalval>
								<sci:legalval selected="true">Double</sci:legalval>
								<sci:legalval>String</sci:legalval>
								<sci:legalval>DateTime</sci:legalval>
							</sci:arg>
							<sci:arg name="Property 2" type="PropertyNameType" required="false" visibility="visible" multi="false">
								<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
								<sci:member>Property 2 Coerce to Type</sci:member>
							</sci:arg>
							<sci:arg name="Property 2 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
								<sci:legalval>Boolean</sci:legalval>
								<sci:legalval>Integer</sci:legalval>
								<sci:legalval selected="true">Double</sci:legalval>
								<sci:legalval>String</sci:legalval>
								<sci:legalval>DateTime</sci:legalval>
							</sci:arg>
							<sci:arg name="Property 3" type="PropertyNameType" required="false" visibility="visible" multi="false">
								<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
								<sci:member>Property 3 Coerce to Type</sci:member>
							</sci:arg>
							<sci:arg name="Property 3 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
								<sci:legalval>Boolean</sci:legalval>
								<sci:legalval>Integer</sci:legalval>
								<sci:legalval selected="true">Double</sci:legalval>
								<sci:legalval>String</sci:legalval>
								<sci:legalval>DateTime</sci:legalval>
							</sci:arg>
							<sci:arg name="Property 4" type="PropertyNameType" required="false" visibility="visible" multi="false">
								<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
								<sci:member>Property 4 Coerce to Type</sci:member>
							</sci:arg>
							<sci:arg name="Property 4 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
								<sci:legalval>Boolean</sci:legalval>
								<sci:legalval>Integer</sci:legalval>
								<sci:legalval selected="true">Double</sci:legalval>
								<sci:legalval>String</sci:legalval>
								<sci:legalval>DateTime</sci:legalval>
							</sci:arg>
							<sci:arg name="Property 5" type="PropertyNameType" required="false" visibility="visible" multi="false">
								<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
								<sci:member>Property 5 Coerce to Type</sci:member>
							</sci:arg>
							<sci:arg name="Property 5 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
								<sci:legalval>Boolean</sci:legalval>
								<sci:legalval>Integer</sci:legalval>
								<sci:legalval selected="true">Double</sci:legalval>
								<sci:legalval>String</sci:legalval>
								<sci:legalval>DateTime</sci:legalval>
							</sci:arg>
							<sci:arg name="Property 6" type="PropertyNameType" required="false" visibility="visible" multi="false">
								<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
								<sci:member>Property 6 Coerce to Type</sci:member>
							</sci:arg>
							<sci:arg name="Property 6 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
								<sci:legalval>Boolean</sci:legalval>
								<sci:legalval>Integer</sci:legalval>
								<sci:legalval selected="true">Double</sci:legalval>
								<sci:legalval>String</sci:legalval>
								<sci:legalval>DateTime</sci:legalval>
							</sci:arg>
							<sci:arg name="Array Value Options" type="GroupType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Options to handle array data</sci:help>
								<sci:member>Array Values Are</sci:member>
							</sci:arg>
							<sci:arg name="Array Values Are" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Whether array values are OK, are unclean, or should be replaced by a single value, the first value in the array.</sci:help>
								<sci:legalval>OK</sci:legalval>
								<sci:legalval selected="true">Unclean</sci:legalval>
								<sci:legalval>Replaced by First Value</sci:legalval>
							</sci:arg>
							<sci:arg name="Ignore Properties" type="PropertyNameType" required="false" visibility="visible" multi="true" uimpl="false">
								<sci:help>A list of properties to ignore, if any. They will be passed through untouched, and never considered unclean.</sci:help>
								<sci:value>reagent1</sci:value>
								<sci:value>reagent2</sci:value>
								<sci:value>reagent3</sci:value>
								<sci:value>reagent4</sci:value>
								<sci:value>reaction</sci:value>
								<sci:value>PAINS</sci:value>
								<sci:value>BRENK</sci:value>
								<sci:value>NIH</sci:value>
								<sci:value>ZINC</sci:value>
								<sci:value>lead-like</sci:value>
								<sci:value>350/3_lead-like</sci:value>
								<sci:value>fragments</sci:value>
								<sci:value>strict_fragments</sci:value>
								<sci:value>PPI_modulators</sci:value>
								<sci:value>natural_product-like</sci:value>
							</sci:arg>
							<sci:arg name="Error Property Name" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>The name of the property to put error messages into. If left blank, do not add an error property.</sci:help>
								<sci:value>ErrorText</sci:value>
							</sci:arg>
							<sci:arg name="CacheSizeInflationFactor" type="LongType" required="false" visibility="hidden" multi="false" uimpl="true">
								<sci:help>When you run using a limited cache size, normally only that many records may be output.
This parameter allows you to increase that size by a multiplicative factor. </sci:help>
								<sci:value>2</sci:value>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Implementation Of" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:legalval>Normalize Property Types</sci:legalval>
								<sci:legalval selected="true">Clean Data</sci:legalval>
								<sci:legalval>Set Property Type</sci:legalval>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Sep 14 07:50:41 2017</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>Clean Data</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>COMPONENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{6E28C170-2FEC-4A3C-90A6-2DCEAA330E9E}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>666 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Ensure your data is clean; that is, has no missing values, is coerced to the desired type, and is not an array value.</sci:value>
								<sci:value>&lt;p&gt;&lt;i&gt;Cleaning&lt;/i&gt; data is the act of finding, for each property, that it has no missing values, is coerced to the desired type, and is not an array value. The type is inferred: for example, a property may contains strings, with values &quot;0&quot; and &quot;1&quot;. This will be cleaned into Boolean values.&lt;/p&gt;

The problems that cleaning addresses are:
&lt;ol&gt;
&lt;li&gt;The same property name may have different value types on different data records&lt;/li&gt;
&lt;li&gt;The property might be of types that are coercible to some simpler base type (e.g., numbers might be stored as strings, when they could be better represented as integers)&lt;/li&gt;
&lt;li&gt;The property might be missing from some data records&lt;/li&gt;
&lt;li&gt;The property might appear multiple times on a given data record (arrays)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The normalized type is the simplest type possible, ordered from: Null, Boolean, Integer, Double, String, DateTime.&lt;/p&gt;
</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>The Normalized data records, or the summary for each property.</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>1</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Data Manipulators\Clean Data</sci:value>
							</sci:arg>
						</sci:component>
						<sci:proplist>
							<sci:propval name="RegistrationVersion">18.1.0.1590</sci:propval>
						</sci:proplist>
					</sci:data>
					<sci:data object="SciTegic.PropertyFunctions.1">
						<sci:component name="First Occurrence Filter" version="2">
							<sci:arg name="KeyProperty" type="PropertyNameType" required="true" visibility="visible" multi="true">
								<sci:help>Name of the property holding values to keep only one of.  If you give more than one key property, then all values must have occurred at the same time on some other record for it to be rejected.</sci:help>
								<sci:member>CaseSensitive</sci:member>
								<sci:value>Smiles</sci:value>
							</sci:arg>
							<sci:arg name="CaseSensitive" type="BoolType" required="true" visibility="visible" multi="false">
								<sci:help>Whether to perform the comparison as case-sensitive or case-insensitive 
strings</sci:help>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:help>the action to perform</sci:help>
								<sci:value>FirstOccurrence</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Jan 16 14:54:51 2003</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>First Occurrence
Filter</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>Expression Filter</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>FILTERNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{D2EC3EBB-CD17-4093-93A9-D9FB603DE083}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>954 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Passes data records for which the values of specified properties have not been seen on any previous record

</sci:value>
								<sci:value>&lt;p&gt;For each incoming data record, the value of the property specified by &lt;i&gt;KeyProperty&lt;/i&gt; is checked.  If the value has not been seen in earlier records, the record is sent out the Pass port.  Otherwise it is sent out the Fail port.&lt;/p&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To filter for data records with property values that occur once and only once in the input stream, use &lt;a href=&quot;javascript:DoLink(&apos;{2FD9ECF2-C47F-4A20-AC72-5F352E08FC98}&apos;)&quot;&gt;Unique Filter&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>Data records with the first occurrence of a value of the given property.</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value>Data records with the second and subsequent occurrences of a value of the given property.</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>2</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Data Filters\First Occurrence Filter</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.CalculateSmiles.1">
						<sci:component name="Molecule from SMILES" version="2">
							<sci:arg name="FromProperty" type="StringType" required="true" visibility="visible" multi="false">
								<sci:help>The name of the property in the data
which holds the SMILES information</sci:help>
								<sci:member>KekulizeAromaticBonds</sci:member>
								<sci:member>Send Empty SMILES to Fail Port</sci:member>
								<sci:member>Parse RAtoms from CXSMILES</sci:member>
								<sci:value>smiles</sci:value>
							</sci:arg>
							<sci:arg name="KekulizeAromaticBonds" type="StringType" required="false" visibility="visible" multi="false">
								<sci:help>Turn aromatic bonds into single/double bonds (set to True) or into aromatic query bonds (set to False). Molecules created with aromatic query bonds are more suitable as queries than as specific molecules. They should not be used as input for property calculators such as Molecular Weight, pKa and others, which require the structure to be uniquely defined.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Send Empty SMILES to Fail Port" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>When set to True, data records with SMILES represented by empty strings or strings with only blank characters are sent to the Fail port. 
&lt;p&gt;
When set to False, empty SMILES strings generate empty molecules with no atoms or bonds.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Parse RAtoms from CXSMILES" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
								<sci:help>Set this parameter to True to parse any Rgroup information from ChemAxon SMILES extentions (CXSMILES), if present. The extension is separated from the actual SMILES by a space or tab. When the parameter is set to False (the default state) the extension is ignored.
&lt;p&gt;
Examples
&lt;br&gt;
C1O[*]CO[*]1 |$;;_R2;;;_R1$,RG:_R1={C},{N},_R2={C},{N}|
&lt;br&gt;
Cl[*](Br)I |$;_R1;;$,RG:_R1={*CCCC(C*)CC*|
&lt;br&gt;
[*]N[C@@H](C=O)C([*])=O |$_R1;;;;;;_R2;$|
&lt;br&gt;
NC(=N)NCCC[C@H](N[*])C([*])=O |$;;;;;;;;;_R1;;_R2;$|
&lt;p&gt;
The star atoms (unknown atom type) in the SMILES are replaced by the corresponding numbered R atoms from the extension. Any RG fragment information present in the Rgroup extension is ignored.
&lt;p&gt;
Only the Rgroup information in the CXSMILES extension is parsed, any other extension is ignored.</sci:help>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval>Halt</sci:legalval>
								<sci:legalval selected="true">Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval>Halt</sci:legalval>
								<sci:legalval selected="true">Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/chemistry</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Wed Mar 30 15:06:09 2016</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>Molecule from SMILES</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>Molecule from SMILES</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>COMPONENTNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{AC8262DA-E648-4D24-9CD1-D731A8F53F9D}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>1242 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Converts a Daylight SMILES text property to a molecule</sci:value>
								<sci:value>&lt;p&gt;Builds a molecular representation for each data record from the SMILES string found in the property list. If a molecular representation is already present, it is overwritten by the new molecule. The input SMILES string is preserved.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To create a string property containing SMILES data, use &lt;a href=&quot;javascript:DoLink(&apos;{0C60C40A-5189-42DA-A3C0-4EA44BFF7D15}&apos;)&quot;&gt;Molecule to SMILES&lt;/a&gt; or &lt;a href=&quot;javascript:DoLink(&apos;{0C60C40A-5189-42DA-A3C0-4EA44BC27D15}&apos;)&quot;&gt;Canonical Smiles&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To read and write SMILES files, use &lt;a href=&quot;javascript:DoLink(&apos;{60FC1A04-61FD-4D4F-AC3F-A818AB614C78}&apos;)&quot;&gt;SMILES Reader&lt;/a&gt; and &lt;a href=&quot;javascript:DoLink(&apos;{72A5A427-651F-4847-9525-54CB438A7166}&apos;)&quot;&gt;SMILES Writer&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Molecule</sci:value>
								<sci:value>Molecular data record created from SMILES string</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>17.1.0.51</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>3</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Chemistry\Data Access and Manipulation\Converters\Molecule From Text\Molecule from SMILES</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.CalculateSmiles.1">
						<sci:component name="Canonical Smiles" version="2">
							<sci:arg name="Output" type="StringType" required="false" visibility="visible" multi="true">
								<sci:help>&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SMILES&lt;/b&gt; is a non-canonical representation for the molecule. (This is very fast to calculate compared to Canonical_SMILES.)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Canonical_SMILES&lt;/b&gt; is the representation that can be compared for identicality.&lt;/li&gt;
&lt;/ul&gt;

&lt;i&gt;Output&lt;/i&gt; properties can be calculated &quot;on demand&quot; by simply using their names within a PilotScript expression or as the parameter value to many parameters that require a property name.</sci:help>
								<sci:legalval type="StringType" selected="true">Canonical_Smiles</sci:legalval>
								<sci:legalval type="StringType">Smiles</sci:legalval>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/chemistry</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Fri Apr 08 13:57:30 2011</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>Canonical Smiles</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>Canonical Smiles</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>CALCULATORNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{0C60C40A-5189-42DA-A3C0-4EA44BC27D15}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>1530 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Calculates a SMILES or canonical SMILES representation of the input molecule</sci:value>
								<sci:value>&lt;p&gt;SMILES is a terse textual representation of molecular data.  Canonical SMILES is a form of SMILES that is independent of how the molecule is drawn and so can be used to compare whether two molecules are identical.&lt;/P&gt;

Either or both of the following two properties can be calculated:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SMILES&lt;/b&gt; is a non-canonical representation for the molecule. (This is very fast to calculate compared to Canonical_SMILES.)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Canonical_SMILES&lt;/b&gt; is the representation that can be compared for identicality.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;The canonicalization algorithm is SciTegic&apos;s; while it is derived from the published Daylight algorithm, however, lack of complete documentation of their procedure means that it will not necessarily give identical results. Compare two SMILES for identity only when having both canonicalized by the same method. &lt;/li&gt;
&lt;li&gt;Stereo markings are only added to the SMILES when stereo is explicitly set on a stereocenter.  This is often not the case for 3D molecules where the stereo is implied from the coordinates of the attached atoms and not from explicit stereo markings.  To add stereo markings from coordinates use the &lt;i&gt;SetStereoFromCoordinates&lt;/i&gt; action in the &lt;a href=&quot;javascript:DoLink(&apos;{EFEA1A46-A6DB-4DB9-A5A9-C7F3D2ADFDE2}&apos;)&quot;&gt;Standardize Molecule&lt;/a&gt; component.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;You can create a SMILES string as text under any property name using &lt;a href=&quot;javascript:DoLink(&apos;{0C60C40A-5189-42DA-A3C0-4EA44BFF7D15}&apos;)&quot;&gt;Molecule to SMILES&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can convert a SMILES string into a molecule using &lt;a href=&quot;javascript:DoLink(&apos;{AC8262DA-E648-4D24-9CD1-D731A8F53F9D}&apos;)&quot;&gt;Molecule from SMILES&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For an alternative way of generating a canonical string representation, see &lt;a href=&quot;javascript:DoLink(&apos;{EB62CC30-BC6A-4d5f-8618-3EB9AF611C69}&apos;)&quot;&gt;Molecule to InChI&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</sci:value>
								<sci:value>Molecule</sci:value>
								<sci:value/>
								<sci:value>Molecule</sci:value>
								<sci:value>Records augmented with a text property containing the canonical SMILES or SMILES</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>8.4.5.28</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>4</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Chemistry\Property Calculators\Structural\Canonical Smiles</sci:value>
							</sci:arg>
						</sci:component>
						<sci:proplist>
							<sci:propval name="Canonical_Smiles|Category">Molecular Formats</sci:propval>
							<sci:propval name="Smiles|Category">Molecular Formats</sci:propval>
						</sci:proplist>
					</sci:data>
					<sci:data object="SciTegic.PropertyFunctions.1">
						<sci:component name="Remove Properties" version="2">
							<sci:arg name="PropertyList" type="PropertyNameType" required="true" visibility="visible" multi="true">
								<sci:help>The names of properties to remove from each data record entering the component</sci:help>
								<sci:value>smiles</sci:value>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval>ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:help>the action to perform</sci:help>
								<sci:value>Remove</sci:value>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/generic</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Tue Sep 13 07:18:43 2016</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
								<sci:help>Automatically update the component display name when the &quot;PropertyList&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
								<sci:value>#propertyList := Parameter(&apos;PropertyList&apos;);
#displayName := &apos;&apos;;
for #i in 1 .. numvalues(#propertyList) loop
  #prop := trim(#propertyList[#i]);
  if (strlength(#prop) &gt; 0) then
    if (strlength(#displayName) &gt; 0) then
	  #displayName .= &apos;, &apos;;
	end if;
    #displayName .= #prop;
  end if;
end loop;
if(strlength(#displayName) &gt; 0) then		
	&apos;Remove &apos; . #displayName;
else
	&quot;&quot;;
end if;</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol AutoLayout</sci:help>
								<sci:value>true</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>EXPRESSIONNODE</sci:value>
							</sci:arg>
							<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
								<sci:help>Component Revision</sci:help>
								<sci:value>100</sci:value>
							</sci:arg>
							<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The component this component is based upon.</sci:help>
								<sci:value>SubProtocol</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolScale" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Scale</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>1818 -95</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{C2ED35FF-5397-4877-AADB-10F1A15D60E2}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Removes the specified properties</sci:value>
								<sci:value>For each data record that enters the component, the properties specified by &lt;i&gt;PropertyList&lt;/i&gt; are removed from the  record. 

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;To keep only a few properties from a long list, it may be more efficient to instead use &lt;a href=&quot;javascript:DoLink(&apos;{456195EF-9708-4367-B3DD-21EBF3796604}&apos;)&quot;&gt;Keep Properties&lt;/a&gt;.&lt;/p&gt;</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>Data records with the specified properties removed</sci:value>
								<sci:value>None</sci:value>
								<sci:value/>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>17.1.0.119</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>By Ref</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Sticky Notes</sci:help>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>5</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Property Manipulators\Remove Properties</sci:value>
							</sci:arg>
						</sci:component>
					</sci:data>
					<sci:data object="SciTegic.Protocol.1">
						<sci:component name="Subprotocol" version="2">
							<sci:arg name="RunToCompletion" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - For Each Data Record&quot;, the subprotocol is re-initialized and executed in its entirety for each individual data record it processes.
&lt;p&gt;
When set to &quot;True - For Each Category&quot;, the data records are divided into categories based on the value of the Categorize Using parameter and then the subprotocol is re-initialized and executed in its entirety for each category of data records. When used in conjunction with &lt;i&gt;Parallel Processing Options&lt;/i&gt;, each category of data records will be sent to the remote server as part of one single batch.</sci:help>
								<sci:member>RunToCompletion Categorize Using</sci:member>
								<sci:legalval selected="true">False</sci:legalval>
								<sci:legalval>True - For Each Data Record</sci:legalval>
								<sci:legalval>True - For Each Category</sci:legalval>
							</sci:arg>
							<sci:arg name="RunToCompletion Categorize Using" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>Required when RunToCompletion is set to &lt;i&gt;True - For Each Category&lt;/i&gt;, this parameter specifies the property or properties used to define the categories.</sci:help>
								<sci:validscript>SetInvalidDetails(&apos;This parameter is required when RunToCompletion is set to True - For Each Category&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
								<sci:enabledscript>SetDisabledDetails(&apos;To Enable, Set RunToCompletion to True - For Each Category&apos;);
Parameter(&apos;RunToCompletion&apos;) eq &apos;True - For Each Category&apos;;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>&lt;p&gt;
When set to True, this set of options allows the subprotocol to execute in parallel on one or more independent Pipeline Pilot servers, running locally or remotely.  Additional parameters control the number of data records to send in each process batch, the list of Pipeline Pilot servers to use, the number of protocol processes that can be executed on each server, and whether to preserve the order of the processed data records.
&lt;/p&gt;&lt;p&gt;
Use this option with care, since it will not increase throughput in all circumstances. Generally speaking, it yields improved performance when the parallelization benefits outweigh the data transfer overhead for the specified batch size.  As a rough guide, performance can be improved when each individual batch requires at least 10 seconds to execute, although this can be affected by the size of each data record.
&lt;/p&gt;&lt;p&gt;
When running the protocol with debugging, the subprotocol will provide debugging messages to detail each of the various steps of execution.  Also, components located within the parallel subprotocol will display their debugging messages as well.
&lt;/p&gt;&lt;p&gt;
For more information on the parallel subprotocol options, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_parallel_processing.htm&apos;)&quot;&gt;Parallel Processing Subprotocols&lt;/a&gt;.
&lt;/p&gt;
</sci:help>
								<sci:member>Parallel Processing Options Batch Size</sci:member>
								<sci:member>Parallel Processing Options Server</sci:member>
								<sci:member>Parallel Processing Options Preserve Order</sci:member>
								<sci:legalval>True</sci:legalval>
								<sci:legalval selected="true">False</sci:legalval>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Batch Size" type="LongType" required="true" visibility="visible" multi="false" uimpl="false">
								<sci:help>&lt;p&gt;The number of records to send to the remote server(s) for each subprotocol execution.  In general, performance is optimized when the amount of time required to process each batch is at least 10 seconds (note that this can vary depending on the characteristics of the remote server&apos;s hardware).  Use a batch size of -1 to pass all data in a single batch.&lt;/p&gt;
&lt;p&gt;When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - for each category&quot;, the batch sizes will be determined by the number of records in each individual category.  Therefore, the &lt;i&gt;Batch Size&lt;/i&gt; parameter is not applicable.</sci:help>
								<sci:enabledscript>#parallel := Parameter(&apos;Parallel Processing Options&apos;);
if (not #parallel) then
	SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
end if;
#parallel;</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Server" type="StringType" required="false" visibility="visible" multi="true" expanded="true" legalvalsenforced="false" uimpl="false">
								<sci:help>&lt;p&gt;
A comma-separated list of Pipeline Pilot servers on which to execute the parallel subprotocol.  The server names should be in the same format as the Pipeline Pilot Client&apos;s change server dialog (that is, server-name:port-number).
&lt;/p&gt;&lt;p&gt;
Specifying &lt;b&gt;localhost&lt;/b&gt; as a server will cause the subprotocol to use its own Pipeline Pilot server.  This can be useful on multi-CPU/multi-core systems (where the subprotocol jobs are spawned on the same machine) and Pipeline Pilot Linux clusters (where &apos;localhost&apos; requests spawning the subprotocol jobs on the same cluster).
&lt;/p&gt;</sci:help>
								<sci:member>Parallel Processing Options Server Processes</sci:member>
								<sci:member>Parallel Processing Options Server Run On Grid</sci:member>
								<sci:validscript>SetInvalidDetails(&apos;This parameter is required.&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
								<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Server Processes" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>A comma-separated list of the maximum number of batches that can be simultaneously executed on each remote server.  The number of entries in this parameter must equal the number of servers. If &apos;*&apos; is specified as the number of processes, then that server will only launch as many batches as the administrator of the remote server has permitted.&lt;/br&gt;&lt;/br&gt;For non-Grid Engine job, the number of jobs will be limited to the value for the maximum number of simultaneous subprotocol jobs as defined in the Admin Console even if this value is higher than the value entered here or &apos;*&apos;.&lt;/br&gt;&lt;/br&gt;For Grid Engine jobs, the number of jobs will be limited to the value for the maximum number of simultaneous subprotocol grid jobs as defined in the Admin Console even if this value is higher than the value entered here or &apos;*&apos;.&lt;/br&gt;&lt;/br&gt;</sci:help>
								<sci:validscript>/* Server Processes must have the same number of comma separated entries as the Server parameter and must have a value*/
#processes := parameter();
expand(&apos;,&apos;, #processes);
#servers := parameter(&apos;Parallel Processing Options Server&apos;);
expand(&apos;,&apos;, #servers);

if (numvalues(#processes) == 0) then
	SetInvalidDetails(&apos;This parameter is required.&apos;);
else
	SetInvalidDetails(&apos;The number of server processes (&apos; . numvalues(#processes) . &apos;) must equal the number of servers (&apos; . numvalues(#servers) . &apos;).&apos;);
end if;
numvalues(#processes) &gt; 0 and numvalues(#processes) == numvalues(#servers);</sci:validscript>
								<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Server Run On Grid" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>Run subprotocol on grid engine if available.  Note: If no grid engine is configured the subprotocol will still run even if this parameter is set to true.</sci:help>
								<sci:member>Parallel Processing Options Server Run On Grid Queue Name</sci:member>
								<sci:member>Parallel Processing Options Server Run On Grid Grid Options</sci:member>
								<sci:enabledscript>parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Server Run On Grid Queue Name" type="StringType" required="false" visibility="visible" multi="false" legalvalsenforced="false" uimpl="false">
								<sci:help>Select the queue name on the grid to submit jobs to. Leave blank to use default queue name.</sci:help>
								<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Server Run On Grid Grid Options" type="StringType" required="false" visibility="visible" multi="true" uimpl="false">
								<sci:help>&lt;p&gt;This is an array of command line options to send to the Grid engine submit command.&lt;/p&gt;
&lt;p&gt;If you just include one line, whatever you enter will be sent &quot;as is&quot; to the submission command.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Just sending options directly to command line - PBS&lt;/b&gt;
&lt;p&gt;-l procs=16 -l walltime=08:00:00 -A PROJECTID&lt;/p&gt;
&lt;/br&gt;
&lt;p&gt;There are a number of parameters that Pipeline Pilot will translate to the correct command line options for whichever supported Grid Engine you are using.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Supported parameters&lt;/b&gt;
&lt;p&gt;Account=&amp;lt;Project/Account name&amp;gt;&lt;/p&gt;
&lt;p&gt;Maximum Execution Time=&amp;lt;DD:MM:SS&amp;gt; - LSF ignores seconds&lt;/p&gt;
&lt;p&gt;Number of Cores=&amp;lt;16&amp;gt;&lt;/p&gt;
&lt;p&gt;Parallel Environment=&amp;lt;The Parallel Environment to use&amp;gt; - Only needed for SGE&lt;/p&gt;
&lt;p&gt;Other=&amp;lt;Additional Parameters sent directly to submit command line&amp;gt;&lt;/p&gt;</sci:help>
								<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
							</sci:arg>
							<sci:arg name="Parallel Processing Options Preserve Order" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
								<sci:help>Whether to preserve the order of the data as it enters and leaves the remote subprotocol.</sci:help>
								<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
								<sci:legalval selected="true">True</sci:legalval>
								<sci:legalval>False</sci:legalval>
							</sci:arg>
							<sci:arg name="Tempfiles" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
								<sci:help>&lt;p&gt;A comma-delimited list of global properties, each of which is automatically populated with the name of a file in the job&apos;s temporary folder, which always has a unique name.&lt;p/&gt;For each global name, an additional global is created (with the suffix &lt;i&gt;_Filename&lt;/i&gt;) that hold only the leaf file name of the temporary file.&lt;/p&gt;</sci:help>
							</sci:arg>
							<sci:arg name="DeclareLocal" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
								<sci:help>&lt;p&gt;Lists a set of properties (without the @) to create on the global property list for this subprotocol. Separate property names with commas. Such properties can only be accessed within the scope of this subprotocol and its descendent subprotocols.&lt;p/&gt;

&lt;p&gt;Any global property not declared in this way is created on the top-level global property list and is accessible from all subprotocols, but breaks the encapsulation of the subprotocol and may collide with another property of the same name.&lt;/p&gt;

&lt;p&gt;Therefore, you should always declare a new global property in the &lt;i&gt;DeclareLocal&lt;/i&gt; parameter, to minimize the scope of the global property to the subprotocol where it is used.&lt;/p&gt;

&lt;p&gt;The example &lt;i&gt;DeclareLocal&lt;/i&gt; value below creates 3 global properties in the subprotocol scope. Note that you can initialize the declared global value with a scalar value using the &quot;:=&quot; syntax, as shown. You can surround text string values with quotes to aid clarity.&lt;/p&gt;
&lt;pre&gt;
    SubP_Counter := 0, SubP_NameHash, SubP_TitleText:=&quot;Sample 1&quot;
&lt;/pre&gt;
</sci:help>
							</sci:arg>
							<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
								<sci:help>Component Attributes</sci:help>
								<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
								<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
								<sci:legalval>ComponentRunsLocal</sci:legalval>
							</sci:arg>
							<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
								<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
								<sci:legalval selected="true">Halt</sci:legalval>
								<sci:legalval>Fail</sci:legalval>
								<sci:legalval>Pass</sci:legalval>
							</sci:arg>
							<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Custom Error Message</sci:help>
							</sci:arg>
							<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>standardize data according to Burggraaff et al.</sci:value>
							</sci:arg>
							<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol AutoLayout</sci:help>
								<sci:value>1</sci:value>
							</sci:arg>
							<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
								<sci:value>ComponentNode</sci:value>
							</sci:arg>
							<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
								<sci:help>Component Revision</sci:help>
								<sci:value>790</sci:value>
							</sci:arg>
							<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>{17001C74-63CE-4B4B-B37C-F0EAA19CE4AA}</sci:value>
							</sci:arg>
							<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:value>2106 -95</sci:value>
							</sci:arg>
							<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
								<sci:help>By Ref</sci:help>
								<sci:value>0</sci:value>
							</sci:arg>
							<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
								<sci:value>100</sci:value>
								<sci:value>Builds subprotocols in Pipeline Pilot.</sci:value>
								<sci:value>&lt;p&gt;
Use a subprotocol to collapse one or more components into a single item. Open 
a subprotocol to view or edit its contents. 
&lt;/p&gt;&lt;p&gt;
To define input and output ports, display 
icon, and parameter settings, right-click and select Edit. You can save subprotocols and reuse them. 
For more information, see the User Guide help for &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_overview.htm&apos;)&quot;&gt;Subprotocols 
Overview&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;
For more information on the parallel subprotocol options, see 
&lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_parallel_processing.htm&apos;)&quot;&gt;Parallel 
Processing Subprotocols&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;
Tip: Any component can be made into a shortcut, 
so that the latest version is always used. For more information, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/shortcuts.htm&apos;)&quot;&gt;Creating 
Shortcuts&lt;/a&gt;.
&lt;/p&gt;</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value/>
								<sci:value>Generic</sci:value>
								<sci:value>Records passing out of any unconnected pass ports of components inside the subprotocol</sci:value>
								<sci:value>Generic</sci:value>
								<sci:value>Records passing out of any unconnected fail ports of components inside the subprotocol</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The server version when this component was registered</sci:help>
								<sci:value>17.2.0.1267</sci:value>
							</sci:arg>
							<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
							<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Sticky Notes</sci:help>
							</sci:arg>
							<sci:arg name="ProtocolScale2" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Scale</sci:help>
								<sci:value>100</sci:value>
							</sci:arg>
							<sci:arg name="Protocol Options" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>Protocol Options</sci:help>
								<sci:legalval>Owner Access Only</sci:legalval>
							</sci:arg>
							<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The user who registered this component.</sci:help>
								<sci:value>scitegic/coreutils</sci:value>
							</sci:arg>
							<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The date this component was registered.</sci:help>
								<sci:value>Thu Sep 15 15:57:54 2016</sci:value>
							</sci:arg>
							<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
								<sci:help>Local Component Identifier</sci:help>
								<sci:value>6</sci:value>
							</sci:arg>
							<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
								<sci:help>The original path within the database of this component.</sci:help>
								<sci:value>Components\Data Access and Manipulation\Utilities\Subprotocol Utilities\Subprotocol</sci:value>
							</sci:arg>
						</sci:component>
						<sci:protocol>
							<sci:data object="SciTegic.NormalizePropertyTypes.1">
								<sci:component name="Clean Data" version="2">
									<sci:arg name="Output What" type="StringType" required="false" visibility="hidden" multi="false">
										<sci:help>What to output - either a summary of the property information, one record per property, or the cleaned data, one record per incoming data record.

If &lt;i&gt;Summary Properties&lt;/i&gt; is selected, the summary properties are:

&lt;ul&gt;
&lt;li&gt;name: the name of the property&lt;/li&gt;
&lt;li&gt;count: the number of incoming data records containing this property&lt;/li&gt;
&lt;li&gt;type: the inferred type of the property (see list of possible types below)&lt;/li&gt;
&lt;li&gt;min: if numeric or date/time, the minimum value of the property&lt;/li&gt;
&lt;li&gt;max: if numeric or date/time, the maximum value of the property&lt;/li&gt;
&lt;li&gt;values: if string, then the list of different values (if less than Maximum Number of Values)&lt;/li&gt;
&lt;li&gt;missingvalues: if this property contained any missing values, then this will contain the missing values that were found&lt;/li&gt;
&lt;/ul&gt;

The possible values for type are:

&lt;ul&gt;
&lt;li&gt;Null&lt;li&gt;
&lt;li&gt;Boolean&lt;li&gt;
&lt;li&gt;Integer&lt;li&gt;
&lt;li&gt;Double&lt;li&gt;
&lt;li&gt;String&lt;li&gt;
&lt;li&gt;Text&lt;li&gt;
&lt;li&gt;DateTime&lt;li&gt;
&lt;li&gt;Other&lt;li&gt;
&lt;/ul&gt;

      </sci:help>
										<sci:legalval selected="true">Cleaned Data</sci:legalval>
										<sci:legalval>Property Summary</sci:legalval>
									</sci:arg>
									<sci:arg name="Summary Options" type="GroupType" required="false" visibility="hidden" multi="false" legalvalsenforced="false">
										<sci:help>Options that affect the output of the summary data only</sci:help>
										<sci:member>Maximum Number of Values</sci:member>
										<sci:member>Text Length</sci:member>
									</sci:arg>
									<sci:arg name="Maximum Number of Values" type="LongType" required="false" visibility="hidden" multi="false" expanded="true">
										<sci:help>For String properties, we also return a list of possible values. This sets the maximum number of different values we wish to return. If that is exceeded, then no values are returned.
      </sci:help>
										<sci:value>20</sci:value>
									</sci:arg>
									<sci:arg name="Text Length" type="LongType" required="false" visibility="hidden" multi="false">
										<sci:help>
        For string properties, if the length of the value is greater than or equal to this number,
        then that property is considered Text, and no values are collected or returned.
      </sci:help>
										<sci:value>32</sci:value>
									</sci:arg>
									<sci:arg name="Conversion Options" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>&lt;p&gt;Options that affect how we inspect and convert between types.&lt;/p&gt;

&lt;p&gt;Options are: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Check Date Time&lt;/b&gt;: check strings to see if they are datetime values. (This can be slow!)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Use Calculable Property Types&lt;/b&gt;: if the property name exists as a calculable property, use that type as the minimum type.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Numeric [0,1] is Integer&lt;/b&gt;: if we see a rpoperty with only 0 and 1&apos;s, that is normally considered a boolean. If this option is selected, it is considered an integer. &lt;/li&gt;
&lt;/ul&gt;</sci:help>
										<sci:legalval selected="true">Check Date Time</sci:legalval>
										<sci:legalval>Use Calculable Property Types</sci:legalval>
										<sci:legalval selected="true">Numeric [0,1] is Integer</sci:legalval>
									</sci:arg>
									<sci:arg name="Clean Behavior" type="StringType" required="false" visibility="visible" multi="false" expanded="true">
										<sci:help>&lt;p&gt;The &lt;i&gt;Clean Data&lt;/i&gt; will pass only clean data out the Pass port. &quot;Clean data&quot; is data where there are no missing values or values that failed to coerce to a requested property type, across all the properties of the data record.&lt;/p&gt;

&lt;p&gt;If a particular property has an unclean value in at least one data record, there are two cleaning choices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Remove Any Data Record with Unclean Value&lt;/b&gt;: any data record containing at least one unclean property value will be removed from the data stream and passed out the Fail port.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Remove Unclean Property from All Data Records&lt;/b&gt;: any property having an unclean value in at least one data record, will be removed from &lt;i&gt;all&lt;/i&gt; data records. The remaining properties will be returned via the Pass port. The removed properties are collected onto another data record and passed out the Fail port.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
										<sci:legalval selected="true">Remove Any Data Record with Unclean Value</sci:legalval>
										<sci:legalval>Remove Unclean Property from All Data Records</sci:legalval>
									</sci:arg>
									<sci:arg name="Missing Value Options" type="GroupType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
										<sci:help>Options to control the identification of missing values, and to possibly standardize (and then accept as clean) these values by column type using a provided replacement string.</sci:help>
										<sci:member>Missing Value Strings</sci:member>
										<sci:member>Replace Missing Values</sci:member>
									</sci:arg>
									<sci:arg name="Missing Value Strings" type="StringType" required="false" visibility="visible" multi="true" expanded="true">
										<sci:help>If provided, this is an array of string values that will be interpreted as missing values. Note that an empty entry causes the empty string to be treated as a missing value.</sci:help>
										<sci:value/>
										<sci:value>*</sci:value>
										<sci:value>?</sci:value>
										<sci:value>NULL</sci:value>
										<sci:value>NA</sci:value>
										<sci:value>N/A</sci:value>
										<sci:value>NaN</sci:value>
									</sci:arg>
									<sci:arg name="Replace Missing Values" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
										<sci:help>Whether to identify missing values using the list of values in &lt;i&gt;Missing Values Strings&lt;/i&gt;.</sci:help>
										<sci:member>Types to Replace</sci:member>
										<sci:legalval>True</sci:legalval>
										<sci:legalval selected="true">False</sci:legalval>
									</sci:arg>
									<sci:arg name="Types to Replace" type="StringType" required="false" visibility="visible" multi="true" expanded="true">
										<sci:help>Replace missing values with particular strings for particular column types</sci:help>
										<sci:member>Boolean Missing Values</sci:member>
										<sci:member>Integer Missing Values</sci:member>
										<sci:member>Double Missing Values</sci:member>
										<sci:member>String Missing Values</sci:member>
										<sci:member>DateTime Missing Values</sci:member>
										<sci:enabledscript>parameter(&apos;Replace Missing Values&apos;)</sci:enabledscript>
										<sci:legalval selected="true">Boolean</sci:legalval>
										<sci:legalval selected="true">Integer</sci:legalval>
										<sci:legalval selected="true">Double</sci:legalval>
										<sci:legalval selected="true">String</sci:legalval>
										<sci:legalval selected="true">DateTime</sci:legalval>
									</sci:arg>
									<sci:arg name="Boolean Missing Values" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Replace missing values in Boolean columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Boolean&apos;);</sci:enabledscript>
										<sci:value>False</sci:value>
									</sci:arg>
									<sci:arg name="Integer Missing Values" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Replace missing values in Integer columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Integer&apos;);</sci:enabledscript>
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="Double Missing Values" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Replace missing values in Double columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Double&apos;);</sci:enabledscript>
										<sci:value>0.0</sci:value>
									</sci:arg>
									<sci:arg name="String Missing Values" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Replace missing values in String columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;String&apos;);</sci:enabledscript>
									</sci:arg>
									<sci:arg name="DateTime Missing Values" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Replace missing values in DateTime columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;DateTime&apos;);</sci:enabledscript>
										<sci:value>1/1/1970</sci:value>
									</sci:arg>
									<sci:arg name="Property Type Coercion Options" type="GroupType" required="false" visibility="visible" multi="true" legalvalsenforced="false">
										<sci:help>You can force a particular property to a specific type. 

If you do this, and any of the values on a data record (other than missing values) fails to coerce, then the data is considered unclean. 
</sci:help>
										<sci:member>Property 1</sci:member>
										<sci:member>Property 2</sci:member>
										<sci:member>Property 3</sci:member>
										<sci:member>Property 4</sci:member>
										<sci:member>Property 5</sci:member>
										<sci:member>Property 6</sci:member>
									</sci:arg>
									<sci:arg name="Property 1" type="PropertyNameType" required="false" visibility="visible" multi="false" expanded="true">
										<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
										<sci:member>Property 1 Coerce to Type</sci:member>
									</sci:arg>
									<sci:arg name="Property 1 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
										<sci:legalval>Boolean</sci:legalval>
										<sci:legalval>Integer</sci:legalval>
										<sci:legalval selected="true">Double</sci:legalval>
										<sci:legalval>String</sci:legalval>
										<sci:legalval>DateTime</sci:legalval>
									</sci:arg>
									<sci:arg name="Property 2" type="PropertyNameType" required="false" visibility="visible" multi="false">
										<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
										<sci:member>Property 2 Coerce to Type</sci:member>
									</sci:arg>
									<sci:arg name="Property 2 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
										<sci:legalval>Boolean</sci:legalval>
										<sci:legalval>Integer</sci:legalval>
										<sci:legalval selected="true">Double</sci:legalval>
										<sci:legalval>String</sci:legalval>
										<sci:legalval>DateTime</sci:legalval>
									</sci:arg>
									<sci:arg name="Property 3" type="PropertyNameType" required="false" visibility="visible" multi="false">
										<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
										<sci:member>Property 3 Coerce to Type</sci:member>
									</sci:arg>
									<sci:arg name="Property 3 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
										<sci:legalval>Boolean</sci:legalval>
										<sci:legalval>Integer</sci:legalval>
										<sci:legalval selected="true">Double</sci:legalval>
										<sci:legalval>String</sci:legalval>
										<sci:legalval>DateTime</sci:legalval>
									</sci:arg>
									<sci:arg name="Property 4" type="PropertyNameType" required="false" visibility="visible" multi="false">
										<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
										<sci:member>Property 4 Coerce to Type</sci:member>
									</sci:arg>
									<sci:arg name="Property 4 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
										<sci:legalval>Boolean</sci:legalval>
										<sci:legalval>Integer</sci:legalval>
										<sci:legalval selected="true">Double</sci:legalval>
										<sci:legalval>String</sci:legalval>
										<sci:legalval>DateTime</sci:legalval>
									</sci:arg>
									<sci:arg name="Property 5" type="PropertyNameType" required="false" visibility="visible" multi="false">
										<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
										<sci:member>Property 5 Coerce to Type</sci:member>
									</sci:arg>
									<sci:arg name="Property 5 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
										<sci:legalval>Boolean</sci:legalval>
										<sci:legalval>Integer</sci:legalval>
										<sci:legalval selected="true">Double</sci:legalval>
										<sci:legalval>String</sci:legalval>
										<sci:legalval>DateTime</sci:legalval>
									</sci:arg>
									<sci:arg name="Property 6" type="PropertyNameType" required="false" visibility="visible" multi="false">
										<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
										<sci:member>Property 6 Coerce to Type</sci:member>
									</sci:arg>
									<sci:arg name="Property 6 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
										<sci:legalval>Boolean</sci:legalval>
										<sci:legalval>Integer</sci:legalval>
										<sci:legalval selected="true">Double</sci:legalval>
										<sci:legalval>String</sci:legalval>
										<sci:legalval>DateTime</sci:legalval>
									</sci:arg>
									<sci:arg name="Array Value Options" type="GroupType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
										<sci:help>Options to handle array data</sci:help>
										<sci:member>Array Values Are</sci:member>
									</sci:arg>
									<sci:arg name="Array Values Are" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Whether array values are OK, are unclean, or should be replaced by a single value, the first value in the array.</sci:help>
										<sci:legalval>OK</sci:legalval>
										<sci:legalval selected="true">Unclean</sci:legalval>
										<sci:legalval>Replaced by First Value</sci:legalval>
									</sci:arg>
									<sci:arg name="Ignore Properties" type="PropertyNameType" required="false" visibility="visible" multi="true" uimpl="false">
										<sci:help>A list of properties to ignore, if any. They will be passed through untouched, and never considered unclean.</sci:help>
										<sci:value>accession</sci:value>
										<sci:value>compound_chembl_id</sci:value>
										<sci:value>target_chembl_id</sci:value>
										<sci:value>canonical_smiles</sci:value>
										<sci:value>pref_name</sci:value>
										<sci:value>idnumber</sci:value>
										<sci:value>name</sci:value>
										<sci:value>pchembl_value</sci:value>
									</sci:arg>
									<sci:arg name="Error Property Name" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>The name of the property to put error messages into. If left blank, do not add an error property.</sci:help>
										<sci:value>ErrorText</sci:value>
									</sci:arg>
									<sci:arg name="CacheSizeInflationFactor" type="LongType" required="false" visibility="hidden" multi="false" uimpl="true">
										<sci:help>When you run using a limited cache size, normally only that many records may be output.
This parameter allows you to increase that size by a multiplicative factor. </sci:help>
										<sci:value>2</sci:value>
									</sci:arg>
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="Implementation Of" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:legalval>Normalize Property Types</sci:legalval>
										<sci:legalval selected="true">Clean Data</sci:legalval>
										<sci:legalval>Set Property Type</sci:legalval>
									</sci:arg>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/generic</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Thu Sep 14 07:50:41 2017</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>Clean Data</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>COMPONENTNODE</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{6E28C170-2FEC-4A3C-90A6-2DCEAA330E9E}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>90 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Ensure your data is clean; that is, has no missing values, is coerced to the desired type, and is not an array value.</sci:value>
										<sci:value>&lt;p&gt;&lt;i&gt;Cleaning&lt;/i&gt; data is the act of finding, for each property, that it has no missing values, is coerced to the desired type, and is not an array value. The type is inferred: for example, a property may contains strings, with values &quot;0&quot; and &quot;1&quot;. This will be cleaned into Boolean values.&lt;/p&gt;

The problems that cleaning addresses are:
&lt;ol&gt;
&lt;li&gt;The same property name may have different value types on different data records&lt;/li&gt;
&lt;li&gt;The property might be of types that are coercible to some simpler base type (e.g., numbers might be stored as strings, when they could be better represented as integers)&lt;/li&gt;
&lt;li&gt;The property might be missing from some data records&lt;/li&gt;
&lt;li&gt;The property might appear multiple times on a given data record (arrays)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The normalized type is the simplest type possible, ordered from: Null, Boolean, Integer, Double, String, DateTime.&lt;/p&gt;
</sci:value>
										<sci:value>Generic</sci:value>
										<sci:value/>
										<sci:value>Generic</sci:value>
										<sci:value>The Normalized data records, or the summary for each property.</sci:value>
										<sci:value>Generic</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Data Access and Manipulation\Data Manipulators\Clean Data</sci:value>
									</sci:arg>
								</sci:component>
								<sci:proplist>
									<sci:propval name="RegistrationVersion">18.1.0.1590</sci:propval>
								</sci:proplist>
							</sci:data>
							<sci:data object="SciTegic.TransformMolecule.1">
								<sci:component name="Deprotonate Bases" version="2">
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval>ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>Custom Error Message</sci:help>
									</sci:arg>
									<sci:arg name="Action" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:help>This parameter lists a set of options for the type of standardization that
you may perform.  The default is to standardize the charging and stereochemistry
of the molecule.  If multiple actions are selected, they are performed in 
the order given.</sci:help>
										<sci:legalval>ProtonateAcids</sci:legalval>
										<sci:legalval>DeprotonateAcids</sci:legalval>
										<sci:legalval>ProtonateBases</sci:legalval>
										<sci:legalval selected="true">DeprotonateBases</sci:legalval>
									</sci:arg>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/chemistryadv</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Tue Oct 31 12:23:58 2006</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>Deprotonate Bases</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>COMPONENTNODE</sci:value>
									</sci:arg>
									<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The component this component is based upon.</sci:help>
										<sci:value>Standardize Charges</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{805BEA88-0DDF-4bed-918D-8B1FC7A8512A}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>378 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Removes Hydrogen atoms from basic functional groups in the molecule, adjusting the charges accordingly
</sci:value>
										<sci:value>&lt;p&gt;Basic functional groups are defined as Nitrogen atoms with a positive formal charge and one or more attached Hydrogen atoms.  If the Nitrogen atom has implicit Hydrogen atoms, the number of implicit Hydrogen atoms is reduced by one.  If the Nitrogen atom has only explicit Hydrogen atoms, then one of the explicit Hydrogen atoms is removed.  The charge on the Nitrogen atom is set to zero.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The analogous component for acids is &lt;a href=&quot;javascript:DoLink(&apos;{AD51FE16-75A9-46a4-BADC-8E86800227AC}&apos;)&quot;&gt;Protonate Acids&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For handling both acids and bases at given levels of pH, use &lt;a href=&quot;javascript:DoLink(&apos;{72D1AEC5-EE9E-4a39-A3D6-63637069BF6E}&apos;)&quot;&gt;Ionize Molecule at pH&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</sci:value>
										<sci:value>Molecule</sci:value>
										<sci:value/>
										<sci:value>Molecule</sci:value>
										<sci:value/>
										<sci:value>None</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>1</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Chemistry\Data Access and Manipulation\Manipulators\Deprotonate Bases</sci:value>
									</sci:arg>
								</sci:component>
								<sci:proplist>
									<sci:propval name="RegistrationVersion">6.0.1.7</sci:propval>
								</sci:proplist>
							</sci:data>
							<sci:data object="SciTegic.TransformMolecule.1">
								<sci:component name="Protonate Acids" version="2">
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval>ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>Custom Error Message</sci:help>
									</sci:arg>
									<sci:arg name="Action" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:help>This parameter lists a set of options for the type of standardization that
you may perform.  The default is to standardize the charging and stereochemistry
of the molecule.  If multiple actions are selected, they are performed in 
the order given.</sci:help>
										<sci:legalval selected="true">ProtonateAcids</sci:legalval>
										<sci:legalval>DeprotonateAcids</sci:legalval>
										<sci:legalval>ProtonateBases</sci:legalval>
										<sci:legalval>DeprotonateBases</sci:legalval>
									</sci:arg>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/chemistryadv</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Fri Sep 22 14:18:00 2006</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>Protonate Acids</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>COMPONENTNODE</sci:value>
									</sci:arg>
									<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The component this component is based upon.</sci:help>
										<sci:value>Standardize Charges</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{AD51FE16-75A9-46a4-BADC-8E86800227AC}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>666 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Adds Hydrogen atoms to acid functional groups in the molecule, adjusting the charges accordingly

</sci:value>
										<sci:value>&lt;p&gt;Acid functional groups are defined as Oxygen, Sulfur, Nitrogen, or Carbon atoms with a negative formal charge, not attached to any charged atom. An implicit Hydrogen atom is added to the Oxygen or Sulfur atom and the charge is set to zero.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The analogous component for bases is &lt;a href=&quot;javascript:DoLink(&apos;{805BEA88-0DDF-4bed-918D-8B1FC7A8512A}&apos;)&quot;&gt;Deprotonate Bases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For handling both acids and bases at given levels of pH, use &lt;a href=&quot;javascript:DoLink(&apos;{72D1AEC5-EE9E-4a39-A3D6-63637069BF6E}&apos;)&quot;&gt;Ionize Molecule at pH&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</sci:value>
										<sci:value>Molecule</sci:value>
										<sci:value/>
										<sci:value>Molecule</sci:value>
										<sci:value/>
										<sci:value>None</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>2</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Chemistry\Data Access and Manipulation\Manipulators\Protonate Acids</sci:value>
									</sci:arg>
								</sci:component>
								<sci:proplist>
									<sci:propval name="RegistrationVersion">6.0.1.0</sci:propval>
								</sci:proplist>
							</sci:data>
							<sci:data object="SciTegic.TransformMolecule.1">
								<sci:component name="Standardize Molecule" version="2">
									<sci:arg name="Action" type="StringType" required="true" visibility="visible" multi="true" expanded="true">
										<sci:help>Options for the type of standardization you can perform. The default is to standardize the charging and stereochemistry of the molecule. If multiple actions are selected, they are performed in the given order.

Available actions:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;StandardizeStereo: &lt;/b&gt; 
Atoms that are perceived as true stereo atoms but which have no stereochemical 
markings (UnknownAtomStereo, EvenAtomStereo, or OddAtomStereo) are set to UnknownAtomStereo. 
Atoms that have stereochemical markings but which are not true stereoatoms are 
set to NoAtomStereo. 2D or 3D coordinates are not used in this process. &lt;br /&gt;
Similarly, bonds that are perceived as true stereo double bonds, but which have 
no stereochemical markings (UnknownBondStereo, CisBondStereo, or TransBondStereo) 
are set to UnknownBondStereo. Bonds that have stereochemical markings but which 
are not true stereo bonds are set to NoBondStereo. Again, 2D or 3D coordinates 
are not used in this process.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;StandardizeCharges:&lt;/b&gt; 
Sets standard formal charges for common functional groups: Quaternary Nitrogen: 
+1 &lt;br /&gt;
Nitro groups: N+(=O)O- &lt;br&gt;
Diazonium N: +1 &lt;br&gt;
Oxygen with three attachments: +1 &lt;br&gt;
X=O-C Oxygen: +1 &lt;br&gt;
Sulfur with three attachments: +1 &lt;br&gt;
S=O-C Sulfur: +1 &lt;br&gt;
F, Cl, Br, I with no attachments: -1 &lt;br&gt;
Note that halogen acids with explicit hydrogens (H-X) are not modified. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;StandardizePiSystems:&lt;/b&gt; 
Checks pi systems to convert them to a kekulized representation with single/double bonds and a net radical or charge (depending on the charge of the connected atom). &lt;/li&gt;
&lt;li&gt;&lt;b&gt;CenterMolecule:&lt;/b&gt; 
Translates the molecule to the center of geometry. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;RemoveSingleAtomFragments:&lt;/b&gt; 
Removes all unattached atoms from the molecule. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;KeepSmallestFragment:&lt;/b&gt; 
Keeps only the fragment with fewer atoms in the case of multifragment molecules. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;KeepLargestFragment:&lt;/b&gt; 
Keeps only the fragment with the most atoms in the case of multifragment molecules. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;RemoveLargestFragment:&lt;/b&gt; 
Removes the fragment with the most atoms in the case of multifragment molecules. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;MakeNon[H]Atoms[C]Atoms:&lt;/b&gt; 
Converts all the atoms in the molecule to Carbon. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;MakeNon[C,H]Atoms[Q]Atoms: &lt;/b&gt; 
Converts all non-carbon, non-hydrogen atoms in the molecule to the Q query atom type. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;MakeNon[H]Atoms[A]Atoms: &lt;/b&gt; 
Converts all non-hydrogen atoms in the molecule to the A query atom type. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;MakeAllBondsSingle: &lt;/b&gt; 
Converts all the bonds in the molecule to Single bonds. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearCoordinates:&lt;/b&gt; 
Sets all x, y, z coordinates to zero. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;FixCoordinateDimension:&lt;/b&gt; 
Checks the x, y, z atomic coordinates and sets the dimension for the molecule accordingly:
&lt;ul&gt;
&lt;li&gt;3 if non-zero values are found for x or y, and for z.&lt;/li&gt;
&lt;li&gt;2 if non-zero values are found for x or y, but not for z.&lt;/li&gt;
&lt;li&gt;0 if all x, y, z coordinates are zero.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;b&gt;StraightenTripleBonds:&lt;/b&gt;
Looks for triple bonds with non-linear geometry and makes them linear. In some cases this action could cause atoms to overlap each other. This can be checked with the &lt;a href=&quot;javascript:DoLink(&apos;{0CFFF911-BF35-4A1B-8B2C-B9A586BD39F3}&apos;)&quot;&gt;Bump Check Filter&lt;/a&gt; and the bumps resolved using the &apos;Resolve Bumps Only&apos; option in &lt;a href=&quot;javascript:DoLink(&apos;{9164525E-5964-47A2-82D9-B8155B215724}&apos;)&quot;&gt;2D Coords&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;StraightenAllenes:&lt;/b&gt;
Looks for allene structures with non-linear geometry and makes them linear. In some cases this action could cause atoms to overlap each other. This can be checked with the &lt;a href=&quot;javascript:DoLink(&apos;{0CFFF911-BF35-4A1B-8B2C-B9A586BD39F3}&apos;)&quot;&gt;Bump Check Filter&lt;/a&gt; and the bumps resolved using the &apos;Resolve Bumps Only&apos; option in &lt;a href=&quot;javascript:DoLink(&apos;{9164525E-5964-47A2-82D9-B8155B215724}&apos;)&quot;&gt;2D Coords&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearMolecule:&lt;/b&gt; 
Deletes all atoms and bonds in the molecule, keeping the molecule object in the data record. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;RemoveMolecule:&lt;/b&gt; 
Deletes the molecule object from the data record. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;Convert to Absolute Stereo:&lt;/b&gt; 
Assign all stereo atoms present in the molecule to the absolute configuration represented in the molecule. This is equivalent to setting the molecule Chiral flag to 1. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;Convert to AND Enantiomer:&lt;/b&gt; 
Assign all stereo atoms present in the molecule to the same AND stereo group, representing a racemic mixture. This is equivalent to setting the molecule Chiral flag to 0.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Convert to OR Enantiomer:&lt;/b&gt; 
Assign all stereo atoms present in the molecule to the same OR stereo group. V3000 MOL format is required to represent this stereo configuration.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearStereo: &lt;/b&gt; 
Sets all atoms and bonds to NoStereo. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearEnhancedStereo: &lt;/b&gt; 
Clears all relative atom stereo groups (enhanced stereo) from the molecule.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearUnknownStereo:&lt;/b&gt; 
Sets all atoms and bonds that are marked UnknownStereo to NoStereo. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearUnknownAtomStereo:&lt;/b&gt; 
Sets all atoms that are marked UnknownStereo to NoStereo. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearUnknownCisTransBondStereo:&lt;/b&gt; 
Sets all bonds that are marked UnknownStereo to NoStereo. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearUnknownCisTransBondStereoInSmallRings:&lt;/b&gt; 
Sets all bonds in small rings that are marked UnknownStereo to NoStereo. This flag is useful because the SMILES writer suppresses Cis/Trans markings for bonds in small rings.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearCisTransBondStereo:&lt;/b&gt; 
Sets all bonds that are marked CisStereo or TransStereo to UnknownStereo. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearCharges: &lt;/b&gt; 
Sets all formal charges to zero. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;SetStereoFromCoordinates: &lt;/b&gt; 
This option uses the 2D coordinates and up/down bond markings, or the 
3D coordinates, to assign the stereochemistry of the atoms or bonds. Typically, 
this is done by the readers or the molecules from text components. Occasionally, 
components may create molecules that need to have their stereo reperceived. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;RepositionStereoBonds: &lt;/b&gt; 
This option repositions the stereo bond markings, trying to find the best bond to mark as a wedge bond for each stereo atom. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;RepositionAxialStereoBonds: &lt;/b&gt; 
This option repositions the stereo bond markings on axial stereo centers (allenes and atropisomers).  This is more expensive than the tetrahedral reposition action as it requires perceiving rings and aromaticity.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;FixDirectionOfWedgeBonds: &lt;/b&gt; 
This option checks the wedge bonds in the molecule to make sure that the wedge is drawn with the stereo atom at the narrow end of the wedge. Any wedge bond for which there is a stereo atom at the wide end and no stereo atom at the narrow end is reversed to point in the other direction. A separate option, &lt;i&gt;Invert Wedge Bond When Changing Direction&lt;/i&gt;, controls whether or not to invert the bond stereo (up or down) when changing the direction of the wedge bond. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;StandardStereoToEnhancedStereo:&lt;/b&gt;  Converts structures which contain only standard chiral-flag on or chiral-flag off into structures that contain enhanced stereo groups.  If the structure has the chiral flag on, then all stereo centers will be added to a single ABS group.  If the structure has the chiral flag off, then all stereocenters  will be added to a single AND group.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearPiBonds: &lt;/b&gt; 
Deletes the pi bonds.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearQueryInfo: &lt;/b&gt; 
Deletes all query information from atoms and bonds. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearHighlightColors:&lt;/b&gt; 
Clears any highlight colors from atoms and bonds. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearAtomLabels:&lt;/b&gt; 
Clears any labels assigned to the atoms. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearBondLabels:&lt;/b&gt; 
Clears any labels assigned to the bonds. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;NeutralizeBondedZwitterions:&lt;/b&gt; 
Converts directly bonded zwitterions (positively charged atom bonded to negatively charged atom, A+B-) to the neutral representation (A=B)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearUnusualValence:&lt;/b&gt; 
Clears any atom valence query features and resets all implicit hydrogen counts to their standard values.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearIsotopes:&lt;/b&gt; 
Clears any isotope information from the atoms in the molecule, setting all to the most common isotopes.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearDativeBonds:&lt;/b&gt; 
Clears explicit dative bonds (as found in V3000 mol files).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;ClearHydrogenBonds:&lt;/b&gt; 
Clears explicit hydrogen bonds (as found in V3000 mol files).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;LocalizeMarkushRAtomsOnRings:&lt;/b&gt; 
Takes molecules with delocalized R atoms (R atoms pointing to center of the ring) and replaces them with R atoms attached to all available positions in the ring.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To remove sgroups or invalidate their coordinates, use &lt;a href=&quot;javascript:DoLink(&apos;{C3FC63FA-492D-472C-8166-A1D73AE5B579}&apos;)&quot;&gt;Clear Sgroup Features&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</sci:help>
										<sci:member>Invert Wedge Bond When Changing Direction</sci:member>
										<sci:member>Single Halogen Atoms</sci:member>
										<sci:member>Single Metal Atoms</sci:member>
										<sci:member>Normalize Metals in Group 1A</sci:member>
										<sci:member>Mark Unknown Stereo Centers</sci:member>
										<sci:member>Standardize Ionizable Groups</sci:member>
										<sci:member>Process Pseudo Stereo Atoms</sci:member>
										<sci:member>Preserve Stereo Marks On</sci:member>
										<sci:member>Remove Explicit Valences</sci:member>
										<sci:member>Acids</sci:member>
										<sci:legalval selected="true">StandardizeStereo</sci:legalval>
										<sci:legalval selected="true">StandardizeCharges</sci:legalval>
										<sci:legalval>StandardizePiSystems</sci:legalval>
										<sci:legalval>CenterMolecule</sci:legalval>
										<sci:legalval>RemoveSingleAtomFragments</sci:legalval>
										<sci:legalval>KeepSmallestFragment</sci:legalval>
										<sci:legalval>KeepLargestFragment</sci:legalval>
										<sci:legalval>RemoveLargestFragment</sci:legalval>
										<sci:legalval>MakeNon[H]Atoms[C]Atoms</sci:legalval>
										<sci:legalval>MakeNon[H]Atoms[A]Atoms</sci:legalval>
										<sci:legalval>MakeNon[C,H]Atoms[Q]Atoms</sci:legalval>
										<sci:legalval>MakeAllBondsSingle</sci:legalval>
										<sci:legalval>ClearCoordinates</sci:legalval>
										<sci:legalval>FixCoordinateDimension</sci:legalval>
										<sci:legalval>StraightenTripleBonds</sci:legalval>
										<sci:legalval>StraightenAllenes</sci:legalval>
										<sci:legalval>ClearMolecule</sci:legalval>
										<sci:legalval>RemoveMolecule</sci:legalval>
										<sci:legalval>Convert to Absolute Stereo</sci:legalval>
										<sci:legalval>Convert to AND Enantiomer</sci:legalval>
										<sci:legalval>Convert to OR Enantiomer</sci:legalval>
										<sci:legalval>ClearStereo</sci:legalval>
										<sci:legalval>ClearEnhancedStereo</sci:legalval>
										<sci:legalval>ClearUnknownStereo</sci:legalval>
										<sci:legalval>ClearUnknownAtomStereo</sci:legalval>
										<sci:legalval>ClearUnknownCisTransBondStereo</sci:legalval>
										<sci:legalval>ClearUnknownCisTransBondStereoInSmallRings</sci:legalval>
										<sci:legalval>ClearCisTransBondStereo</sci:legalval>
										<sci:legalval>SetStereoFromCoordinates</sci:legalval>
										<sci:legalval>RepositionStereoBonds</sci:legalval>
										<sci:legalval>RepositionAxialStereoBonds</sci:legalval>
										<sci:legalval>FixDirectionOfWedgeBonds</sci:legalval>
										<sci:legalval>StandardStereoToEnhancedStereo</sci:legalval>
										<sci:legalval>ClearCharges</sci:legalval>
										<sci:legalval>ClearPiBonds</sci:legalval>
										<sci:legalval>ClearHighlightColors</sci:legalval>
										<sci:legalval>ClearQueryInfo</sci:legalval>
										<sci:legalval>ClearAtomLabels</sci:legalval>
										<sci:legalval>ClearBondLabels</sci:legalval>
										<sci:legalval>NeutralizeBondedZwitterions</sci:legalval>
										<sci:legalval>ClearUnusualValence</sci:legalval>
										<sci:legalval>ClearIsotopes</sci:legalval>
										<sci:legalval>ClearDativeBonds</sci:legalval>
										<sci:legalval>ClearHydrogenBonds</sci:legalval>
										<sci:legalval>LocalizeMarkushRAtomsOnRings</sci:legalval>
									</sci:arg>
									<sci:arg name="Acids" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>Specify whether to charge, uncharge or keep the current charge for single-bonded Oxygen atoms in carboxylic, sulfuric and phosphoric acid groups.
&lt;br&gt;
This option is enabled only when &quot;StandardizeCharges&quot; is selected in the &lt;i&gt;Action&lt;/i&gt; parameter.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;StandardizeCharges&apos;)</sci:enabledscript>
										<sci:legalval>Charge</sci:legalval>
										<sci:legalval>Uncharge</sci:legalval>
										<sci:legalval selected="true">Keep Current Charge</sci:legalval>
									</sci:arg>
									<sci:arg name="Single Halogen Atoms" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Specify whether to charge, uncharge or keep the current charge for  any unconnected halogen atom found in the molecule.
&lt;br&gt;
This option is enabled only when &quot;StandardizeCharges&quot; is selected in the &lt;i&gt;Action&lt;/i&gt; parameter.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;StandardizeCharges&apos;)</sci:enabledscript>
										<sci:legalval>Charge</sci:legalval>
										<sci:legalval>Uncharge</sci:legalval>
										<sci:legalval selected="true">Keep Current Charge</sci:legalval>
									</sci:arg>
									<sci:arg name="Single Metal Atoms" type="StringType" required="false" visibility="visible" multi="false">
										<sci:help>Specify whether to charge, uncharge or keep the current charge for  any unconnected metal atom found in the molecule.
&lt;br&gt;
This option is enabled only when &quot;StandardizeCharges&quot; is selected in the &lt;i&gt;Action&lt;/i&gt; parameter.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;StandardizeCharges&apos;)</sci:enabledscript>
										<sci:legalval>Charge</sci:legalval>
										<sci:legalval>Uncharge</sci:legalval>
										<sci:legalval selected="true">Keep Current Charge</sci:legalval>
									</sci:arg>
									<sci:arg name="Normalize Metals in Group 1A" type="BoolType" required="false" visibility="visible" multi="false">
										<sci:help>When set to True, a covalent bond is defined between positively charged ions in Group 1A (Li+, Na+, K+, Rb+, Cs+) and corresponding counter ions (C-, N-, Si-, P-). Also, covalent bonds between neutral Group 1A elements and neutral halogens or Oxygen are converted into ionic species, breaking the bond and charging the previously attached atoms to create (Li+, Na+, K+, Rb+, Cs+) and (X-, O-).

</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;StandardizeCharges&apos;)</sci:enabledscript>
										<sci:legalval>True</sci:legalval>
										<sci:legalval selected="true">False</sci:legalval>
									</sci:arg>
									<sci:arg name="Mark Unknown Stereo Centers" type="BoolType" required="false" visibility="visible" multi="false">
										<sci:help>When standardizing stereo, look for true stereo centers missing stereo marks (wedge bonds) and mark them as Unknown Stereo atoms, with their corresponding &apos;wiggly&apos; bonds.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;StandardizeStereo&apos;)</sci:enabledscript>
										<sci:legalval selected="true">True</sci:legalval>
										<sci:legalval>False</sci:legalval>
									</sci:arg>
									<sci:arg name="Process Pseudo Stereo Atoms" type="BoolType" required="false" visibility="visible" multi="false">
										<sci:help>Whether or not to include pseudo stereo atoms not marked with up or down bond wedges (unknown pseudo stereo) when doing &quot;StandardizeStereo&quot; or &quot;SetStereoFromCoordinates&quot;. </sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;SetStereoFromCoordinates&apos;) or
contains(parameter(&apos;Action&apos;), &apos;StandardizeStereo&apos;)</sci:enabledscript>
										<sci:legalval selected="true">True</sci:legalval>
										<sci:legalval>False</sci:legalval>
									</sci:arg>
									<sci:arg name="Preserve Stereo Marks On" type="StringType" required="false" visibility="visible" multi="true">
										<sci:help>Allow wedge bonds on certain atoms with perceived SP2 hybridization:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Allenes&lt;/b&gt;: Carbon atoms at the end of allene groups.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Restricted Biphenyls&lt;/b&gt;:Atoms at the ortho positions of geometrically restricted biphenyl or biaryl rings.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Conjugated SP2 Nitrogens&lt;/b&gt;:Nitrogen atoms with three single bonds which are perceived to be SP2 because of conjugation with neighboring groups.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Uncharged Tetrahedral Nitrogens&lt;/b&gt;: Normally Pipeline Pilot only recognizes Nitrogen as a tetrahedral stereocenter when it has a positive charge and four heavy attachments. Selecting this parameter will bypass this restriction and mark other Nitrogen stereocenters (such as Nitrogen atoms with three single bonds) as bad only if they fail the check of ambiguous wedge-bond geometry.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;StandardizeStereo&apos;)</sci:enabledscript>
										<sci:legalval selected="true">Allenes</sci:legalval>
										<sci:legalval selected="true">Restricted Biphenyls</sci:legalval>
										<sci:legalval>Conjugated SP2 Nitrogens</sci:legalval>
										<sci:legalval>Uncharged Tetrahedral Nitrogens</sci:legalval>
									</sci:arg>
									<sci:arg name="Invert Wedge Bond When Changing Direction" type="BoolType" required="false" visibility="visible" multi="false">
										<sci:help>This parameter controls whether or not to invert the bond stereo (up or down) when changing the direction of the wedge bond by selecting &quot;FixDirectionOfWedgeBonds&quot; in the &lt;i&gt;Action&lt;/i&gt; parameter.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;FixDirectionOfWedgeBonds&apos;)</sci:enabledscript>
										<sci:legalval selected="true">True</sci:legalval>
										<sci:legalval>False</sci:legalval>
									</sci:arg>
									<sci:arg name="Remove Explicit Valences" type="BoolType" required="false" visibility="visible" multi="false">
										<sci:help>Remove explicit valence values from atoms when clearing query infomation</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;ClearQueryInfo&apos;)</sci:enabledscript>
										<sci:legalval selected="true">True</sci:legalval>
										<sci:legalval>False</sci:legalval>
									</sci:arg>
									<sci:arg name="Track Actions Taken" type="BoolType" required="false" visibility="visible" multi="false">
										<sci:help>When enabled, this will keep track of which actions resulted in changes to the input molecule.  Actions that result in changes will be listed in a property called &lt;b&gt;Standardize_Actions_Taken&lt;/b&gt;.</sci:help>
										<sci:legalval>True</sci:legalval>
										<sci:legalval selected="true">False</sci:legalval>
									</sci:arg>
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval>ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="Standardize Ionizable Groups" type="BoolType" required="false" visibility="nevershow" multi="false">
										<sci:help>Transform ionizable groups such as sulphates, phosphates and guanidiniums to a standard form.</sci:help>
										<sci:enabledscript>contains(parameter(&apos;Action&apos;), &apos;StandardizeCharges&apos;)</sci:enabledscript>
										<sci:legalval>True</sci:legalval>
										<sci:legalval selected="true">False</sci:legalval>
									</sci:arg>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/chemistry</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Tue Jan 24 15:34:13 2017</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>Standardize Molecule</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>COMPONENTNODE</sci:value>
									</sci:arg>
									<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The component this component is based upon.</sci:help>
										<sci:value>Standardize Charges</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{EFEA1A46-A6DB-4DB9-A5A9-C7F3D2ADFDE2}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>954 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Applies selected predefined actions to input molecules such as standardizing charges or stereo, or the clearing of various attributes</sci:value>
										<sci:value>&lt;p&gt;One or more actions can be applied to each molecule to standardize the way molecules are presented to downstream components. See help text on &lt;i&gt;Action&lt;/i&gt; for a list and short description of all the available standardization actions.
&lt;p&gt;
Standardization is important when comparing molecular libraries from different sources. If different rules were used for structural representation when creating these libraries, a straight comparison would yield incorrect results. The options below allow you to apply a consistent set of rules to structures before comparing them.
&lt;p&gt;
</sci:value>
										<sci:value>Molecule</sci:value>
										<sci:value/>
										<sci:value>Molecule</sci:value>
										<sci:value>Transformed molecules </sci:value>
										<sci:value>None</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The server version when this component was registered</sci:help>
										<sci:value>18.1.0.1362</sci:value>
									</sci:arg>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>3</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Chemistry\Data Access and Manipulation\Manipulators\Standardize Molecule</sci:value>
									</sci:arg>
								</sci:component>
							</sci:data>
							<sci:data object="SciTegic.StripSalts.1">
								<sci:component name="Strip Salts" version="2">
									<sci:arg name="Salt Files" type="GroupType" required="false" visibility="visible" multi="false" expanded="true">
										<sci:member>Scitegic Salts</sci:member>
										<sci:member>User Salts</sci:member>
									</sci:arg>
									<sci:arg name="Scitegic Salts" type="URLType" required="false" visibility="visible" multi="false">
										<sci:help>File that contains the default salt queries</sci:help>
										<sci:value>data\Salts\Scitegic\Salts.sd</sci:value>
									</sci:arg>
									<sci:arg name="User Salts" type="URLType" required="false" visibility="visible" multi="false">
										<sci:help>File containing user-defined salt queries</sci:help>
									</sci:arg>
									<sci:arg name="Output SMILES of Identified Salts" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>Whether or not to output the SMILES strings of the salts found in the molecule in the property &lt;b&gt;SaltSmiles&lt;/b&gt;</sci:help>
										<sci:legalval>True</sci:legalval>
										<sci:legalval selected="true">False</sci:legalval>
									</sci:arg>
									<sci:arg name="Match Salt Queries Exactly" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
										<sci:help>Toggles whether to use stricter search options on the internal substructure mapper used to identify salt fragments from the input set of salt queries.

&lt;p&gt;&lt;br&gt;When not enabled, the default salt identification options are used (these are the search options used in older versions of the component):
&lt;ul&gt;
&lt;li&gt;NonChiral Queries Are Enantiomers&lt;/li&gt;
&lt;li&gt;Uncharged Atoms Can Map Charged Atoms&lt;/li&gt;
&lt;li&gt;Stereo Atoms Can Map Nonstereo Atoms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br&gt;When enabled, the following more strict options are used:
&lt;ul&gt;
&lt;li&gt;Chiral Queries Only Map Chiral Targets&lt;/li&gt;
&lt;li&gt;NonChiral Queries Are Enantiomers&lt;/li&gt;
&lt;li&gt;Interpret RAtoms Literally&lt;/li&gt;
&lt;li&gt;Interpret ZAtoms Literally&lt;/li&gt;
&lt;li&gt;Interpret StarAtoms Literally&lt;/li&gt;
&lt;li&gt;Check Bonds To RAtoms&lt;/li&gt;
&lt;li&gt;Match Cis Trans Double Bonds&lt;/li&gt;
&lt;li&gt;Marked Isotopes Only Map Marked Isotopes&lt;/li&gt;
&lt;li&gt;Unmarked Isotopes Only Map Unmarked Isotopes&lt;/li&gt;
&lt;/ul&gt;

</sci:help>
										<sci:legalval>True</sci:legalval>
										<sci:legalval selected="true">False</sci:legalval>
									</sci:arg>
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval>ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The component this component is based upon.</sci:help>
										<sci:value>Substructure Map</sci:value>
									</sci:arg>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/chemistry</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Tue Feb 22 10:45:16 2011</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>Strip Salts</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>COMPONENTNODE</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{1A8DDD51-D1AE-45d9-823B-80E81B7BCAA6}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>1242 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Finds and removes salt fragments from the incoming molecules</sci:value>
										<sci:value>&lt;p&gt;Salt fragments in the input molecules are identified using supplied salt queries and removed.  The default salt queries are specified by the &lt;i&gt;Scitegic Salts&lt;/i&gt; parameter and are contained in the file data/Salts/Scitegic/Salts.sd.&lt;/p&gt;
&lt;p&gt;&lt;i&gt;User Salts&lt;/i&gt; allows users to add their own salt queries by specifying the file or files containing them. Queries can be defined in either mol format (.mol, .sd, .sdf extension) or SMARTS (.sma extension).&lt;/p&gt;
&lt;p&gt;
When salts are identified and removed, the property &lt;b&gt;RemovedSalts&lt;/b&gt; is defined for the molecule. This array property contains the names of the removed salts. If the same salt fragment was present &lt;i&gt;N&lt;/i&gt; times, its name appears &lt;i&gt;N&lt;/i&gt; times in the array. 
&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only molecules consisting of more than one fragment are considered for salt removal.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To remove salt fragments specifying the salt queries in the input stream instead of reading them from a file, use &lt;a href=&quot;javascript:DoLink(&apos;{D79E4721-C1EE-4c68-9492-7B5720E4652D}&apos;)&quot;&gt;Strip Salts from Tag&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To only identify (and not remove) salt fragments, use &lt;a href=&quot;javascript:DoLink(&apos;{65582FDD-27E4-442f-BED7-71A254321894}&apos;)&quot;&gt;Identify Salts&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
										<sci:value>Molecule</sci:value>
										<sci:value/>
										<sci:value>Molecule</sci:value>
										<sci:value>Molecules with salts removed</sci:value>
										<sci:value>None</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The server version when this component was registered</sci:help>
										<sci:value>8.4.5.17</sci:value>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>4</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Chemistry\Data Access and Manipulation\Manipulators\Salts\Strip Salts</sci:value>
									</sci:arg>
								</sci:component>
							</sci:data>
							<sci:data object="SciTegic.CalculateSmiles.1">
								<sci:component name="Canonical Smiles" version="2">
									<sci:arg name="Output" type="StringType" required="false" visibility="visible" multi="true">
										<sci:help>&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SMILES&lt;/b&gt; is a non-canonical representation for the molecule. (This is very fast to calculate compared to Canonical_SMILES.)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Canonical_SMILES&lt;/b&gt; is the representation that can be compared for identicality.&lt;/li&gt;
&lt;/ul&gt;

&lt;i&gt;Output&lt;/i&gt; properties can be calculated &quot;on demand&quot; by simply using their names within a PilotScript expression or as the parameter value to many parameters that require a property name.</sci:help>
										<sci:legalval type="StringType" selected="true">Canonical_Smiles</sci:legalval>
										<sci:legalval type="StringType">Smiles</sci:legalval>
									</sci:arg>
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval>ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/chemistry</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Fri Apr 08 13:57:30 2011</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>Canonical Smiles</sci:value>
									</sci:arg>
									<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The component this component is based upon.</sci:help>
										<sci:value>Canonical Smiles</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>CALCULATORNODE</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{0C60C40A-5189-42DA-A3C0-4EA44BC27D15}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>1530 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Calculates a SMILES or canonical SMILES representation of the input molecule</sci:value>
										<sci:value>&lt;p&gt;SMILES is a terse textual representation of molecular data.  Canonical SMILES is a form of SMILES that is independent of how the molecule is drawn and so can be used to compare whether two molecules are identical.&lt;/P&gt;

Either or both of the following two properties can be calculated:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;SMILES&lt;/b&gt; is a non-canonical representation for the molecule. (This is very fast to calculate compared to Canonical_SMILES.)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Canonical_SMILES&lt;/b&gt; is the representation that can be compared for identicality.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;Note:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;The canonicalization algorithm is SciTegic&apos;s; while it is derived from the published Daylight algorithm, however, lack of complete documentation of their procedure means that it will not necessarily give identical results. Compare two SMILES for identity only when having both canonicalized by the same method. &lt;/li&gt;
&lt;li&gt;Stereo markings are only added to the SMILES when stereo is explicitly set on a stereocenter.  This is often not the case for 3D molecules where the stereo is implied from the coordinates of the attached atoms and not from explicit stereo markings.  To add stereo markings from coordinates use the &lt;i&gt;SetStereoFromCoordinates&lt;/i&gt; action in the &lt;a href=&quot;javascript:DoLink(&apos;{EFEA1A46-A6DB-4DB9-A5A9-C7F3D2ADFDE2}&apos;)&quot;&gt;Standardize Molecule&lt;/a&gt; component.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;You can create a SMILES string as text under any property name using &lt;a href=&quot;javascript:DoLink(&apos;{0C60C40A-5189-42DA-A3C0-4EA44BFF7D15}&apos;)&quot;&gt;Molecule to SMILES&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can convert a SMILES string into a molecule using &lt;a href=&quot;javascript:DoLink(&apos;{AC8262DA-E648-4D24-9CD1-D731A8F53F9D}&apos;)&quot;&gt;Molecule from SMILES&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For an alternative way of generating a canonical string representation, see &lt;a href=&quot;javascript:DoLink(&apos;{EB62CC30-BC6A-4d5f-8618-3EB9AF611C69}&apos;)&quot;&gt;Molecule to InChI&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</sci:value>
										<sci:value>Molecule</sci:value>
										<sci:value/>
										<sci:value>Molecule</sci:value>
										<sci:value>Records augmented with a text property containing the canonical SMILES or SMILES</sci:value>
										<sci:value>None</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The server version when this component was registered</sci:help>
										<sci:value>8.4.5.28</sci:value>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>5</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Chemistry\Property Calculators\Structural\Canonical Smiles</sci:value>
									</sci:arg>
								</sci:component>
								<sci:proplist>
									<sci:propval name="Canonical_Smiles|Category">Molecular Formats</sci:propval>
									<sci:propval name="Smiles|Category">Molecular Formats</sci:propval>
								</sci:proplist>
							</sci:data>
							<sci:data object="SciTegic.PropertyFunctions.1">
								<sci:component name="Rename Properties" version="2">
									<sci:arg name="Original Property Names" type="PropertyNameType" required="true" visibility="visible" multi="true">
										<sci:help>An array of property names to rename. The new name will be the corresponding name in &lt;i&gt;New Property Names&lt;i&gt;.</sci:help>
										<sci:value>Canonical_Smiles</sci:value>
									</sci:arg>
									<sci:arg name="New Property Names" type="PropertyNameType" required="true" visibility="visible" multi="true">
										<sci:help>An array of the new property names. The original name will be the corresponding name in &lt;i&gt;Original Property Names&lt;i&gt;.</sci:help>
										<sci:value>canonical_smiles</sci:value>
									</sci:arg>
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval>ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>Custom Error Message</sci:help>
									</sci:arg>
									<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:help>the action to perform</sci:help>
										<sci:value>RenameProperties</sci:value>
									</sci:arg>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/generic</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Tue Feb 28 12:30:36 2017</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
										<sci:help>Automatically update the component display name when the &quot;Destination&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
										<sci:value>
#orig := Parameter(&apos;Original Property Names&apos;);
#new := Parameter(&apos;New Property Names&apos;);
if (numvalues(#orig) == 0 OR #orig[1] eq &quot;&quot; OR numvalues(#new) == 0 OR #new[1] eq &quot;&quot;) then
	&quot;&quot;;
else
  #display := &apos;Rename &apos; . #orig[1] . &apos; to &apos; . #new[1];
  if (numvalues(#orig) &gt; 1) then
    #display .= &apos;, ...&apos;;
  end if;
  #display;
end if;
</sci:value>
									</sci:arg>
									<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
										<sci:help>Protocol AutoLayout</sci:help>
										<sci:value>true</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>EXPRESSIONNODE</sci:value>
									</sci:arg>
									<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
										<sci:help>Component Revision</sci:help>
										<sci:value>100</sci:value>
									</sci:arg>
									<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The component this component is based upon.</sci:help>
										<sci:value>SubProtocol</sci:value>
									</sci:arg>
									<sci:arg name="ProtocolScale" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Protocol Scale</sci:help>
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>1818 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{04496ABE-C1D2-43D2-83D4-35AC9FC8D501}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Rename the specified properties</sci:value>
										<sci:value>&lt;p&gt;For each incoming data record, rename the properties found in the &lt;i&gt;Original Property Names&lt;/i&gt; list to the names provided in &lt;i&gt;New Property Names&lt;/i&gt;.

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To remove specified properties from each data record, use 
&lt;a href=&quot;javascript:DoLink(&apos;{C2ED35FF-5397-4877-AADB-10F1A15D60E2}&apos;)&quot;&gt;Remove Properties&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</sci:value>
										<sci:value>Generic</sci:value>
										<sci:value/>
										<sci:value>Generic</sci:value>
										<sci:value>With only the specified properties remaining</sci:value>
										<sci:value>None</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The server version when this component was registered</sci:help>
										<sci:value>18.1.0.1376</sci:value>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
										<sci:help>By Ref</sci:help>
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>Protocol Sticky Notes</sci:help>
									</sci:arg>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>6</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Data Access and Manipulation\Property Manipulators\Rename Properties</sci:value>
									</sci:arg>
								</sci:component>
							</sci:data>
							<sci:data object="SciTegic.PropertyFunctions.1">
								<sci:component name="Remove Properties" version="2">
									<sci:arg name="PropertyList" type="PropertyNameType" required="true" visibility="visible" multi="true">
										<sci:help>The names of properties to remove from each data record entering the component</sci:help>
										<sci:value>RemovedSalts</sci:value>
									</sci:arg>
									<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
										<sci:help>Component Attributes</sci:help>
										<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
										<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
										<sci:legalval>ComponentReturnsFail</sci:legalval>
										<sci:legalval>ComponentRunsLocal</sci:legalval>
									</sci:arg>
									<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
										<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
										<sci:legalval selected="true">Halt</sci:legalval>
										<sci:legalval>Fail</sci:legalval>
										<sci:legalval>Pass</sci:legalval>
									</sci:arg>
									<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>Custom Error Message</sci:help>
									</sci:arg>
									<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:help>the action to perform</sci:help>
										<sci:value>Remove</sci:value>
									</sci:arg>
									<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The user who registered this component.</sci:help>
										<sci:value>scitegic/generic</sci:value>
									</sci:arg>
									<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The date this component was registered.</sci:help>
										<sci:value>Tue Sep 13 07:18:43 2016</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
										<sci:help>Automatically update the component display name when the &quot;PropertyList&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
										<sci:value>#propertyList := Parameter(&apos;PropertyList&apos;);
#displayName := &apos;&apos;;
for #i in 1 .. numvalues(#propertyList) loop
  #prop := trim(#propertyList[#i]);
  if (strlength(#prop) &gt; 0) then
    if (strlength(#displayName) &gt; 0) then
	  #displayName .= &apos;, &apos;;
	end if;
    #displayName .= #prop;
  end if;
end loop;
if(strlength(#displayName) &gt; 0) then		
	&apos;Remove &apos; . #displayName;
else
	&quot;&quot;;
end if;</sci:value>
									</sci:arg>
									<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
										<sci:help>Protocol AutoLayout</sci:help>
										<sci:value>true</sci:value>
									</sci:arg>
									<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
										<sci:value>EXPRESSIONNODE</sci:value>
									</sci:arg>
									<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
										<sci:help>Component Revision</sci:help>
										<sci:value>100</sci:value>
									</sci:arg>
									<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The component this component is based upon.</sci:help>
										<sci:value>SubProtocol</sci:value>
									</sci:arg>
									<sci:arg name="ProtocolScale" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Protocol Scale</sci:help>
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>2106 -95</sci:value>
									</sci:arg>
									<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:value>{C2ED35FF-5397-4877-AADB-10F1A15D60E2}</sci:value>
									</sci:arg>
									<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
										<sci:value>100</sci:value>
										<sci:value>Removes the specified properties</sci:value>
										<sci:value>For each data record that enters the component, the properties specified by &lt;i&gt;PropertyList&lt;/i&gt; are removed from the  record. 

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;To keep only a few properties from a long list, it may be more efficient to instead use &lt;a href=&quot;javascript:DoLink(&apos;{456195EF-9708-4367-B3DD-21EBF3796604}&apos;)&quot;&gt;Keep Properties&lt;/a&gt;.&lt;/p&gt;</sci:value>
										<sci:value>Generic</sci:value>
										<sci:value/>
										<sci:value>Generic</sci:value>
										<sci:value>Data records with the specified properties removed</sci:value>
										<sci:value>None</sci:value>
										<sci:value/>
									</sci:arg>
									<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The server version when this component was registered</sci:help>
										<sci:value>17.1.0.119</sci:value>
									</sci:arg>
									<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
									<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
										<sci:help>By Ref</sci:help>
										<sci:value>0</sci:value>
									</sci:arg>
									<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>Protocol Sticky Notes</sci:help>
									</sci:arg>
									<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
										<sci:help>Local Component Identifier</sci:help>
										<sci:value>7</sci:value>
									</sci:arg>
									<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
										<sci:help>The original path within the database of this component.</sci:help>
										<sci:value>Components\Data Access and Manipulation\Property Manipulators\Remove Properties</sci:value>
									</sci:arg>
								</sci:component>
							</sci:data>
							<sci:connectid from="0" to="1" type="true"/>
							<sci:connectid from="1" to="2" type="true"/>
							<sci:connectid from="2" to="3" type="true"/>
							<sci:connectid from="3" to="4" type="true"/>
							<sci:connectid from="4" to="5" type="true"/>
							<sci:connectid from="5" to="6" type="true"/>
							<sci:connectid from="6" to="7" type="true"/>
						</sci:protocol>
					</sci:data>
					<sci:connectid from="0" to="7" type="true"/>
					<sci:connectid from="7" to="1" type="true"/>
					<sci:connectid from="1" to="2" type="true"/>
					<sci:connectid from="2" to="3" type="true"/>
					<sci:connectid from="3" to="4" type="true"/>
					<sci:connectid from="4" to="5" type="true"/>
					<sci:connectid from="5" to="6" type="true"/>
				</sci:protocol>
			</sci:data>
			<sci:data object="SciTegic.RangeScreen.1">
				<sci:component name="Range Filter" version="2">
					<sci:arg name="List" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>A list of which data records to pass:
  e.g.,  1,3-5,7,10-11
     will pass the first, third, fourth, fifth and so on.</sci:help>
						<sci:value>1-187000968</sci:value>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Custom Error Message</sci:help>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Fri Dec 13 12:38:32 2002</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
						<sci:help>Automatically update the component display name when the &quot;List&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
						<sci:value>if (strlength(parameter(&apos;List&apos;, 2)) &gt; 0) then
	&quot;Filter range &quot; . parameter(&apos;List&apos;, 2);
else
	&quot;&quot;;
end if;</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>FILTERNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{0C71D911-BF35-4A1B-8B2C-B9A586BD39F3}</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Range Filter</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>954 -1545</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Passes data records within a specified range based on the order in which they arrive</sci:value>
						<sci:value>&lt;p&gt;Data records are numbered consecutively (from 1) as they arrive at the component.  The record numbers specified by &lt;i&gt;List&lt;/i&gt; are sent out the Pass port. Records not specified are sent out the Fail port.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;List&lt;/i&gt; items need to be entered as comma-separated values. &lt;i&gt;List&lt;/i&gt; can accept single item indices or ranges (such as &quot;1-5,7,9,13-15&quot;).&lt;/p&gt; 

</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value>Data records whose indices match the specified list</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value>Data records whose indices do not match the specified list</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>21</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Data Filters\Range Filter</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.PropertyFunctions.1">
				<sci:component name="First Occurrence Filter" version="2">
					<sci:arg name="KeyProperty" type="PropertyNameType" required="true" visibility="visible" multi="true">
						<sci:help>Name of the property holding values to keep only one of.  If you give more than one key property, then all values must have occurred at the same time on some other record for it to be rejected.</sci:help>
						<sci:member>CaseSensitive</sci:member>
						<sci:value>canonical_smiles</sci:value>
					</sci:arg>
					<sci:arg name="CaseSensitive" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>Whether to perform the comparison as case-sensitive or case-insensitive 
strings</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Custom Error Message</sci:help>
					</sci:arg>
					<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:help>the action to perform</sci:help>
						<sci:value>FirstOccurrence</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Thu Jan 16 14:54:51 2003</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>First Occurrence
Filter</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Expression Filter</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>FILTERNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{D2EC3EBB-CD17-4093-93A9-D9FB603DE083}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>1242 -1545</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Passes data records for which the values of specified properties have not been seen on any previous record

</sci:value>
						<sci:value>&lt;p&gt;For each incoming data record, the value of the property specified by &lt;i&gt;KeyProperty&lt;/i&gt; is checked.  If the value has not been seen in earlier records, the record is sent out the Pass port.  Otherwise it is sent out the Fail port.&lt;/p&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To filter for data records with property values that occur once and only once in the input stream, use &lt;a href=&quot;javascript:DoLink(&apos;{2FD9ECF2-C47F-4A20-AC72-5F352E08FC98}&apos;)&quot;&gt;Unique Filter&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value>Data records with the first occurrence of a value of the given property.</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value>Data records with the second and subsequent occurrences of a value of the given property.</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>22</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Data Filters\First Occurrence Filter</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.PropertyFunctions.1">
				<sci:component name="First Occurrence Filter" version="2">
					<sci:arg name="KeyProperty" type="PropertyNameType" required="true" visibility="visible" multi="true">
						<sci:help>Name of the property holding values to keep only one of.  If you give more than one key property, then all values must have occurred at the same time on some other record for it to be rejected.</sci:help>
						<sci:member>CaseSensitive</sci:member>
						<sci:value>canonical_smiles</sci:value>
						<sci:value>Aff_SHP1_Pred</sci:value>
						<sci:value>Aff_SHP2_Pred</sci:value>
					</sci:arg>
					<sci:arg name="CaseSensitive" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>Whether to perform the comparison as case-sensitive or case-insensitive 
strings</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Custom Error Message</sci:help>
					</sci:arg>
					<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:help>the action to perform</sci:help>
						<sci:value>FirstOccurrence</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Thu Jan 16 14:54:51 2003</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>First Occurrence
Filter</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Expression Filter</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>FILTERNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{D2EC3EBB-CD17-4093-93A9-D9FB603DE083}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>954 -1920</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Passes data records for which the values of specified properties have not been seen on any previous record

</sci:value>
						<sci:value>&lt;p&gt;For each incoming data record, the value of the property specified by &lt;i&gt;KeyProperty&lt;/i&gt; is checked.  If the value has not been seen in earlier records, the record is sent out the Pass port.  Otherwise it is sent out the Fail port.&lt;/p&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To filter for data records with property values that occur once and only once in the input stream, use &lt;a href=&quot;javascript:DoLink(&apos;{2FD9ECF2-C47F-4A20-AC72-5F352E08FC98}&apos;)&quot;&gt;Unique Filter&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value>Data records with the first occurrence of a value of the given property.</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value>Data records with the second and subsequent occurrences of a value of the given property.</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>23</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Data Filters\First Occurrence Filter</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.DataCacheIO.1">
				<sci:component name="Cache Writer" version="2">
					<sci:arg name="CacheID" type="StringType" required="true" visibility="visible" multi="false" expanded="true">
						<sci:help>The name of the cache to write, for example: A, 1234 or MyCache.  To create a temporary cacheID use the &lt;a href=&quot;javascript:DoLink(&apos;{B91EE521-C028-46BE-89A4-51CDE9877589}&apos;)&quot;&gt;Create Temporary CacheIDs&lt;/a&gt; component.
</sci:help>
						<sci:member>Maximum</sci:member>
						<sci:member>Append</sci:member>
						<sci:member>Scope</sci:member>
						<sci:value>tmp</sci:value>
					</sci:arg>
					<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
						<sci:help>The maximum number of data records to write to the cache.</sci:help>
					</sci:arg>
					<sci:arg name="Append" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>If True, append to a currently-existing cache if possible; if False, clear any current contents of the cache</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="Scope" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>The scope of the cache determines the length of time the cache exists and 
the visibility of the cache to other jobs and users. &lt;I&gt;Job Only&lt;/I&gt; creates a cache that is visible
only to components in the currently-running protocol, and which is deleted when the protocol finishes.
&lt;I&gt;User Only&lt;/I&gt; creates a cache that is visible to components in any protocol a particular user runs;  
&lt;I&gt;All Users&lt;/I&gt; creates a cache that is visible to any user on the Pipeline Pilot server. 
&lt;P&gt;Each scope has its own namespace, so you have to 
specify both the &lt;i&gt;CacheID&lt;/i&gt; and the &lt;i&gt;Scope&lt;/i&gt; to fully determine a particular cache.&lt;/P&gt;
&lt;P&gt;Since the caches created with scopes &lt;I&gt;User Only&lt;/I&gt; and &lt;I&gt;All Users&lt;/I&gt;
may be accessed by multiple jobs, you should use caution, as problems may arise if two jobs try to write to 
the same shared cache at once. Also, to save disk space, you are responsible for deleting these caches
when finished, using the &lt;I&gt;Delete Cache&lt;/I&gt; component. &lt;/P&gt;
			</sci:help>
						<sci:legalval selected="true">Job Only</sci:legalval>
						<sci:legalval>User Only</sci:legalval>
						<sci:legalval>All Users</sci:legalval>
					</sci:arg>
					<sci:arg name="Create Index for Join" type="BoolType" required="false" visibility="visible" multi="false" expanded="true">
						<sci:help>If set to True, creates an index for the cache that can be used by subsequent &lt;a href=&quot;javascript:DoLink(&apos;{BDEEEC41-E62B-4FDE-B0D0-8B9C96CA2497}&apos;)&quot;&gt;Join Data from Cache&lt;/a&gt; components.  As long as the later Join components use identical settings, the created index will greatly improve the performance of the join.  When set to true, you will also need to update &lt;i&gt;JoinUsing&lt;/i&gt;, &lt;i&gt;JoinUsingListType&lt;/i&gt;, &lt;i&gt;JoinPropertyType&lt;/i&gt;, and &lt;i&gt;IgnoreCase&lt;/i&gt; to match your Join component.</sci:help>
						<sci:member>JoinUsing</sci:member>
						<sci:member>IgnoreCase</sci:member>
						<sci:member>JoinPropertyType</sci:member>
						<sci:member>JoinUsingListType</sci:member>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="JoinUsing" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>The name of the property or properties to index for use by &lt;a href=&quot;javascript:DoLink(&apos;{BDEEEC41-E62B-4FDE-B0D0-8B9C96CA2497}&apos;)&quot;&gt;Join Data from Cache&lt;/a&gt; components.  This parameter must match the identically named parameter on the Join component in order to benefit from the created index.</sci:help>
						<sci:validscript>SetInvalidDetails(&apos;This parameter is required.&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
						<sci:enabledscript>Parameter(&apos;Create Index for Join&apos;);</sci:enabledscript>
						<sci:value>accession</sci:value>
					</sci:arg>
					<sci:arg name="JoinUsingListType" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;Indicates how &lt;i&gt;JoinUsing&lt;/i&gt; properties are interpreted for creating a cache index when more than one property is listed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;UseFirstDefinedValue&lt;/i&gt;: The join will use only the first property in the list with a defined value for a record.
&lt;li&gt;&lt;i&gt;UseAllValues&lt;/i&gt;: The join will use the concatentation of the values of all properties listed; a match occurs only when records share the same value for all the properties.
&lt;/ul&gt;
&lt;p&gt;This parameter must match the identically named parameter on the Join component in order to benefit from the created index.&lt;/p&gt;</sci:help>
						<sci:enabledscript>Parameter(&apos;Create Index for Join&apos;);</sci:enabledscript>
						<sci:legalval>UseFirstDefinedValue</sci:legalval>
						<sci:legalval selected="true">UseAllValues</sci:legalval>
					</sci:arg>
					<sci:arg name="JoinPropertyType" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>The data type of the &lt;i&gt;JoinUsing&lt;/i&gt; property. This parameter must match the identically named parameter on the Join component in order to benefit from the created index.</sci:help>
						<sci:enabledscript>Parameter(&apos;Create Index for Join&apos;);</sci:enabledscript>
						<sci:legalval>IsNumeric</sci:legalval>
						<sci:legalval selected="true">IsText</sci:legalval>
						<sci:legalval>IsDate</sci:legalval>
					</sci:arg>
					<sci:arg name="IgnoreCase" type="BoolType" required="false" visibility="visible" multi="false">
						<sci:help>Consider lower-case and upper-case letters as equivalent when determining the identity of &lt;i&gt;JoinUsing&lt;/i&gt; property values.  This parameter must match the identically named parameter on the Join component in order to benefit from the created index.</sci:help>
						<sci:enabledscript>Parameter(&apos;Create Index for Join&apos;);</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false">
						<sci:help>Additional parameters to control the component behavior.</sci:help>
						<sci:member>Write Globals</sci:member>
						<sci:member>Enable Compression</sci:member>
					</sci:arg>
					<sci:arg name="Write Globals" type="StringType" required="false" visibility="visible" multi="true">
						<sci:help>&lt;p&gt;Specifies which globals, if any, are written into the cache.&lt;/p&gt;
&lt;p&gt;The value is an array of top-level global names or global nodes specified using XPath notation. Note that node names should end with a forward slash (/).&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="Enable Compression" type="BoolType" required="false" visibility="visible" multi="false" expanded="true" legalvalsenforced="false">
						<sci:help>&lt;p&gt;Specifies if compression of the data should be enabled whenever available.&lt;/p&gt;
&lt;b&gt;Warning:&lt;b&gt; Due to the resulting larger size of the cache files when using uncompressed files, this option should typically only be used for smaller data sets.</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval>ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="CacheCategory" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The cache type, that determines its folder location within the job.
               </sci:help>
					</sci:arg>
					<sci:arg name="Mode" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:help>Specifies the action of this component:

 - Writer: The component writes data records to a new cache.
 - Reader: The component reads data records from a pre-existing, completed cache.
 - Writer/Reader: The component writes data out to a cache and then reads it in again to generate new records.
               </sci:help>
						<sci:legalval selected="true">Writer</sci:legalval>
						<sci:legalval>Reader</sci:legalval>
						<sci:legalval>Writer/Reader</sci:legalval>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Wed Oct 03 14:48:02 2012</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>Cache Writer</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>1242 -1920</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>DATABASENODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{674E3781-33EA-42BB-9099-49CB4C3D08E6}</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Cache Writer</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Writes data records to a named cache</sci:value>
						<sci:value>&lt;p&gt;A data cache is place where you can temporarily store data records without losing information.  Use &lt;i&gt;CacheID&lt;/i&gt; to specify the name of the cache.  A cache can contain records of different types.&lt;/p&gt;

&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To avoid clashes with other cache names, you can use the &lt;a href=&quot;javascript:DoLink(&apos;{B91EE521-C028-46BE-89A4-51CDE9877589}&apos;)&quot;&gt;Create Temporary CacheIDs&lt;/a&gt; component to obtain a global with a unique cacheID.  For example, you could have a temporary cacheID identified by MYCACHE and set &lt;i&gt;CacheID&lt;/i&gt; to $(MYCACHE).&lt;/li&gt;
&lt;li&gt;Typically, a cache is scoped to only be visible to component in the currently-running job.  To create caches that outlive a job, and may be seen by other users, use the &lt;I&gt;Scope&lt;/I&gt; parameter.&lt;/li&gt;
&lt;li&gt;Caches can be used with the &lt;a href=&quot;javascript:DoLink(&apos;{BDEEEC41-E62B-4FDE-B0D0-8B9C96CA2497}&apos;)&quot;&gt;Join Data from Cache&lt;/a&gt; component to add properties to a separate data stream.  To improve the performance of the join, the cache can be indexed during creation by using the &lt;i&gt;Create Index for Join&lt;/i&gt; parameter.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To retrieve data from a cache, use &lt;a href=&quot;javascript:DoLink(&apos;{704E3781-33EA-42BB-9099-05B44C3D08E6}&apos;)&quot;&gt;Cache Reader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To join against a cache, use &lt;a href=&quot;javascript:DoLink(&apos;{BDEEEC41-E62B-4FDE-B0D0-8B9C96CA2497}&apos;)&quot;&gt;Join Data from Cache&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To delete a cache, use &lt;a href=&quot;javascript:DoLink(&apos;{704E3781-33EA-42BB-9088-05B44C3D08E6}&apos;)&quot;&gt;Delete Cache&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>9.0.0.100</sci:value>
					</sci:arg>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>24</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\File Writers\Cache Writer</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.MDLSDReader.1">
				<sci:component name="SD Reader" version="2">
					<sci:arg name="Source" type="URLType" required="true" visibility="visible" multi="false" expanded="true">
						<sci:help>The file or URL source to read</sci:help>
						<sci:member>Maximum</sci:member>
						<sci:member>SourceTag</sci:member>
						<sci:member>Keep Properties</sci:member>
						<sci:member>UTF-8 Auto Detect</sci:member>
						<sci:value>$(UserDir)/PP/Predictions/ChemDivPredictionsBasicModel.sd.gz</sci:value>
					</sci:arg>
					<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
						<sci:help>The maximum number of data records to read (all if value is empty)</sci:help>
					</sci:arg>
					<sci:arg name="SourceTag" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;The type of tag to create to identify the source of data records. A property called 
&lt;b&gt;SourceTag&lt;/b&gt; is created and holds the value indicated.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;b&gt;None&lt;/b&gt;: 
No SourceTag property is created and any existing ones are removed.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Filename&lt;/b&gt;: 
The name of the file read.&lt;/li&gt;&lt;li&gt;&lt;b&gt;FilenameAndExtension&lt;/b&gt;: The name of the 
file read with its file extension.&lt;/li&gt;&lt;li&gt;&lt;b&gt;FullFilename&lt;/b&gt;: The name of the 
file read, including the directory path.&lt;/li&gt;&lt;li&gt;&lt;b&gt;ZipFilename&lt;/b&gt;: When reading 
a compressed zip file, the filename within the compressed archive.&lt;/li&gt;&lt;li&gt;&lt;b&gt;Number&lt;/b&gt;: 
When multiple files are read in this component, they are numbered 1,2,3...&lt;/li&gt;&lt;li&gt;&lt;b&gt;Letter&lt;/b&gt;: 
When multiple files are read in this component, they are lettered A, B, C...&lt;/li&gt;&lt;li&gt;&lt;b&gt;KeepCurrent&lt;/b&gt;: 
Keeps the current value of SourceTag.&lt;/li&gt;&lt;/ul&gt;</sci:help>
						<sci:legalval selected="true">None</sci:legalval>
						<sci:legalval>Filename</sci:legalval>
						<sci:legalval>FilenameAndExtension</sci:legalval>
						<sci:legalval>FullFilename</sci:legalval>
						<sci:legalval>ZipFilename</sci:legalval>
						<sci:legalval>Number</sci:legalval>
						<sci:legalval>Letter</sci:legalval>
						<sci:legalval>KeepCurrent</sci:legalval>
					</sci:arg>
					<sci:arg name="Keep Properties" type="PropertyPreviewType" required="false" visibility="visible" multi="false">
						<sci:help>A list of properties the reader should retain for each data record that is output. If a value is not defined, retains all properties. If the parameter contains the value &quot;-&quot; (minus sign), properties are not retained.</sci:help>
					</sci:arg>
					<sci:arg name="UTF-8 Auto Detect" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false" uimpl="false">
						<sci:help>&lt;p&gt;UTF-8 is a type of character encoding used to represent international characters with multiple bytes whereas basic Latin characters remain as a single byte.  Files can be stored with a Byte Order Mark (BOM) to indicate that the type of character encoding.&lt;/p&gt;
&lt;p&gt;When reading files that do not have a BOM, this parameter allows the reader to attempt to automatically detect UTF-8 encodings and convert as needed.  However, be aware that automatic detection is not always reliable.  In some cases, valid text stored in different character encodings can appear to be valid UTF-8.  In these cases, the automatic detection will result in garbled text.  When this occurs, you can consider using the &lt;a href=&quot;javascript:DoLink(&apos;{B0B1B56C-3DF6-444C-BB78-B43211188F63}&apos;)&quot;&gt;Binary Reader&lt;/a&gt; to read the file, then converting using the Pilotscript function &lt;b&gt;ConvertBytesToString&lt;/b&gt;&lt;/p&gt;</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
						<sci:help>Contains less commonly used parameters</sci:help>
						<sci:member>ReadProperties</sci:member>
						<sci:member>PutNameInProperty</sci:member>
						<sci:member>ReadQueryInfo</sci:member>
						<sci:member>PutCommentInProperty</sci:member>
						<sci:member>SD Format Options</sci:member>
						<sci:member>Global Templates</sci:member>
					</sci:arg>
					<sci:arg name="SD Format Options" type="StringType" required="false" visibility="visible" multi="true">
						<sci:help>&lt;p&gt;Options available for the SD Reader:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Properties Can Contain $$$$:&lt;/b&gt;  By the CTFile standard, a property can contain a &apos;$$$$&apos;-line.  
Properties or data field values are terminated by a blank line.  Only then will the &apos;$$$$&apos;-line 
terminate the full data block.  Setting this option off will terminate the data block upon any read of 
a &apos;$$$$&apos;-line.  This option is available to provide compatibility with some 3rd Party SD files.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;One-space Lines Terminate Properties:&lt;/b&gt;  By the CTFile standard, properties or data fields values are 
terminated by a blank line. Selecting this option will terminate the data block when encountering a line 
containing a space as the only character in the line.  This option is available to provide compatibility 
with some 3rd Party SD files.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Unwrap Long Property Lines:&lt;/b&gt;  By the CTFile standard, lines in property fields cannot exceed 200 characters.  When this option is selected and a property line of exactly 200 characters is found, the newline character will be ignored and property string will continue on the next line.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Read Unknown Stereo Parity:&lt;/b&gt;  When selected, the SD Reader will use the &apos;Atom Parity&apos; value (parity of 
&apos;3&apos;) to mark unknown stereo centers in 3D mol files.  This will leave these atoms marked as 
&apos;unknown stereo&apos; and will not calculate the stereo from the coordinates.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Process Complex Data Header Lines:&lt;/b&gt; Data header lines are the lines in the SD format that precede the actual data. They can contain the data field name (enclosed in angular brackets &lt;&gt;), the data field number (as DTn), the external registry number (enclosed in parentheses), and other optional information. When this parameter is set to False, only the data field name is parsed and used to set the corresponding property name. All the other information in the line is ignored. When the parameter is set to true, all the information is parsed. The property name is set from either the field name in &lt;&gt; or the DTn. If both are present the field name takes priority and the DTn number is saved as an additional property named &lt;b&gt;FieldName#DTn&lt;/b&gt;. The external registry number is saved as &lt;b&gt;FieldName#ExtRegNum&lt;/b&gt; and any other information is saved as &lt;b&gt;FieldName#OtherDataFieldInfo&lt;/b&gt;. When the molecules are written to an SD file, the data header lines are reconstructed from these properties. The default state of this parameter is False, as parsing, preserving, and eventually writing all the information in the data header lines can be costly, specially for SD files with many data fields.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Convert From H2 And H+ Atom Types:&lt;/b&gt; &apos;H2&apos; and &apos;H+&apos; are two non-standard element types that can be assigned to atoms by the BIOVIA Draw sketcher. They represent unattached Hydrogen (a Hydrogen molecule) and charged Hydrogen (a proton), respectively. When this parameter is selected, these atom types are converted to standard hydrogen atoms upon reading, with charges of 0 for H2 and +1 for H+. Otherwise, these atoms are read and perceived as unknown atom types, with &apos;H2&apos; and &apos;H+&apos; as the atom labels.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Convert Radicals To Pi Systems:&lt;/b&gt; When selected, pi bonds will be perceived between adjacent atoms marked with radicals and any adjacent metal atom.  Once pi bonds are perceived, subsequent exports will represent the pi bonds using the V3000 format and one-to-many coordination bonds (type 9) unless the writer&apos;s &lt;i&gt;Convert Pi Systems To Radicals&lt;/i&gt; option is used to convert the pi systems back. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;Convert GEN+DAT to Polymer Repeat Units:&lt;/b&gt; When selected, this option will automatically convert input GEN sgroups with linked DAT sgroups having the special fieldname of &apos;rc&apos; and numeric or numeric range data internally into polymer repeat sgroups.  This usage is a special type of NONS (Non-Specific Structure) convention that was prototyped in previous releases.  Disabling this conversion will have a higher likelihood of producing a structure that can be registered into Direct databases. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;Always Keep Enhanced Stereo:&lt;/b&gt; Preserves any enhanced stereo collections that are read in from V3000 MOL file.  When disabled, stereo structures will be checked to see if they can be represented more simply using only the Chiral Flag.  That is, structures with only ABS centers can be represented without enhanced stereo by setting the Chiral Flag on and structures with all centers in a single AND group can be represented without enhanced stereo by setting the Chiral Flag off.  Enhanced stereo collections that do not fit into the above cases are always preserved.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
						<sci:legalval selected="true">Properties Can Contain $$$$</sci:legalval>
						<sci:legalval>One-space Lines Terminate Properties</sci:legalval>
						<sci:legalval selected="true">Unwrap Long Property Lines</sci:legalval>
						<sci:legalval>Read Unknown Stereo Parity</sci:legalval>
						<sci:legalval>Process Complex Data Header Lines</sci:legalval>
						<sci:legalval selected="true">Convert From H2 And H+ Atom Types</sci:legalval>
						<sci:legalval>Convert Radicals To Pi Systems</sci:legalval>
						<sci:legalval selected="true">Convert GEN+DAT to Polymer Repeat Units</sci:legalval>
						<sci:legalval>Always Keep Enhanced Stereo</sci:legalval>
					</sci:arg>
					<sci:arg name="ReadProperties" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>Select True to read the properties for each molecule (in addition to the structures)</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="ReadQueryInfo" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>If properties starting with &quot;QueryInfo&quot; are present, use them to set up query information on the atoms and bonds. (This is how, for example, SMARTS query information can be preserved when writing to an SD format file.) For molecules saved in MOL/SD format, this information only contains information that cannot be written out in the connection table.</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="PutNameInProperty" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>What to call the property that holds the name of each molecule</sci:help>
						<sci:value>Name</sci:value>
					</sci:arg>
					<sci:arg name="PutCommentInProperty" type="StringType" required="false" visibility="visible" multi="false" expanded="true">
						<sci:help>What to call the property that holds the comment associated with each molecule</sci:help>
					</sci:arg>
					<sci:arg name="Global Templates" type="URLType" required="false" visibility="visible" multi="false">
						<sci:help>V3000 SD or MOL files containing template definitions for amino acid, nucleic acid or other residues or monomers. These templates can then be refered to by molecules read by the SD reader.&lt;p&gt;
The default template file included in the Chemistry collection, &lt;i&gt;data\Direct\Direct_templates.mol&lt;/i&gt; contains definitions for 22 amino acids and 8 DNA and RNA templates.</sci:help>
						<sci:value>data\HELM\SCSRtemplates.mol</sci:value>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval>ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="HasConvertPiSystemOption" type="BoolType" required="false" visibility="nevershow" multi="false" legalvalsenforced="false">
						<sci:help>Hidden flag specifying the presence of the &quot;Convert Radicals To Pi Systems&quot; option.</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="AllowUnknownDoubleBondsFromCoordinates" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>According to the CTfile specifications, the cis/trans character of double bonds with bond stereo set to zero is determined from the coordinates. This parameter controls whether or not to assign unknown bond stereo to double bonds for which the stereo could not be determined from the coordinates, either because there are no coordinates or because of colinearity issues.  When the parameter is set to False and the stereo could not be determined, no specific stereo configuration is assigned to the double bond, but it is not marked as unknown stereo.</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/chemistry</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Wed Apr 06 11:41:13 2016</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>SD Reader</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>DOCUMENTNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{CA65B896-4FE6-4E3A-B884-DC16B53B8D26}</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>SD Reader</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>4</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>90 -2095</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Reads MOL (molecule CTAB) files and SD (structured data) files</sci:value>
						<sci:value>&lt;p&gt;Creates a molecular data record for each molecule represented in the &lt;i&gt;Source&lt;/i&gt; 
data file.  All properties contained in the file are read into the data records.&lt;/p&gt;&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;p&gt;&lt;ul&gt;&lt;li&gt;This 
component can also read zipped (.zip) and URL-based files.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;b&gt;See 
Also:&lt;/b&gt;&lt;p&gt;&lt;ul&gt;&lt;li&gt;To write files in MOL or SD format, use the &lt;a href=&quot;javascript:DoLink(&apos;{DC8EE7B0-0620-42FE-944C-B4CD1E79480E}&apos;)&quot;&gt;SD 
Writer&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;To convert a molecule to and from between text properties in CTAB 
format, use &lt;a href=&quot;javascript:DoLink(&apos;{E622FBD9-9FA9-451A-A102-1800B5F28B6D}&apos;)&quot;&gt;Molecule 
to CTAB&lt;/a&gt; and &lt;a href=&quot;javascript:DoLink(&apos;{7D354B65-DDD8-4EA4-83A7-21501A8A6852}&apos;)&quot;&gt;Molecule 
from CTAB&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;Other related CTFile format file readers include &lt;a href=&quot;javascript:DoLink(&apos;{169AB4E5-A470-477B-AA65-50464411036C}&apos;)&quot;&gt;RG 
Reader&lt;/a&gt;, &lt;a href=&quot;javascript:DoLink(&apos;{036731AA-0015-4606-9750-7D9D020F21C8}&apos;)&quot;&gt;RXN 
Reader&lt;/a&gt; and &lt;a href=&quot;javascript:DoLink(&apos;{55431CCB-06EA-4741-B95B-633C877E3E9B}&apos;)&quot;&gt;RD 
Reader&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt;</sci:value>
						<sci:value>None</sci:value>
						<sci:value/>
						<sci:value>Molecule</sci:value>
						<sci:value>Data fields in the SD file will be added to the property fields</sci:value>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>17.1.0.59</sci:value>
					</sci:arg>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>25</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Chemistry\Data Access and Manipulation\Readers\SD Reader</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.Protocol.1">
				<sci:component name="Compare Property to Value Filter" version="2">
					<sci:arg name="Property Name" type="PropertyNameType" required="true" visibility="visible" multi="false">
						<sci:help>The name of the property whose value we wish to compare</sci:help>
						<sci:value>Aff_SHP1_Pred</sci:value>
					</sci:arg>
					<sci:arg name="Compare Operation" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>The comparator operation. For example: &gt; means the property value must be greater than the value as obtained from either the property or the value in the parameter &lt;i&gt;Property Name 2 or Value&lt;/i&gt;.

For boolean values, you can use the double operators &quot;==&quot; and &quot;!=&quot;; the values will be coerced to the numbers &quot;0&quot; or &quot;1&quot; (if necessary) then compared.

The operators are:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;==&lt;/b&gt;: numeric equals&lt;li&gt;
&lt;li&gt;&lt;b&gt;&amp;lt;&lt;/b&gt;: numeric less than&lt;li&gt;
&lt;li&gt;&lt;b&gt;&amp;lt;=&lt;/b&gt;: numeric less than or equals&lt;li&gt;
&lt;li&gt;&lt;b&gt;&amp;gt;&lt;/b&gt;: numeric greater than&lt;li&gt;
&lt;li&gt;&lt;b&gt;&amp;gt;=&lt;/b&gt;: numeric greater than or equals&lt;li&gt;
&lt;li&gt;&lt;b&gt;!=&lt;/b&gt;: numeric not equals&lt;li&gt;
&lt;li&gt;&lt;b&gt;EQ&lt;/b&gt;: string equals, case insensitive&lt;li&gt;
&lt;li&gt;&lt;b&gt;NE&lt;/b&gt;: string not equals, case insensitive&lt;li&gt;
&lt;li&gt;&lt;b&gt;CASE EQ&lt;/b&gt;: string equals, case sensitive&lt;li&gt;
&lt;li&gt;&lt;b&gt;CASE NE&lt;/b&gt;: string not equals, case sensitive&lt;li&gt;
&lt;li&gt;&lt;b&gt;LIKE&lt;/b&gt;: Oracle-style LIKE operation&lt;li&gt;
&lt;li&gt;&lt;b&gt;RLIKE&lt;/b&gt;: Oracle-style RLIKE operation&lt;li&gt;
&lt;/ul&gt;
</sci:help>
						<sci:legalval>==</sci:legalval>
						<sci:legalval>&lt;</sci:legalval>
						<sci:legalval>&lt;=</sci:legalval>
						<sci:legalval>&gt;=</sci:legalval>
						<sci:legalval>&gt;</sci:legalval>
						<sci:legalval selected="true">!=</sci:legalval>
						<sci:legalval>EQ</sci:legalval>
						<sci:legalval>NE</sci:legalval>
						<sci:legalval>CASE EQ</sci:legalval>
						<sci:legalval>CASE NE</sci:legalval>
						<sci:legalval>LIKE</sci:legalval>
						<sci:legalval>RLIKE</sci:legalval>
					</sci:arg>
					<sci:arg name="Value" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>The value we wish to compare against the value of the property. 

If you wish to compare against the value of another property, or a global property, or a parameter value, use the &lt;i&gt;Initialize Using...&lt;/i&gt; option.</sci:help>
						<sci:value>0.00</sci:value>
					</sci:arg>
					<sci:arg name="RunToCompletion" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - For Each Data Record&quot;, the subprotocol is re-initialized and executed in its entirety for each individual data record it processes.
&lt;p&gt;
When set to &quot;True - For Each Category&quot;, the data records are divided into categories based on the value of the Categorize Using parameter and then the subprotocol is re-initialized and executed in its entirety for each category of data records. When used in conjunction with &lt;i&gt;Parallel Processing Options&lt;/i&gt;, each category of data records will be sent to the remote server as part of one single batch.</sci:help>
						<sci:member>RunToCompletion Categorize Using</sci:member>
						<sci:legalval selected="true">False</sci:legalval>
						<sci:legalval>True - For Each Data Record</sci:legalval>
						<sci:legalval>True - For Each Category</sci:legalval>
					</sci:arg>
					<sci:arg name="RunToCompletion Categorize Using" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Required when RunToCompletion is set to &lt;i&gt;True - For Each Category&lt;/i&gt;, this parameter specifies the property or properties used to define the categories.</sci:help>
						<sci:validscript>SetInvalidDetails(&apos;This parameter is required when RunToCompletion is set to True - For Each Category&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
						<sci:enabledscript>SetDisabledDetails(&apos;To Enable, Set RunToCompletion to True - For Each Category&apos;);
Parameter(&apos;RunToCompletion&apos;) eq &apos;True - For Each Category&apos;;</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>&lt;p&gt;
When set to True, this set of options allows the subprotocol to execute in parallel on one or more independent Pipeline Pilot servers, running locally or remotely.  Additional parameters control the number of data records to send in each process batch, the list of Pipeline Pilot servers to use, the number of protocol processes that can be executed on each server, and whether to preserve the order of the processed data records.
&lt;/p&gt;&lt;p&gt;
Use this option with care, since it will not increase throughput in all circumstances. Generally speaking, it yields improved performance when the parallelization benefits outweigh the data transfer overhead for the specified batch size.  As a rough guide, performance can be improved when each individual batch requires at least 10 seconds to execute, although this can be affected by the size of each data record.
&lt;/p&gt;&lt;p&gt;
When running the protocol with debugging, the subprotocol will provide debugging messages to detail each of the various steps of execution.  Also, components located within the parallel subprotocol will display their debugging messages as well.
&lt;/p&gt;&lt;p&gt;
For more information on the parallel subprotocol options, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_parallel_processing.htm&apos;)&quot;&gt;Parallel Processing Subprotocols&lt;/a&gt;.
&lt;/p&gt;
</sci:help>
						<sci:member>Parallel Processing Options Batch Size</sci:member>
						<sci:member>Parallel Processing Options Server</sci:member>
						<sci:member>Parallel Processing Options Preserve Order</sci:member>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Batch Size" type="LongType" required="true" visibility="visible" multi="false" uimpl="false">
						<sci:help>&lt;p&gt;The number of records to send to the remote server(s) for each subprotocol execution.  In general, performance is optimized when the amount of time required to process each batch is at least 10 seconds (note that this can vary depending on the characteristics of the remote server&apos;s hardware).  Use a batch size of -1 to pass all data in a single batch.&lt;/p&gt;
&lt;p&gt;When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - for each category&quot;, the batch sizes will be determined by the number of records in each individual category.  Therefore, the &lt;i&gt;Batch Size&lt;/i&gt; parameter is not applicable.</sci:help>
						<sci:enabledscript>#parallel := Parameter(&apos;Parallel Processing Options&apos;);
if (not #parallel) then
	SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
end if;
#parallel;</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server" type="StringType" required="false" visibility="visible" multi="true" expanded="true" legalvalsenforced="false" uimpl="false">
						<sci:help>&lt;p&gt;
A comma-separated list of Pipeline Pilot servers on which to execute the parallel subprotocol.  The server names should be in the same format as the Pipeline Pilot Client&apos;s change server dialog (that is, server-name:port-number).
&lt;/p&gt;&lt;p&gt;
Specifying &lt;b&gt;localhost&lt;/b&gt; as a server will cause the subprotocol to use its own Pipeline Pilot server.  This can be useful on multi-CPU/multi-core systems (where the subprotocol jobs are spawned on the same machine) and Pipeline Pilot Linux clusters (where &apos;localhost&apos; requests spawning the subprotocol jobs on the same cluster).
&lt;/p&gt;</sci:help>
						<sci:member>Parallel Processing Options Server Processes</sci:member>
						<sci:member>Parallel Processing Options Server Run On Grid</sci:member>
						<sci:validscript>SetInvalidDetails(&apos;This parameter is required.&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Processes" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>A comma-separated list of the maximum number of batches that can be simultaneously executed on each remote server.  The number of entries in this parameter must equal the number of servers. If &apos;*&apos; is specified as the number of processes, then that server will only launch as many batches as the administrator of the remote server has permitted.</sci:help>
						<sci:validscript>/* Server Processes must have the same number of comma separated entries as the Server parameter and must have a value*/
#processes := parameter();
expand(&apos;,&apos;, #processes);
#servers := parameter(&apos;Parallel Processing Options Server&apos;);
expand(&apos;,&apos;, #servers);

if (numvalues(#processes) == 0) then
	SetInvalidDetails(&apos;This parameter is required.&apos;);
else
	SetInvalidDetails(&apos;The number of server processes (&apos; . numvalues(#processes) . &apos;) must equal the number of servers (&apos; . numvalues(#servers) . &apos;).&apos;);
end if;
numvalues(#processes) &gt; 0 and numvalues(#processes) == numvalues(#servers);</sci:validscript>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Run On Grid" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Run subprotocol on grid engine if available.</sci:help>
						<sci:member>Parallel Processing Options Server Run On Grid Queue Name</sci:member>
						<sci:member>Parallel Processing Options Server Run On Grid Grid Options</sci:member>
						<sci:enabledscript>parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Run On Grid Queue Name" type="StringType" required="false" visibility="visible" multi="false" legalvalsenforced="false" uimpl="false">
						<sci:help>Select the queue name on the grid to submit jobs to. Leave blank to use default queue name.</sci:help>
						<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Server Run On Grid Grid Options" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Use this to specify grid engine specific command line parameters to the job submission command. Leave blank to use defaults.</sci:help>
						<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="Parallel Processing Options Preserve Order" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Whether to preserve the order of the data as it enters and leaves the remote subprotocol.</sci:help>
						<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Tempfiles" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>&lt;p&gt;A comma-delimited list of global properties, each of which is automatically populated with the name of a file in the job&apos;s temporary folder, which always has a unique name.&lt;p/&gt;For each global name, an additional global is created (with the suffix &lt;i&gt;_Filename&lt;/i&gt;) that hold only the leaf file name of the temporary file.&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="DeclareLocal" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>&lt;p&gt;Lists a set of properties (without the @) to create on the global property list for this subprotocol. Such properties can only be accessed within the scope of this subprotocol and its descendent subprotocols.&lt;p/&gt;

&lt;p&gt;Any global property not declared in this way is created on the top-level global property list and is accessible from all subprotocols, but breaks the encapsulation of the subprotocol and may collide with another property of the same name.&lt;/p&gt;

&lt;p&gt;Therefore, you should always declare a new global property in the &lt;i&gt;DeclareLocal&lt;/i&gt; parameter, to scope the global property to the subprotocol where it is used.&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Custom Error Message</sci:help>
					</sci:arg>
					<sci:arg name="Refresh rather than Reinitialize" type="BoolType" required="false" visibility="nevershow" multi="false" legalvalsenforced="false">
						<sci:help>Refresh rather than Reinitialize</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
						<sci:help>Automatically update the component display name when the &quot;Destination&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
						<sci:value>
#propertyName := trim(Parameter(&apos;Property Name&apos;, 2));
#filter := trim(Parameter(&apos;Compare Operation&apos;, 2));
#value := trim(Parameter(&apos;Value&apos;, 2));
if(strlength(#propertyName) &gt; 0 AND strlength(#value) &gt; 0) then		
	&apos;Compare &apos; . #propertyName . &apos; &apos; . #filter . &apos; &apos; . #value;
else
	&apos;&apos;;
end if;
				</sci:value>
					</sci:arg>
					<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol AutoLayout</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>FilterNode</sci:value>
					</sci:arg>
					<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
						<sci:help>Component Revision</sci:help>
						<sci:value>790</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{C69423B9-CBFD-4CE5-B979-1F54A793FC3A}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>378 -2095</sci:value>
					</sci:arg>
					<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>By Ref</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Pass or Fail a data record depending on the results of a property comparison operation</sci:value>
						<sci:value>This component uses a binary comparison operation to decide whether to return the record out the Pass port (true) or the Fail port (false).</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value>A generic data record</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value>Data records which contain the Property Name property that passes the comparison operation</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value>Data records which do not contain the Property Name property, or do not pass the comparison operation</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>18.1.0.1398</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Sticky Notes</sci:help>
					</sci:arg>
					<sci:arg name="ProtocolScale2" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Scale</sci:help>
						<sci:value>100</sci:value>
					</sci:arg>
					<sci:arg name="Protocol Options" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Options</sci:help>
						<sci:legalval selected="true">Owner Access Only</sci:legalval>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Wed Mar 29 10:12:15 2017</sci:value>
					</sci:arg>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>26</sci:value>
					</sci:arg>
					<sci:arg name="SubProtocolMadeLinkIntoCopy" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>Subprotocol Made Link Into Copy</sci:help>
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="SubProtocolModified" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>Subprotocol Modified</sci:help>
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Property Filters\Compare Property to Value Filter</sci:value>
					</sci:arg>
				</sci:component>
				<sci:protocol/>
			</sci:data>
			<sci:data object="SciTegic.NormalizePropertyTypes.1">
				<sci:component name="Clean Data" version="2">
					<sci:arg name="Output What" type="StringType" required="false" visibility="hidden" multi="false">
						<sci:help>What to output - either a summary of the property information, one record per property, or the cleaned data, one record per incoming data record.

If &lt;i&gt;Summary Properties&lt;/i&gt; is selected, the summary properties are:

&lt;ul&gt;
&lt;li&gt;name: the name of the property&lt;/li&gt;
&lt;li&gt;count: the number of incoming data records containing this property&lt;/li&gt;
&lt;li&gt;type: the inferred type of the property (see list of possible types below)&lt;/li&gt;
&lt;li&gt;min: if numeric or date/time, the minimum value of the property&lt;/li&gt;
&lt;li&gt;max: if numeric or date/time, the maximum value of the property&lt;/li&gt;
&lt;li&gt;values: if string, then the list of different values (if less than Maximum Number of Values)&lt;/li&gt;
&lt;li&gt;missingvalues: if this property contained any missing values, then this will contain the missing values that were found&lt;/li&gt;
&lt;/ul&gt;

The possible values for type are:

&lt;ul&gt;
&lt;li&gt;Null&lt;li&gt;
&lt;li&gt;Boolean&lt;li&gt;
&lt;li&gt;Integer&lt;li&gt;
&lt;li&gt;Double&lt;li&gt;
&lt;li&gt;String&lt;li&gt;
&lt;li&gt;Text&lt;li&gt;
&lt;li&gt;DateTime&lt;li&gt;
&lt;li&gt;Other&lt;li&gt;
&lt;/ul&gt;

      </sci:help>
						<sci:legalval selected="true">Cleaned Data</sci:legalval>
						<sci:legalval>Property Summary</sci:legalval>
					</sci:arg>
					<sci:arg name="Summary Options" type="GroupType" required="false" visibility="hidden" multi="false" legalvalsenforced="false">
						<sci:help>Options that affect the output of the summary data only</sci:help>
						<sci:member>Maximum Number of Values</sci:member>
						<sci:member>Text Length</sci:member>
					</sci:arg>
					<sci:arg name="Maximum Number of Values" type="LongType" required="false" visibility="hidden" multi="false" expanded="true">
						<sci:help>For String properties, we also return a list of possible values. This sets the maximum number of different values we wish to return. If that is exceeded, then no values are returned.
      </sci:help>
						<sci:value>20</sci:value>
					</sci:arg>
					<sci:arg name="Text Length" type="LongType" required="false" visibility="hidden" multi="false">
						<sci:help>
        For string properties, if the length of the value is greater than or equal to this number,
        then that property is considered Text, and no values are collected or returned.
      </sci:help>
						<sci:value>32</sci:value>
					</sci:arg>
					<sci:arg name="Conversion Options" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>&lt;p&gt;Options that affect how we inspect and convert between types.&lt;/p&gt;

&lt;p&gt;Options are: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Check Date Time&lt;/b&gt;: check strings to see if they are datetime values. (This can be slow!)&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Use Calculable Property Types&lt;/b&gt;: if the property name exists as a calculable property, use that type as the minimum type.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Numeric [0,1] is Integer&lt;/b&gt;: if we see a rpoperty with only 0 and 1&apos;s, that is normally considered a boolean. If this option is selected, it is considered an integer. &lt;/li&gt;
&lt;/ul&gt;</sci:help>
						<sci:legalval selected="true">Check Date Time</sci:legalval>
						<sci:legalval>Use Calculable Property Types</sci:legalval>
						<sci:legalval selected="true">Numeric [0,1] is Integer</sci:legalval>
					</sci:arg>
					<sci:arg name="Clean Behavior" type="StringType" required="false" visibility="visible" multi="false" expanded="true">
						<sci:help>&lt;p&gt;The &lt;i&gt;Clean Data&lt;/i&gt; will pass only clean data out the Pass port. &quot;Clean data&quot; is data where there are no missing values or values that failed to coerce to a requested property type, across all the properties of the data record.&lt;/p&gt;

&lt;p&gt;If a particular property has an unclean value in at least one data record, there are two cleaning choices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Remove Any Data Record with Unclean Value&lt;/b&gt;: any data record containing at least one unclean property value will be removed from the data stream and passed out the Fail port.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Remove Unclean Property from All Data Records&lt;/b&gt;: any property having an unclean value in at least one data record, will be removed from &lt;i&gt;all&lt;/i&gt; data records. The remaining properties will be returned via the Pass port. The removed properties are collected onto another data record and passed out the Fail port.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
						<sci:legalval selected="true">Remove Any Data Record with Unclean Value</sci:legalval>
						<sci:legalval>Remove Unclean Property from All Data Records</sci:legalval>
					</sci:arg>
					<sci:arg name="Missing Value Options" type="GroupType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
						<sci:help>Options to control the identification of missing values, and to possibly standardize (and then accept as clean) these values by column type using a provided replacement string.</sci:help>
						<sci:member>Missing Value Strings</sci:member>
						<sci:member>Replace Missing Values</sci:member>
					</sci:arg>
					<sci:arg name="Missing Value Strings" type="StringType" required="false" visibility="visible" multi="true" expanded="true">
						<sci:help>If provided, this is an array of string values that will be interpreted as missing values. Note that an empty entry causes the empty string to be treated as a missing value.</sci:help>
						<sci:value/>
						<sci:value>*</sci:value>
						<sci:value>?</sci:value>
						<sci:value>NULL</sci:value>
						<sci:value>NA</sci:value>
						<sci:value>N/A</sci:value>
						<sci:value>NaN</sci:value>
					</sci:arg>
					<sci:arg name="Replace Missing Values" type="BoolType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
						<sci:help>Whether to identify missing values using the list of values in &lt;i&gt;Missing Values Strings&lt;/i&gt;.</sci:help>
						<sci:member>Types to Replace</sci:member>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="Types to Replace" type="StringType" required="false" visibility="visible" multi="true" expanded="true">
						<sci:help>Replace missing values with particular strings for particular column types</sci:help>
						<sci:member>Boolean Missing Values</sci:member>
						<sci:member>Integer Missing Values</sci:member>
						<sci:member>Double Missing Values</sci:member>
						<sci:member>String Missing Values</sci:member>
						<sci:member>DateTime Missing Values</sci:member>
						<sci:enabledscript>parameter(&apos;Replace Missing Values&apos;)</sci:enabledscript>
						<sci:legalval selected="true">Boolean</sci:legalval>
						<sci:legalval selected="true">Integer</sci:legalval>
						<sci:legalval selected="true">Double</sci:legalval>
						<sci:legalval selected="true">String</sci:legalval>
						<sci:legalval selected="true">DateTime</sci:legalval>
					</sci:arg>
					<sci:arg name="Boolean Missing Values" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>Replace missing values in Boolean columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
						<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Boolean&apos;);</sci:enabledscript>
						<sci:value>False</sci:value>
					</sci:arg>
					<sci:arg name="Integer Missing Values" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>Replace missing values in Integer columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
						<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Integer&apos;);</sci:enabledscript>
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="Double Missing Values" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>Replace missing values in Double columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
						<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;Double&apos;);</sci:enabledscript>
						<sci:value>0.0</sci:value>
					</sci:arg>
					<sci:arg name="String Missing Values" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>Replace missing values in String columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
						<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;String&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="DateTime Missing Values" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>Replace missing values in DateTime columns with this string. Typically, you do this with a value that is &lt;i&gt;not&lt;/i&gt; itself a missing value, so that the column will be clean.</sci:help>
						<sci:enabledscript>contains(parameter(&apos;Types to Replace&apos;), &apos;DateTime&apos;);</sci:enabledscript>
						<sci:value>1/1/1970</sci:value>
					</sci:arg>
					<sci:arg name="Property Type Coercion Options" type="GroupType" required="false" visibility="visible" multi="true" legalvalsenforced="false">
						<sci:help>You can force a particular property to a specific type. 

If you do this, and any of the values on a data record (other than missing values) fails to coerce, then the data is considered unclean. 
</sci:help>
						<sci:member>Property 1</sci:member>
						<sci:member>Property 2</sci:member>
						<sci:member>Property 3</sci:member>
						<sci:member>Property 4</sci:member>
						<sci:member>Property 5</sci:member>
						<sci:member>Property 6</sci:member>
					</sci:arg>
					<sci:arg name="Property 1" type="PropertyNameType" required="false" visibility="visible" multi="false" expanded="true">
						<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
						<sci:member>Property 1 Coerce to Type</sci:member>
					</sci:arg>
					<sci:arg name="Property 1 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
						<sci:legalval>Boolean</sci:legalval>
						<sci:legalval>Integer</sci:legalval>
						<sci:legalval selected="true">Double</sci:legalval>
						<sci:legalval>String</sci:legalval>
						<sci:legalval>DateTime</sci:legalval>
					</sci:arg>
					<sci:arg name="Property 2" type="PropertyNameType" required="false" visibility="visible" multi="false">
						<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
						<sci:member>Property 2 Coerce to Type</sci:member>
					</sci:arg>
					<sci:arg name="Property 2 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
						<sci:legalval>Boolean</sci:legalval>
						<sci:legalval>Integer</sci:legalval>
						<sci:legalval selected="true">Double</sci:legalval>
						<sci:legalval>String</sci:legalval>
						<sci:legalval>DateTime</sci:legalval>
					</sci:arg>
					<sci:arg name="Property 3" type="PropertyNameType" required="false" visibility="visible" multi="false">
						<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
						<sci:member>Property 3 Coerce to Type</sci:member>
					</sci:arg>
					<sci:arg name="Property 3 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
						<sci:legalval>Boolean</sci:legalval>
						<sci:legalval>Integer</sci:legalval>
						<sci:legalval selected="true">Double</sci:legalval>
						<sci:legalval>String</sci:legalval>
						<sci:legalval>DateTime</sci:legalval>
					</sci:arg>
					<sci:arg name="Property 4" type="PropertyNameType" required="false" visibility="visible" multi="false">
						<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
						<sci:member>Property 4 Coerce to Type</sci:member>
					</sci:arg>
					<sci:arg name="Property 4 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
						<sci:legalval>Boolean</sci:legalval>
						<sci:legalval>Integer</sci:legalval>
						<sci:legalval selected="true">Double</sci:legalval>
						<sci:legalval>String</sci:legalval>
						<sci:legalval>DateTime</sci:legalval>
					</sci:arg>
					<sci:arg name="Property 5" type="PropertyNameType" required="false" visibility="visible" multi="false">
						<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
						<sci:member>Property 5 Coerce to Type</sci:member>
					</sci:arg>
					<sci:arg name="Property 5 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
						<sci:legalval>Boolean</sci:legalval>
						<sci:legalval>Integer</sci:legalval>
						<sci:legalval selected="true">Double</sci:legalval>
						<sci:legalval>String</sci:legalval>
						<sci:legalval>DateTime</sci:legalval>
					</sci:arg>
					<sci:arg name="Property 6" type="PropertyNameType" required="false" visibility="visible" multi="false">
						<sci:help>The name of the property to coerce to a given type. You will need to select the desired type using the &lt;i&gt;Coerce to Type&lt;/i&gt; parameter. 

It may be that some values in your property cannot be coerced to the given type. In that case, you will see an increase in the number of unclean data records. In these cases, you&apos;ll need to repair these data records, or remove them to use this property.</sci:help>
						<sci:member>Property 6 Coerce to Type</sci:member>
					</sci:arg>
					<sci:arg name="Property 6 Coerce to Type" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>The type we wish to coerce to. If the value cannot be coerced, the value will not be changed, and (depending on the value of &lt;i&gt;Send Unclean Data out Fail Port&lt;/i&gt;, the record may be passed out the Fail port.</sci:help>
						<sci:legalval>Boolean</sci:legalval>
						<sci:legalval>Integer</sci:legalval>
						<sci:legalval selected="true">Double</sci:legalval>
						<sci:legalval>String</sci:legalval>
						<sci:legalval>DateTime</sci:legalval>
					</sci:arg>
					<sci:arg name="Array Value Options" type="GroupType" required="false" visibility="visible" multi="false" legalvalsenforced="false">
						<sci:help>Options to handle array data</sci:help>
						<sci:member>Array Values Are</sci:member>
					</sci:arg>
					<sci:arg name="Array Values Are" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>Whether array values are OK, are unclean, or should be replaced by a single value, the first value in the array.</sci:help>
						<sci:legalval>OK</sci:legalval>
						<sci:legalval selected="true">Unclean</sci:legalval>
						<sci:legalval>Replaced by First Value</sci:legalval>
					</sci:arg>
					<sci:arg name="Ignore Properties" type="PropertyNameType" required="false" visibility="visible" multi="true" uimpl="false">
						<sci:help>A list of properties to ignore, if any. They will be passed through untouched, and never considered unclean.</sci:help>
						<sci:value>idnumber</sci:value>
					</sci:arg>
					<sci:arg name="Error Property Name" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>The name of the property to put error messages into. If left blank, do not add an error property.</sci:help>
						<sci:value>ErrorText</sci:value>
					</sci:arg>
					<sci:arg name="CacheSizeInflationFactor" type="LongType" required="false" visibility="hidden" multi="false" uimpl="true">
						<sci:help>When you run using a limited cache size, normally only that many records may be output.
This parameter allows you to increase that size by a multiplicative factor. </sci:help>
						<sci:value>2</sci:value>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="Implementation Of" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:legalval>Normalize Property Types</sci:legalval>
						<sci:legalval selected="true">Clean Data</sci:legalval>
						<sci:legalval>Set Property Type</sci:legalval>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Thu Sep 14 07:50:41 2017</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>Clean Data</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>COMPONENTNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{6E28C170-2FEC-4A3C-90A6-2DCEAA330E9E}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>666 -2095</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Ensure your data is clean; that is, has no missing values, is coerced to the desired type, and is not an array value.</sci:value>
						<sci:value>&lt;p&gt;&lt;i&gt;Cleaning&lt;/i&gt; data is the act of finding, for each property, that it has no missing values, is coerced to the desired type, and is not an array value. The type is inferred: for example, a property may contains strings, with values &quot;0&quot; and &quot;1&quot;. This will be cleaned into Boolean values.&lt;/p&gt;

The problems that cleaning addresses are:
&lt;ol&gt;
&lt;li&gt;The same property name may have different value types on different data records&lt;/li&gt;
&lt;li&gt;The property might be of types that are coercible to some simpler base type (e.g., numbers might be stored as strings, when they could be better represented as integers)&lt;/li&gt;
&lt;li&gt;The property might be missing from some data records&lt;/li&gt;
&lt;li&gt;The property might appear multiple times on a given data record (arrays)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The normalized type is the simplest type possible, ordered from: Null, Boolean, Integer, Double, String, DateTime.&lt;/p&gt;
</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value>The Normalized data records, or the summary for each property.</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>27</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Data Manipulators\Clean Data</sci:value>
					</sci:arg>
				</sci:component>
				<sci:proplist>
					<sci:propval name="RegistrationVersion">18.1.0.1590</sci:propval>
				</sci:proplist>
			</sci:data>
			<sci:data object="SciTegic.Protocol.1">
				<sci:component name="HTML Table Viewer" version="2">
					<sci:arg name="Maximum Rows" type="LongType" required="true" visibility="visible" multi="false">
						<sci:help>Specifies the maximum number of table rows in the HTML page</sci:help>
						<sci:value>200</sci:value>
					</sci:arg>
					<sci:arg name="Rows Per Page" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>The number of rows displayed on each page</sci:help>
						<sci:value>50</sci:value>
					</sci:arg>
					<sci:arg name="Title" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>The optional title of the HTML document</sci:help>
						<sci:value>Wrong output?</sci:value>
					</sci:arg>
					<sci:arg name="Freeze Table Header" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>&lt;p&gt;When set to True, this table&apos;s header and title will remain visible when the table is scrolled vertically.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Notes:&lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;This feature only applies to HTML reports.&lt;/li&gt;
	&lt;li&gt;The fixed header behavior depends on what container (e.g., plain browser window, Tile component, Dynamic Content Container) that the Table is piped into.&lt;/li&gt; 
	&lt;li&gt;To create a table of fixed pixel height, set this parameter to True and pipe this table into a Dynamic Content Container of fixed (i.e., non-percentage) height.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="Use Default Browser" type="BoolType" required="false" visibility="visible" multi="false" expanded="true" legalvalsenforced="false" uimpl="false">
						<sci:metaproplist>
							<sci:propval name="SCI_PromotionRenameRule">UsingParent</sci:propval>
							<sci:mpropval name="SCI_PromotedFrom" type="StringType">
								<sci:value>Browser</sci:value>
							</sci:mpropval>
						</sci:metaproplist>
						<sci:help>&lt;p&gt;
This parameter is only relevant when running the protocol in the Pipeline Pilot Professional Client.
&lt;/p&gt;
&lt;p&gt;
The value specifies whether to use your default desktop web browser to view the HTML table. When set to False, Internet Explorer is used as a standard fallback option. If IE is your default browser, it is used in either case.
&lt;/p&gt;
</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Tempfiles" type="StringType" required="false" visibility="visible" multi="false" implbase="{7B3502D7-FA57-4EB5-838B-FE6AB0BF0E69}" uimpl="true">
						<sci:help>Lists the set of temporary files which will be converted by the network to true temporary file names</sci:help>
						<sci:value>temphtml</sci:value>
					</sci:arg>
					<sci:arg name="DeclareLocal" type="StringType" required="false" visibility="visible" multi="false" implbase="{17001C74-63CE-4B4B-B37C-F0EAA19CE4AA}" uimpl="true">
						<sci:help>Lists a set of properties (without the @) to be created on the property list for this protocol.
Other properties are created on the global property list
and so are accessible from all protocols.</sci:help>
						<sci:value>HTML Filename</sci:value>
					</sci:arg>
					<sci:arg name="RunToCompletion" type="BoolType" required="false" visibility="visible" multi="false" implbase="{7B3502D7-FA57-4EB5-838B-FE6AB0BF0E69}" uimpl="true">
						<sci:help>When the network is run, whether we process once or until done for each process call</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="Internet Explorer" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>The location for Internet Explorer</sci:help>
						<sci:value>internetexplorer.application</sci:value>
					</sci:arg>
					<sci:arg name="Chrome" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
						<sci:help>The location for Chrome</sci:help>
						<sci:value>&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot;</sci:value>
					</sci:arg>
					<sci:arg name="Firefox" type="StringType" required="false" visibility="visible" multi="false" expanded="true" uimpl="true">
						<sci:help>The location for Firefox</sci:help>
						<sci:value>&quot;C:\Program Files (x86)\Mozilla Firefox\firefox.exe&quot;</sci:value>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval>ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="Protocol Options" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:help>Protocol Options</sci:help>
						<sci:legalval selected="true">Make Shortcut by Default</sci:legalval>
						<sci:legalval>Cant Replace With Copy</sci:legalval>
						<sci:legalval>Cant Open</sci:legalval>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Fri Oct 23 17:05:34 2015</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>HTML Table Viewer</sci:value>
					</sci:arg>
					<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol AutoLayout</sci:help>
						<sci:value>true</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>954 -2295</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>ViewerNode</sci:value>
					</sci:arg>
					<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
						<sci:help>Component Revision</sci:help>
						<sci:value>100</sci:value>
					</sci:arg>
					<sci:arg name="ProtocolCommentSize" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>ProtocolCommentSize</sci:help>
						<sci:value>1100 500</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>SubProtocol</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{F6A20C96-BC1C-48f3-82E9-4D8F023F82EE}</sci:value>
					</sci:arg>
					<sci:arg name="ProtocolScale" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Scale</sci:help>
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>By Ref</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Displays data records as HTML in a web browser</sci:value>
						<sci:value>&lt;p&gt;Generates and displays an HTML table page of data records, with one record per row. Each property becomes a column in the table and each value a cell.
&lt;p&gt;
&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;Molecules will be displayed if present.&lt;/li&gt;
&lt;li&gt;For hierarchical data records, only top level properties are displayed.&lt;/li&gt;
&lt;li&gt;Any grouped data is displayed in nested tables.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;If you prefer not to view the grouped data, use &lt;a href=&quot;javascript:DoLink(&apos;{ACCDEEEF-FEED-4B27-B263-BA531EABFC9C}&apos;)&quot;&gt;Delete Children&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For more control over the display of molecules, use &lt;a href=&quot;javascript:DoLink(&apos;{485D30CD-737C-4AD3-89C9-F81CB20E47AE}&apos;)&quot;&gt;HTML Molecular Table Viewer&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>16.1.0.1089</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Sticky Notes</sci:help>
					</sci:arg>
					<sci:arg name="ProtocolScale2" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Scale</sci:help>
						<sci:value>100</sci:value>
					</sci:arg>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>28</sci:value>
					</sci:arg>
					<sci:arg name="SubProtocolMadeLinkIntoCopy" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>Subprotocol Made Link Into Copy</sci:help>
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Viewers\HTML Table Viewer</sci:value>
					</sci:arg>
				</sci:component>
				<sci:protocol/>
			</sci:data>
			<sci:data object="SciTegic.DataCacheIO.1">
				<sci:component name="Cache Reader" version="2">
					<sci:arg name="CacheID" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>The name of the cache to read, which should refer to a cache already written in the protocol containing this component.  Use the &lt;a href=&quot;javascript:DoLink(&apos;{B91EE521-C028-46BE-89A4-51CDE9877589}&apos;)&quot;&gt;Create Temporary CacheIDs&lt;/a&gt; component to provide an ID for temporary caches, then refer to the temporary ID with $(globalname)</sci:help>
						<sci:member>RangeMinimum</sci:member>
						<sci:member>RangeMaximum</sci:member>
						<sci:member>Scope</sci:member>
						<sci:member>JobId</sci:member>
						<sci:value>tmp</sci:value>
					</sci:arg>
					<sci:arg name="RangeMinimum" type="LongType" required="false" visibility="visible" multi="false">
						<sci:help>The lower limit of data records to read from the cache. Numbering starts at 1.  A blank value or a value less than 1 means start reading at the first cached record.
               </sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="RangeMaximum" type="LongType" required="false" visibility="visible" multi="false">
						<sci:help>The upper limit of data records to read from the cache. Numbering starts at 1.  A blank value or a value less than 1 means read to the end of the set of cached records.
               </sci:help>
					</sci:arg>
					<sci:arg name="Scope" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>The scope of the cache determines the length of time the cache exists and 
the visibility of the cache to other jobs and users. Each scope has its own namespace, so you have to 
specify both the &lt;i&gt;CacheID&lt;/i&gt; and the &lt;i&gt;Scope&lt;/i&gt; to the same values as were used in the &lt;/i&gt;Cache Writer&lt;/i&gt;.
			</sci:help>
						<sci:legalval selected="true">Job Only</sci:legalval>
						<sci:legalval>User Only</sci:legalval>
						<sci:legalval>All Users</sci:legalval>
					</sci:arg>
					<sci:arg name="DeleteWhenFinished" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>If True, then delete the cache when finished reading</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Additional parameters to control the component behavior.</sci:help>
						<sci:member>Read Globals</sci:member>
						<sci:member>Password</sci:member>
					</sci:arg>
					<sci:arg name="Read Globals" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>&lt;p&gt;Defines if the component should read globals from the cache.&lt;/p&gt;
&lt;p&gt;Any globals read from the cache will overwrite the existing globals.&lt;/p&gt;</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Password" type="xpass" encrypt="bf_1" required="false" visibility="visible" multi="false" legalvalsenforced="false">
						<sci:help>&lt;p&gt;Enter a password, if one was assigned when the cache was written.
&lt;/p&gt;
&lt;p&gt;Note that a password is not required, if the current user originally wrote the password-protected cache.
&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval>ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="JobId" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>If the scope is set to &lt;I&gt;Job Only&lt;/I&gt;, then this is the job that owns the cache, if it is different from this job. The job must have been run by the same user as this job. If not specified, then the current job is assumed to contain the cache.
               </sci:help>
						<sci:enabledscript>parameter(&apos;Scope&apos;) eq &apos;Job Only&apos;</sci:enabledscript>
					</sci:arg>
					<sci:arg name="CacheCategory" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The cache type, that determines its folder location within the job.
               </sci:help>
					</sci:arg>
					<sci:arg name="Mode" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:help>Specifies the action of this component:

 - Writer: The component writes data records to a new cache.
 - Reader: The component reads data records from a pre-existing, completed cache.
 - Writer/Reader: The component writes data out to a cache and then reads it in again to generate new records.
               </sci:help>
						<sci:legalval>Writer</sci:legalval>
						<sci:legalval selected="true">Reader</sci:legalval>
						<sci:legalval>Writer/Reader</sci:legalval>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Mon Aug 28 09:15:02 2017</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
						<sci:help>Automatically update the component display name when the &quot;CacheID&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
						<sci:value>
#displayName := Parameter(&apos;CacheID&apos;, 2);
if(StrLength(#displayName) &gt; 0) then	
	&apos;Read cache &apos; . #displayName;
else
	&apos;&apos;;
end if;
			</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>90 -2645</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>DATABASENODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{704E3781-33EA-42BB-9099-05B44C3D08E6}</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Cache Reader</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>4</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Reads data records from a named cache</sci:value>
						<sci:value>&lt;p&gt;A data cache is a place where you can temporarily store data records without losing information.  This component is used to read data from a named cache created by the &lt;a href=&quot;javascript:DoLink(&apos;{674E3781-33EA-42BB-9099-49CB4C3D08E6}&apos;)&quot;&gt;Cache Writer&lt;/a&gt; component.&lt;/p&gt;

&lt;p&gt;Use &lt;i&gt;CacheID&lt;/i&gt; to specify the name of the cache to read.&lt;/p&gt;

&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;This component is typically used as a mechanism for retrieving temporary data stored within a protocol.&lt;/li&gt;
&lt;li&gt;To access a cache created in a different protocol, use &lt;i&gt;Scope&lt;/i&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To join data from a cache to streaming data records use &lt;a href=&quot;javascript:DoLink(&apos;{BDEEEC41-E62B-4FDE-B0D0-8B9C96CA2497}&apos;)&quot;&gt;Join Data from Cache&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To list available caches use &lt;a href=&quot;javascript:DoLink(&apos;{704E3781-33EA-42BB-7077-05B44C3D08E6}&apos;)&quot;&gt;List Caches&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To delete a cache use &lt;a href=&quot;javascript:DoLink(&apos;{704E3781-33EA-42BB-9088-05B44C3D08E6}&apos;)&quot;&gt;Delete Cache&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To create a temporary cacheID use &lt;a href=&quot;javascript:DoLink(&apos;{B91EE521-C028-46BE-89A4-51CDE9877589}&apos;)&quot;&gt;Create Temporary CacheIDs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
						<sci:value>None</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>18.1.0.1563</sci:value>
					</sci:arg>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>29</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\File Readers\Cache Reader</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.SDWriter.1">
				<sci:component name="SD Writer" version="2">
					<sci:arg name="Destination" type="DestinationURLType" required="true" visibility="visible" multi="false" expanded="true">
						<sci:help>The filename or URL for the destination data. To save in compressed (zipped) format, add the extension .gz or .zip to the filename.</sci:help>
						<sci:member>Maximum</sci:member>
						<sci:member>IfFileExists</sci:member>
						<sci:member>CharacterEncoding</sci:member>
						<sci:value>$(UserDir)/PP/Predictions/Enamine3SHP.sd.gz</sci:value>
					</sci:arg>
					<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
						<sci:help>The maximum number of data records to write (all if value is empty)</sci:help>
					</sci:arg>
					<sci:arg name="IfFileExists" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>What to do if the given destination file already exists</sci:help>
						<sci:legalval selected="true">Overwrite</sci:legalval>
						<sci:legalval>Append</sci:legalval>
						<sci:legalval>Halt</sci:legalval>
					</sci:arg>
					<sci:arg name="CharacterEncoding" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;Indicates the character set that will be used within the file.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;ANSI&lt;/b&gt; 
is the default and specifies a character set where each character is defined by a single byte.  This 
allows the Latin-1 (ISO-8859-1) character set to be written to the file.  Virtually all applications 
can read these files.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;UTF-8&lt;/b&gt; specifies a variable length character 
set.  Each character is represented by 1 to 6 bytes.  This allows writing out all extended characters 
specified in the Unicode character sets while maintaining reasonably lengthed files.  Many applications 
do not support UTF-8 files.&lt;/li&gt;
 
&lt;li&gt;&lt;b&gt;Unicode&lt;/b&gt; and &lt;b&gt;Unicode big 
endian&lt;/b&gt; are sets where each character is represented by exactly 2 bytes (also known as UCS-2).  
Depending on which is used will determine the order in which the bytes appear for each character. Many 
applications do not support Unicode or Unicode big endian files.&lt;/li&gt;
&lt;/ul&gt;
 
&lt;p&gt;&lt;b&gt;See 
Also&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For more information about each of these encoding styles, 
go to &lt;a href=&quot;javascript:DoLink(&apos;http://www.unicode.org/&apos;)&quot;&gt;http://www.unicode.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</sci:help>
						<sci:legalval selected="true">ANSI</sci:legalval>
						<sci:legalval>UTF-8</sci:legalval>
						<sci:legalval>Unicode</sci:legalval>
						<sci:legalval>Unicode big endian</sci:legalval>
					</sci:arg>
					<sci:arg name="SD Format Options" type="StringType" required="false" visibility="visible" multi="true" expanded="true">
						<sci:help>Options for the SD Writer:
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Write Structure&lt;/b&gt;:  Includes 
available structure information with each record.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Write Properties&lt;/b&gt;:  
Includes available property information with each record.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Write Date&lt;/b&gt;:  
Writes the current date into the file.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Write Fully Padded Lines&lt;/b&gt;:  
Writes all the fields in the Atoms and Bonds lines, padding with zeroes those fields with undefined values.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Write 
Query Info&lt;/b&gt;:  Writes out MOL-file query information and also additional SciTegic molecule query 
information to the properties of the SD record.
To read the SciTegic-specific part of this information 
back in, use a SciTegic SD Reader with the ReadQueryInfo parameter set to True. (This option writes out 
substructure queries that may have come from SMARTS queries. It also stops writing query information 
for viewers that cannot handle it).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Write Two Spaces In Data Header Line&lt;/b&gt;:  
When on, data headers will be &lt;TT&gt;&amp;gt&amp;nbsp&amp;nbsp&amp;ltPropName&amp;gt&lt;/TT&gt;.  
When off, data headers will be &lt;TT&gt;&quot;&amp;gt&amp;nbsp&amp;ltPropName&amp;gt&quot;&lt;/TT&gt;.  
The standard does not specify how many spaces there should be. Making this option available for compatibility 
with 3rd party readers.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Wrap Long Property Lines&lt;/b&gt;:  By the CTFile 
standard property lines are limited to 200 characters.  When selected, properties longer than 200 characters 
are with newlines every 200 characters.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Skip Null Or Empty String Properties&lt;/b&gt;:  
When selected, properties that are either null or empty strings will be skipped upon SD export.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Write 
Dot For Empty String Properties&lt;/b&gt;:  In the CTFile format, an empty line is used to terminate 
a property value.  Because of this, there is a convention of writing a &apos;.&apos; on an empty line 
to distinguish between a property that has an empty string value (&quot;&quot;) and a property that has 
no value (or a null value).  Selecting this option enables this convention and empty string properties 
are written with a &apos;.&apos; on the first line and an empty second line to terminate the property.  
When not selected, empty string properties will be written with only a single empty terminating line 
(the same as null properties).  The default for this option is &quot;on&quot; to match the behavior in 
previous versions.  Note that empty string members of string array properties (i.e. empty lines in multi-line 
properties) will always be written with a &apos;.&apos; to prevent an empty line from terminating the 
property.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Write Templates&lt;/b&gt;:  When the molecule has SCSR sequence 
atoms that refer to residue templates, this parameter specifies whether or not to include all the template 
definitions (local and global) in a TEMPLATE block as part of the CTAB, or to include only the local 
SCSR templates, the ones that are not defined in the global templates specified by &lt;i&gt;Global Templates&lt;/i&gt; 
in the SD Reader component. The local templates always need to be saved because the SD Reader would not 
be able to read the molecule otherwise. &lt;/li&gt;
&lt;li&gt;&lt;b&gt;Convert To H2 And H+ Atom Types:&lt;/b&gt; 
&apos;H2&apos; and &apos;H+&apos; are two non-standard element types that can be assigned to atoms by 
the BIOVIA Draw sketcher. They represent unattached Hydrogen (a Hydrogen molecule) and charged Hydrogen 
(a proton), respectively. When this parameter is selected, explicit hydrogen atoms are checked to determine 
if they can be classified as &apos;H2&apos; or &apos;H+&apos; and, if so, they are written out with these 
special types instead of just &apos;H&apos;.&lt;/li&gt; 
&lt;li&gt;&lt;b&gt;Convert Pi Systems To Radicals:&lt;/b&gt; 
When checked, converts pi systems involved in pi bonds into their radical representation which is supported 
by both the V2000 and V3000 formats.  When not checked, pi bonds and pi systems are written out in V3000 
format using multiple-attachment point coordination bonds (type 9).&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Use 
2H and 3H for Hydrogen Isotopes&lt;/b&gt;: Toggles whether to explicitly write out hydrogen isotopes 
using M ISO lines in the V2000 format or MASS values in the V3000 format.  When not checked, the simpler 
&quot;D&quot; and &quot;T&quot; symbols will be used.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&amp;nbsp
&lt;/p&gt;
&lt;b&gt;V2000 
and V3000 Format Parameters&lt;/b&gt;
&lt;p&gt;
The next two options can be used to force the SD file 
format to be exclusively V2000 or V3000. If none of the options is selected, the input molecules are 
written in V2000 format unless they contain features that require the use of the V3000 format. These 
features include presence of enhanced stereo markings, more than 999 atoms or bonds, atom lists with 
more than 16 atom types or bonds of zero order (dative, coordination, hydrogen bonds). In this case, 
the output SD file might contain a mix of V2000 and V300 molecules.
&lt;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Use 
V3000 Format&lt;/b&gt;:  Force the format to be V3000 for all molecules.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Use 
V2000 Format&lt;/b&gt;:  Force the format to be V2000 for all molecules. Any molecule with features that 
require the V3000 format is sent to the Fail port. Note that the Fail port in the SD Writer is not active 
by default. If you want to use this option, make sure to activate the component Fail port by right-clicking 
on the component and selecting the &lt;i&gt;Toggle Ports&lt;/i&gt; menu.&lt;/li&gt;
&lt;/ul&gt;</sci:help>
						<sci:legalval selected="true">Write Structure</sci:legalval>
						<sci:legalval selected="true">Write Properties</sci:legalval>
						<sci:legalval selected="true">Write Date</sci:legalval>
						<sci:legalval>Write Fully Padded Lines</sci:legalval>
						<sci:legalval selected="true">Write Query Info</sci:legalval>
						<sci:legalval>Write Two Spaces In Data Header Line</sci:legalval>
						<sci:legalval selected="true">Wrap Long Property Lines</sci:legalval>
						<sci:legalval>Skip Null Or Empty String Properties</sci:legalval>
						<sci:legalval selected="true">Write Dot For Empty String Properties</sci:legalval>
						<sci:legalval>Use V3000 Format</sci:legalval>
						<sci:legalval>Use V2000 Format</sci:legalval>
						<sci:legalval selected="true">Write Templates</sci:legalval>
						<sci:legalval>Convert To H2 And H+ Atom Types</sci:legalval>
						<sci:legalval>Convert Pi Systems To Radicals</sci:legalval>
						<sci:legalval>Use 2H and 3H for Hydrogen Isotopes</sci:legalval>
					</sci:arg>
					<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false">
						<sci:help>Contains less commonly used parameters</sci:help>
						<sci:member>Name</sci:member>
						<sci:member>Comment</sci:member>
					</sci:arg>
					<sci:arg name="Name" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>Name of property that holds the name of each molecule</sci:help>
						<sci:value>Name</sci:value>
					</sci:arg>
					<sci:arg name="Comment" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>Name of the property that holds the comment to write in the CTAB header for each molecule</sci:help>
						<sci:value>Comment</sci:value>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval>ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="HasConvertPiSystemOption" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="HasWriteDotOption" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/chemistry</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Tue Oct 07 13:39:57 2014</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>SD Writer</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>DOCUMENTNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{DC8EE7B0-0620-42FE-944C-B4CD1E79480E}</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>SD Writer</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>4</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>378 -2645</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Writes an SD (structured data) file</sci:value>
						<sci:value>Writes the molecule and associated property data to the &lt;i&gt;Destination&lt;/i&gt; 
file in SD format.

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To read files 
in SD format, use the &lt;a href=&quot;javascript:DoLink(&apos;{CA65B896-4FE6-4E3A-B884-DC16B53B8D26}&apos;)&quot;&gt;SD 
Reader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To convert molecules to and from a text property containing the 
molecular connection table (CTAB) in MOL format, use &lt;a href=&quot;javascript:DoLink(&apos;{E622FBD9-9FA9-451A-A102-1800B5F28B6D}&apos;)&quot;&gt;Molecule 
to CTAB&lt;/a&gt; and &lt;a href=&quot;javascript:DoLink(&apos;{7D354B65-DDD8-4EA4-83A7-21501A8A6852}&apos;)&quot;&gt;Molecule 
from CTAB&lt;/a&gt;.&lt;/li&gt; 
&lt;/ul&gt;</sci:value>
						<sci:value>Molecule</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>9.5.0.606</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>30</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Chemistry\Data Access and Manipulation\Writers\SD Writer</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:connectid from="17" to="13" type="true"/>
			<sci:connectid from="13" to="14" type="true"/>
			<sci:connectid from="14" to="31" type="true"/>
			<sci:connectid from="31" to="33" type="true"/>
			<sci:connectid from="33" to="6" type="true"/>
			<sci:connectid from="6" to="7" type="true"/>
			<sci:connectid from="1" to="2" type="true"/>
			<sci:connectid from="2" to="3" type="true"/>
			<sci:connectid from="3" to="4" type="true"/>
			<sci:connectid from="4" to="5" type="true"/>
			<sci:connectid from="5" to="6" type="true"/>
			<sci:connectid from="12" to="8" type="true"/>
			<sci:connectid from="8" to="9" type="true"/>
			<sci:connectid from="9" to="10" type="true"/>
			<sci:connectid from="10" to="11" type="true"/>
			<sci:connectid from="11" to="6" type="true"/>
			<sci:connectid from="18" to="19" type="true"/>
			<sci:connectid from="19" to="20" type="true"/>
			<sci:connectid from="20" to="21" type="true"/>
			<sci:connectid from="21" to="22" type="false"/>
			<sci:connectid from="22" to="6" type="true"/>
			<sci:connectid from="23" to="24" type="true"/>
			<sci:connectid from="25" to="26" type="true"/>
			<sci:connectid from="26" to="27" type="true"/>
			<sci:connectid from="27" to="23" type="true"/>
			<sci:connectid from="27" to="28" type="false"/>
			<sci:connectid from="29" to="30" type="true"/>
		</sci:protocol>
	</sci:dbitem>
<!-- Exported protocol -->
<sci:component name="8.0 Protocol Warning" version="2">
<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
<sci:help>Component Icon</sci:help>
<sci:value>PROTOCOLNODE</sci:value>
</sci:arg>
<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
<sci:help>Protocol Sticky Notes</sci:help>
<sci:value>%VERSION 3%</sci:value>
<sci:value>400 -219 1222 221</sci:value>
<sci:value>250 120 20</sci:value>
<sci:value>WARNING! This is a Pipeline Pilot protocol written in version 8.0 or later. It contains features that are not supported in earlier versions of Pipeline Pilot.</sci:value>
</sci:arg>
</sci:component>
</sci:data>

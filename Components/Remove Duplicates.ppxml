<?xml version="1.0" encoding="UTF-8"?>
<sci:data xmlns:sci="http://www.SciTegic.com/" object="SciTegic.Protocol.1" format="8.0.0">
	<sci:dbitem>
		<sci:component name="Remove Duplicates" version="2">
			<sci:arg name="keyProperty" type="StringType" required="false" visibility="visible" multi="true">
				<sci:metaproplist>
					<sci:mpropval name="SCI_PromotedFrom" ishidden="true" type="StringType">
						<sci:value>keyProperty</sci:value>
					</sci:mpropval>
					<sci:propval name="SCI_PromotionRenameRule" ishidden="true">UsingParent</sci:propval>
				</sci:metaproplist>
				<sci:value>canonical_smiles</sci:value>
				<sci:value>accession</sci:value>
			</sci:arg>
			<sci:arg name="RunToCompletion" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
				<sci:help>When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - For Each Data Record&quot;, the subprotocol is re-initialized and executed in its entirety for each individual data record it processes.
&lt;p&gt;
When set to &quot;True - For Each Category&quot;, the data records are divided into categories based on the value of the Categorize Using parameter and then the subprotocol is re-initialized and executed in its entirety for each category of data records. When used in conjunction with &lt;i&gt;Parallel Processing Options&lt;/i&gt;, each category of data records will be sent to the remote server as part of one single batch.</sci:help>
				<sci:member>RunToCompletion Categorize Using</sci:member>
				<sci:legalval selected="true">False</sci:legalval>
				<sci:legalval>True - For Each Data Record</sci:legalval>
				<sci:legalval>True - For Each Category</sci:legalval>
			</sci:arg>
			<sci:arg name="RunToCompletion Categorize Using" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
				<sci:help>Required when RunToCompletion is set to &lt;i&gt;True - For Each Category&lt;/i&gt;, this parameter specifies the property or properties used to define the categories.</sci:help>
				<sci:validscript>SetInvalidDetails(&apos;This parameter is required when RunToCompletion is set to True - For Each Category&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
				<sci:enabledscript>SetDisabledDetails(&apos;To Enable, Set RunToCompletion to True - For Each Category&apos;);
Parameter(&apos;RunToCompletion&apos;) eq &apos;True - For Each Category&apos;;</sci:enabledscript>
			</sci:arg>
			<sci:arg name="Parallel Processing Options" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
				<sci:help>&lt;p&gt;
When set to True, this set of options allows the subprotocol to execute in parallel on one or more independent Pipeline Pilot servers, running locally or remotely.  Additional parameters control the number of data records to send in each process batch, the list of Pipeline Pilot servers to use, the number of protocol processes that can be executed on each server, and whether to preserve the order of the processed data records.
&lt;/p&gt;&lt;p&gt;
Use this option with care, since it will not increase throughput in all circumstances. Generally speaking, it yields improved performance when the parallelization benefits outweigh the data transfer overhead for the specified batch size.  As a rough guide, performance can be improved when each individual batch requires at least 10 seconds to execute, although this can be affected by the size of each data record.
&lt;/p&gt;&lt;p&gt;
When running the protocol with debugging, the subprotocol will provide debugging messages to detail each of the various steps of execution.  Also, components located within the parallel subprotocol will display their debugging messages as well.
&lt;/p&gt;&lt;p&gt;
For more information on the parallel subprotocol options, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/subprots/subprot_parallel_processing.htm&apos;)&quot;&gt;Parallel Processing Subprotocols&lt;/a&gt;.
&lt;/p&gt;
</sci:help>
				<sci:member>Parallel Processing Options Batch Size</sci:member>
				<sci:member>Parallel Processing Options Server</sci:member>
				<sci:member>Parallel Processing Options Preserve Order</sci:member>
				<sci:legalval>True</sci:legalval>
				<sci:legalval selected="true">False</sci:legalval>
			</sci:arg>
			<sci:arg name="Parallel Processing Options Batch Size" type="LongType" required="true" visibility="visible" multi="false" uimpl="false">
				<sci:help>&lt;p&gt;The number of records to send to the remote server(s) for each subprotocol execution.  In general, performance is optimized when the amount of time required to process each batch is at least 10 seconds (note that this can vary depending on the characteristics of the remote server&apos;s hardware).  Use a batch size of -1 to pass all data in a single batch.&lt;/p&gt;
&lt;p&gt;When &lt;i&gt;RunToCompletion&lt;/i&gt; is set to &quot;True - for each category&quot;, the batch sizes will be determined by the number of records in each individual category.  Therefore, the &lt;i&gt;Batch Size&lt;/i&gt; parameter is not applicable.</sci:help>
				<sci:enabledscript>#parallel := Parameter(&apos;Parallel Processing Options&apos;);
if (not #parallel) then
	SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
end if;
#parallel;</sci:enabledscript>
			</sci:arg>
			<sci:arg name="Parallel Processing Options Server" type="StringType" required="false" visibility="visible" multi="true" expanded="true" legalvalsenforced="false" uimpl="false">
				<sci:help>&lt;p&gt;
A comma-separated list of Pipeline Pilot servers on which to execute the parallel subprotocol.  The server names should be in the same format as the Pipeline Pilot Client&apos;s change server dialog (that is, server-name:port-number).
&lt;/p&gt;&lt;p&gt;
Specifying &lt;b&gt;localhost&lt;/b&gt; as a server will cause the subprotocol to use its own Pipeline Pilot server.  This can be useful on multi-CPU/multi-core systems (where the subprotocol jobs are spawned on the same machine) and Pipeline Pilot Linux clusters (where &apos;localhost&apos; requests spawning the subprotocol jobs on the same cluster).
&lt;/p&gt;</sci:help>
				<sci:member>Parallel Processing Options Server Processes</sci:member>
				<sci:member>Parallel Processing Options Server Run On Grid</sci:member>
				<sci:validscript>SetInvalidDetails(&apos;This parameter is required.&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
				<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
			</sci:arg>
			<sci:arg name="Parallel Processing Options Server Processes" type="StringType" required="false" visibility="visible" multi="false" uimpl="false">
				<sci:help>A comma-separated list of the maximum number of batches that can be simultaneously executed on each remote server.  The number of entries in this parameter must equal the number of servers. If &apos;*&apos; is specified as the number of processes, then that server will only launch as many batches as the administrator of the remote server has permitted.&lt;/br&gt;&lt;/br&gt;For non-Grid Engine job, the number of jobs will be limited to the value for the maximum number of simultaneous subprotocol jobs as defined in the Admin Console even if this value is higher than the value entered here or &apos;*&apos;.&lt;/br&gt;&lt;/br&gt;For Grid Engine jobs, the number of jobs will be limited to the value for the maximum number of simultaneous subprotocol grid jobs as defined in the Admin Console even if this value is higher than the value entered here or &apos;*&apos;.&lt;/br&gt;&lt;/br&gt;</sci:help>
				<sci:validscript>/* Server Processes must have the same number of comma separated entries as the Server parameter and must have a value*/
#processes := parameter();
expand(&apos;,&apos;, #processes);
#servers := parameter(&apos;Parallel Processing Options Server&apos;);
expand(&apos;,&apos;, #servers);

if (numvalues(#processes) == 0) then
	SetInvalidDetails(&apos;This parameter is required.&apos;);
else
	SetInvalidDetails(&apos;The number of server processes (&apos; . numvalues(#processes) . &apos;) must equal the number of servers (&apos; . numvalues(#servers) . &apos;).&apos;);
end if;
numvalues(#processes) &gt; 0 and numvalues(#processes) == numvalues(#servers);</sci:validscript>
				<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
			</sci:arg>
			<sci:arg name="Parallel Processing Options Server Run On Grid" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
				<sci:help>Run subprotocol on grid engine if available.  Note: If no grid engine is configured the subprotocol will still run even if this parameter is set to true.</sci:help>
				<sci:member>Parallel Processing Options Server Run On Grid Queue Name</sci:member>
				<sci:member>Parallel Processing Options Server Run On Grid Grid Options</sci:member>
				<sci:enabledscript>parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
				<sci:legalval selected="true">True</sci:legalval>
				<sci:legalval>False</sci:legalval>
			</sci:arg>
			<sci:arg name="Parallel Processing Options Server Run On Grid Queue Name" type="StringType" required="false" visibility="visible" multi="false" legalvalsenforced="false" uimpl="false">
				<sci:help>Select the queue name on the grid to submit jobs to. Leave blank to use default queue name.</sci:help>
				<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
			</sci:arg>
			<sci:arg name="Parallel Processing Options Server Run On Grid Grid Options" type="StringType" required="false" visibility="visible" multi="true" uimpl="false">
				<sci:help>&lt;p&gt;This is an array of command line options to send to the Grid engine submit command.&lt;/p&gt;
&lt;p&gt;If you just include one line, whatever you enter will be sent &quot;as is&quot; to the submission command.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Just sending options directly to command line - PBS&lt;/b&gt;
&lt;p&gt;-l procs=16 -l walltime=08:00:00 -A PROJECTID&lt;/p&gt;
&lt;/br&gt;
&lt;p&gt;There are a number of parameters that Pipeline Pilot will translate to the correct command line options for whichever supported Grid Engine you are using.&lt;/p&gt;
&lt;/br&gt;
&lt;b&gt;Example - Supported parameters&lt;/b&gt;
&lt;p&gt;Account=&amp;lt;Project/Account name&amp;gt;&lt;/p&gt;
&lt;p&gt;Maximum Execution Time=&amp;lt;DD:MM:SS&amp;gt; - LSF ignores seconds&lt;/p&gt;
&lt;p&gt;Number of Cores=&amp;lt;16&amp;gt;&lt;/p&gt;
&lt;p&gt;Parallel Environment=&amp;lt;The Parallel Environment to use&amp;gt; - Only needed for SGE&lt;/p&gt;
&lt;p&gt;Other=&amp;lt;Additional Parameters sent directly to submit command line&amp;gt;&lt;/p&gt;</sci:help>
				<sci:enabledscript>parameter(&apos;Parallel Processing Options Server Run On Grid&apos;);</sci:enabledscript>
			</sci:arg>
			<sci:arg name="Parallel Processing Options Preserve Order" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
				<sci:help>Whether to preserve the order of the data as it enters and leaves the remote subprotocol.</sci:help>
				<sci:enabledscript>SetDisabledDetails(&quot;This parameter is only applicable if &apos;Parallel Processing Options&apos; is &apos;True&apos;&quot;);
Parameter(&apos;Parallel Processing Options&apos;);</sci:enabledscript>
				<sci:legalval selected="true">True</sci:legalval>
				<sci:legalval>False</sci:legalval>
			</sci:arg>
			<sci:arg name="Tempfiles" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
				<sci:help>&lt;p&gt;A comma-delimited list of global properties, each of which is automatically populated with the name of a file in the job&apos;s temporary folder, which always has a unique name.&lt;p/&gt;For each global name, an additional global is created (with the suffix &lt;i&gt;_Filename&lt;/i&gt;) that hold only the leaf file name of the temporary file.&lt;/p&gt;</sci:help>
			</sci:arg>
			<sci:arg name="DeclareLocal" type="StringType" required="false" visibility="visible" multi="false" uimpl="true">
				<sci:help>&lt;p&gt;Lists a set of properties (without the @) to create on the global property list for this subprotocol. Separate property names with commas. Such properties can only be accessed within the scope of this subprotocol and its descendent subprotocols.&lt;p/&gt;

&lt;p&gt;Any global property not declared in this way is created on the top-level global property list and is accessible from all subprotocols, but breaks the encapsulation of the subprotocol and may collide with another property of the same name.&lt;/p&gt;

&lt;p&gt;Therefore, you should always declare a new global property in the &lt;i&gt;DeclareLocal&lt;/i&gt; parameter, to minimize the scope of the global property to the subprotocol where it is used.&lt;/p&gt;

&lt;p&gt;The example &lt;i&gt;DeclareLocal&lt;/i&gt; value below creates 3 global properties in the subprotocol scope. Note that you can initialize the declared global value with a scalar value using the &quot;:=&quot; syntax, as shown. You can surround text string values with quotes to aid clarity.&lt;/p&gt;
&lt;pre&gt;
    SubP_Counter := 0, SubP_NameHash, SubP_TitleText:=&quot;Sample 1&quot;
&lt;/pre&gt;
</sci:help>
			</sci:arg>
			<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
				<sci:help>Component Attributes</sci:help>
				<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
				<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
				<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
				<sci:legalval>ComponentRunsLocal</sci:legalval>
			</sci:arg>
			<sci:arg name="TagName" type="StringType" required="true" visibility="visible" multi="false">
				<sci:metaproplist>
					<sci:mpropval name="SCI_PromotedFrom" ishidden="true" type="StringType">
						<sci:value>TagName</sci:value>
					</sci:mpropval>
					<sci:propval name="SCI_PromotionRenameRule" ishidden="true">UsingParent</sci:propval>
				</sci:metaproplist>
				<sci:help>The name of the property which represents the tag</sci:help>
				<sci:value>isReference</sci:value>
			</sci:arg>
			<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
				<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
				<sci:legalval selected="true">Halt</sci:legalval>
				<sci:legalval>Fail</sci:legalval>
				<sci:legalval>Pass</sci:legalval>
			</sci:arg>
			<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
				<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
				<sci:legalval selected="true">Halt</sci:legalval>
				<sci:legalval>Fail</sci:legalval>
				<sci:legalval>Pass</sci:legalval>
			</sci:arg>
			<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>Custom Error Message</sci:help>
			</sci:arg>
			<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:value>remove duplicates
(04/26/2019)</sci:value>
			</sci:arg>
			<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
				<sci:help>Protocol AutoLayout</sci:help>
				<sci:value>1</sci:value>
			</sci:arg>
			<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
				<sci:value>0</sci:value>
			</sci:arg>
			<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
				<sci:value>FilterNode</sci:value>
			</sci:arg>
			<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
				<sci:help>Component Revision</sci:help>
				<sci:value>790</sci:value>
			</sci:arg>
			<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:value>{D68192E2-3030-2D44-8911-47352EF9F672}</sci:value>
			</sci:arg>
			<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:value>666 -2295</sci:value>
			</sci:arg>
			<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
				<sci:help>By Ref</sci:help>
				<sci:value>0</sci:value>
			</sci:arg>
			<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
				<sci:value>100</sci:value>
				<sci:value>Remove Duplicates</sci:value>
				<sci:value/>
				<sci:value>Generic</sci:value>
				<sci:value/>
				<sci:value>Generic</sci:value>
				<sci:value>Records passing out of any unconnected pass ports of components inside the subprotocol</sci:value>
				<sci:value>Generic</sci:value>
				<sci:value>Records passing out of any unconnected fail ports of components inside the subprotocol</sci:value>
			</sci:arg>
			<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>The server version when this component was registered</sci:help>
				<sci:value>18.1.100.11</sci:value>
			</sci:arg>
			<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
			<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>Protocol Sticky Notes</sci:help>
			</sci:arg>
			<sci:arg name="ProtocolScale2" type="LongType" required="false" visibility="nevershow" multi="false">
				<sci:help>Protocol Scale</sci:help>
				<sci:value>100</sci:value>
			</sci:arg>
			<sci:arg name="Protocol Options" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>Protocol Options</sci:help>
				<sci:legalval>Owner Access Only</sci:legalval>
			</sci:arg>
			<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>The user who registered this component.</sci:help>
				<sci:value>peter</sci:value>
			</sci:arg>
			<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>The date this component was registered.</sci:help>
				<sci:value>Fri Apr 03 22:41:25 2020</sci:value>
			</sci:arg>
			<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
				<sci:help>Local Component Identifier</sci:help>
				<sci:value>56</sci:value>
			</sci:arg>
			<sci:arg name="OriginalPackage" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>OriginalPackage</sci:help>
				<sci:value>scitegic/coreutils</sci:value>
			</sci:arg>
			<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
				<sci:help>The original path within the database of this component.</sci:help>
				<sci:value>Protocols\Shared\Peter\Components\Remove Duplicates</sci:value>
			</sci:arg>
		</sci:component>
		<sci:protocol>
			<sci:data object="SciTegic.DataCacheIO.1">
				<sci:component name="Cache Writer" version="2">
					<sci:arg name="CacheID" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>The name of the cache to write, for example: A, 1234 or MyCache.  To create a temporary cacheID use the &lt;a href=&quot;javascript:DoLink(&apos;{B91EE521-C028-46BE-89A4-51CDE9877589}&apos;)&quot;&gt;Create Temporary CacheIDs&lt;/a&gt; component.
</sci:help>
						<sci:member>Maximum</sci:member>
						<sci:member>Append</sci:member>
						<sci:member>Scope</sci:member>
						<sci:value>not tagged</sci:value>
					</sci:arg>
					<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
						<sci:help>The maximum number of data records to write to the cache.</sci:help>
					</sci:arg>
					<sci:arg name="Append" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>If True, append to a currently-existing cache if possible; if False, clear any current contents of the cache</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="Scope" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>The scope of the cache determines the length of time the cache exists and 
the visibility of the cache to other jobs and users. &lt;I&gt;Job Only&lt;/I&gt; creates a cache that is visible
only to components in the currently-running protocol, and which is deleted when the protocol finishes.
&lt;I&gt;User Only&lt;/I&gt; creates a cache that is visible to components in any protocol a particular user runs;  
&lt;I&gt;All Users&lt;/I&gt; creates a cache that is visible to any user on the Pipeline Pilot server. 
&lt;P&gt;Each scope has its own namespace, so you have to 
specify both the &lt;i&gt;CacheID&lt;/i&gt; and the &lt;i&gt;Scope&lt;/i&gt; to fully determine a particular cache.&lt;/P&gt;
&lt;P&gt;Since the caches created with scopes &lt;I&gt;User Only&lt;/I&gt; and &lt;I&gt;All Users&lt;/I&gt;
may be accessed by multiple jobs, you should use caution, as problems may arise if two jobs try to write to 
the same shared cache at once. Also, to save disk space, you are responsible for deleting these caches
when finished, using the &lt;I&gt;Delete Cache&lt;/I&gt; component. &lt;/P&gt;
			</sci:help>
						<sci:legalval selected="true">Job Only</sci:legalval>
						<sci:legalval>User Only</sci:legalval>
						<sci:legalval>All Users</sci:legalval>
					</sci:arg>
					<sci:arg name="Create Index for Join" type="BoolType" required="false" visibility="visible" multi="false">
						<sci:help>If set to True, creates an index for the cache that can be used by subsequent &lt;a href=&quot;javascript:DoLink(&apos;{BDEEEC41-E62B-4FDE-B0D0-8B9C96CA2497}&apos;)&quot;&gt;Join Data from Cache&lt;/a&gt; components.  As long as the later Join components use identical settings, the created index will greatly improve the performance of the join.  When set to true, you will also need to update &lt;i&gt;JoinUsing&lt;/i&gt;, &lt;i&gt;JoinUsingListType&lt;/i&gt;, &lt;i&gt;JoinPropertyType&lt;/i&gt;, and &lt;i&gt;IgnoreCase&lt;/i&gt; to match your Join component.</sci:help>
						<sci:member>JoinUsing</sci:member>
						<sci:member>IgnoreCase</sci:member>
						<sci:member>JoinPropertyType</sci:member>
						<sci:member>JoinUsingListType</sci:member>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="JoinUsing" type="PropertyNameType" required="false" visibility="visible" multi="false">
						<sci:help>The name of the property or properties to index for use by &lt;a href=&quot;javascript:DoLink(&apos;{BDEEEC41-E62B-4FDE-B0D0-8B9C96CA2497}&apos;)&quot;&gt;Join Data from Cache&lt;/a&gt; components.  This parameter must match the identically named parameter on the Join component in order to benefit from the created index.</sci:help>
						<sci:validscript>SetInvalidDetails(&apos;This parameter is required.&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
						<sci:enabledscript>Parameter(&apos;Create Index for Join&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="JoinUsingListType" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;Indicates how &lt;i&gt;JoinUsing&lt;/i&gt; properties are interpreted for creating a cache index when more than one property is listed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;UseFirstDefinedValue&lt;/i&gt;: The join will use only the first property in the list with a defined value for a record.
&lt;li&gt;&lt;i&gt;UseAllValues&lt;/i&gt;: The join will use the concatentation of the values of all properties listed; a match occurs only when records share the same value for all the properties.
&lt;/ul&gt;
&lt;p&gt;This parameter must match the identically named parameter on the Join component in order to benefit from the created index.&lt;/p&gt;</sci:help>
						<sci:enabledscript>Parameter(&apos;Create Index for Join&apos;);</sci:enabledscript>
						<sci:legalval>UseFirstDefinedValue</sci:legalval>
						<sci:legalval selected="true">UseAllValues</sci:legalval>
					</sci:arg>
					<sci:arg name="JoinPropertyType" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>The data type of the &lt;i&gt;JoinUsing&lt;/i&gt; property. This parameter must match the identically named parameter on the Join component in order to benefit from the created index.</sci:help>
						<sci:enabledscript>Parameter(&apos;Create Index for Join&apos;);</sci:enabledscript>
						<sci:legalval>IsNumeric</sci:legalval>
						<sci:legalval selected="true">IsText</sci:legalval>
						<sci:legalval>IsDate</sci:legalval>
					</sci:arg>
					<sci:arg name="IgnoreCase" type="BoolType" required="false" visibility="visible" multi="false">
						<sci:help>Consider lower-case and upper-case letters as equivalent when determining the identity of &lt;i&gt;JoinUsing&lt;/i&gt; property values.  This parameter must match the identically named parameter on the Join component in order to benefit from the created index.</sci:help>
						<sci:enabledscript>Parameter(&apos;Create Index for Join&apos;);</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false">
						<sci:help>Additional parameters to control the component behavior.</sci:help>
						<sci:member>Write Globals</sci:member>
						<sci:member>Enable Compression</sci:member>
						<sci:member>Password</sci:member>
					</sci:arg>
					<sci:arg name="Write Globals" type="StringType" required="false" visibility="visible" multi="true">
						<sci:help>&lt;p&gt;Specifies which globals, if any, are written into the cache.&lt;/p&gt;
&lt;p&gt;The value is an array of top-level global names or global nodes specified using XPath notation. Note that node names should end with a forward slash (/).&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="Enable Compression" type="BoolType" required="false" visibility="visible" multi="false" expanded="true" legalvalsenforced="false">
						<sci:help>&lt;p&gt;Specifies if data written to disk should be compressed.&lt;/p&gt;
&lt;b&gt;Note:&lt;b&gt; Starting with 2017 R2, compression uses the LZ4 compression algorithm which is very fast.  Turning off compression will typically result in 6 to 10 times increased disk usage with little or no improvement in performance.  You should test your own data for comparison.</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Password" type="xpass" encrypt="bf_1" required="false" visibility="visible" multi="false" legalvalsenforced="false">
						<sci:help>&lt;p&gt;
An optional password to assign to the cache content. Once set, the password must be used to read data back from the cache. It is useful to control access to a new public data cache.
&lt;/p&gt;
&lt;p&gt;
For an existing cache, set the password to be able to overwrite or append to the content.
&lt;/p&gt;
&lt;p&gt;
Note that the user who writes a password-protected cache does not require a password to access or overwrite the content.
&lt;/p&gt;
</sci:help>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval>ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="CacheCategory" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The cache type, that determines its folder location within the job.
               </sci:help>
					</sci:arg>
					<sci:arg name="Mode" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:help>Specifies the action of this component:

 - Writer: The component writes data records to a new cache.
 - Reader: The component reads data records from a pre-existing, completed cache.
 - Writer/Reader: The component writes data out to a cache and then reads it in again to generate new records.
               </sci:help>
						<sci:legalval selected="true">Writer</sci:legalval>
						<sci:legalval>Reader</sci:legalval>
						<sci:legalval>Writer/Reader</sci:legalval>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Mon Aug 28 09:11:28 2017</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
						<sci:help>Automatically update the component display name when the &quot;CacheID&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
						<sci:value>
#displayName := Parameter(&apos;CacheID&apos;, 2);
if(StrLength(#displayName) &gt; 0) then	
	&apos;Write cache &apos; . #displayName;
else
	&apos;&apos;;
end if;
			</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>666 -95</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>DATABASENODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{674E3781-33EA-42BB-9099-49CB4C3D08E6}</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Cache Writer</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Writes data records to a named cache</sci:value>
						<sci:value>&lt;p&gt;A data cache is place where you can temporarily store data records without losing information.  Use &lt;i&gt;CacheID&lt;/i&gt; to specify the name of the cache.  A cache can contain records of different types.&lt;/p&gt;

&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To avoid clashes with other cache names, you can use the &lt;a href=&quot;javascript:DoLink(&apos;{B91EE521-C028-46BE-89A4-51CDE9877589}&apos;)&quot;&gt;Create Temporary CacheIDs&lt;/a&gt; component to obtain a global with a unique cacheID.  For example, you could have a temporary cacheID identified by MYCACHE and set &lt;i&gt;CacheID&lt;/i&gt; to $(MYCACHE).&lt;/li&gt;
&lt;li&gt;Typically, a cache is scoped to only be visible to component in the currently-running job.  To create caches that outlive a job, and may be seen by other users, use the &lt;I&gt;Scope&lt;/I&gt; parameter.&lt;/li&gt;
&lt;li&gt;Caches can be used with the &lt;a href=&quot;javascript:DoLink(&apos;{BDEEEC41-E62B-4FDE-B0D0-8B9C96CA2497}&apos;)&quot;&gt;Join Data from Cache&lt;/a&gt; component to add properties to a separate data stream.  To improve the performance of the join, the cache can be indexed during creation by using the &lt;i&gt;Create Index for Join&lt;/i&gt; parameter.&lt;/li&gt;
&lt;li&gt;A password may be assigned to a new cache to control read and write access to the content.&lt;/p&gt;
&lt;/ul&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To retrieve data from a cache, use &lt;a href=&quot;javascript:DoLink(&apos;{704E3781-33EA-42BB-9099-05B44C3D08E6}&apos;)&quot;&gt;Cache Reader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To join against a cache, use &lt;a href=&quot;javascript:DoLink(&apos;{BDEEEC41-E62B-4FDE-B0D0-8B9C96CA2497}&apos;)&quot;&gt;Join Data from Cache&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To delete a cache, use &lt;a href=&quot;javascript:DoLink(&apos;{704E3781-33EA-42BB-9088-05B44C3D08E6}&apos;)&quot;&gt;Delete Cache&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>18.1.0.1563</sci:value>
					</sci:arg>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>11</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\File Writers\Cache Writer</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.EvaluateExpression.1">
				<sci:component name="Custom Manipulator (PilotScript)" version="2">
					<sci:arg name="Expression" type="ExpressionType" required="true" visibility="visible" multi="false" expanded="true" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>Expression (or list of expressions separated by semi-colons) to evaluate.</sci:help>
						<sci:member>Initial Expression</sci:member>
						<sci:member>Final Expression</sci:member>
						<sci:member>Keep Calculated Properties</sci:member>
						<sci:value>property(&apos;keyProperty&apos;) := &quot;$(keyProperty)&quot;;
expand(&apos;,&apos;, property(&apos;keyProperty&apos;));
property(&apos;unique&apos;) := &apos;&apos;;
for #i in 1 .. numvalues(property(&apos;keyProperty&apos;)) loop
	property(&apos;unique&apos;) := property(&apos;unique&apos;) . &apos;|&apos; . property(property(&apos;keyProperty&apos;)[#i]);
end loop;</sci:value>
					</sci:arg>
					<sci:arg name="Initial Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>&lt;p&gt;
This expression is executed only the first time data passes into the component.
&lt;p/&gt; 
Since there is no data available at initialization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="Final Expression" type="ExpressionType" required="false" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>&lt;p&gt;
This expression is executed only at finalization (after the last data passes out of the component).
&lt;p/&gt; 
Since there is no data available at finalization time, only expressions referencing local or global properties are allowed.
&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="Keep Calculated Properties" type="BoolType" required="true" visibility="visible" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>Adds any properties calculated in this component to a data record&apos;s property list.</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="keyProperty" type="LinkSingleParentParameterType" required="false" visibility="visible" multi="true">
						<sci:value>keyProperty</sci:value>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Custom Error Message</sci:help>
					</sci:arg>
					<sci:arg name="Do Screen" type="BoolType" required="false" visibility="nevershow" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>When TRUE, controls which exit port is used for
each data record by evaluating the final expression
(or only one) listed in the &quot;Expression&quot; parameter.
   -Pass (green) port when expression true
   -Fail (red) port when expression false</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="ExpressionVersion" type="LongType" required="false" visibility="nevershow" multi="false" implbase="{0995D675-7EE2-432C-95DF-E91C14052B22}">
						<sci:help>Version of expression parser to use.</sci:help>
						<sci:value>2</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Mon Jan 21 09:55:43 2008</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
						<sci:help>Automatically update the component display name when the &quot;Expression&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
						<sci:value>#displayName := trim(Parameter(&apos;Expression&apos;, 2));
if(strlength(#displayName) &gt; 0) then	
	/* Find the first line break */
	#nl := FindSubstring(#displayName, &quot;\r&quot;);
	if #nl &lt;= 0 then
		#nl := FindSubstring(#displayName, &quot;\n&quot;);
	end if;

	/* Keep the first line only */
	if (#nl &gt; 0) then
		StrErase(#displayName, #nl);
	end if;
	
	#displayName;
else
	&quot;&quot;;
end if;</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Custom Manipulator (PilotScript)</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>EXPRESSIONNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{0995D675-7EE2-432C-95DF-E91C14052B22}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>90 -295</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Applies a PilotScript expression to each data record</sci:value>
						<sci:value>&lt;p&gt;PilotScript is the native scripting language in Pipeline Pilot.  It is based on PL/SQL and allows you to query or alter the properties on data records.  For example, the expression:

&lt;blockquote&gt;
&lt;code&gt;A := 10;&lt;/code&gt;
&lt;/blockquote&gt;
creates a property named &quot;A&quot; and sets the value to &quot;10&quot;.&lt;/p&gt;

&lt;p&gt;For each incoming data record the PilotScript statements in &lt;i&gt;Expression&lt;/i&gt; are evaluated.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To initialize global variables such as counters, use &lt;i&gt;Initial Expression&lt;/i&gt;.&lt;/li&gt; 
&lt;li&gt;To clean up global variables or calculate final results use &lt;i&gt;Final Expression&lt;/i&gt;.&lt;/li&gt;
&lt;li&gt;Parameters on Custom Manipulators do not become global variables that can be accessed via &lt;i&gt;@ParameterName&lt;/i&gt; syntax.  They must be accessed by using the &lt;i&gt;Parameter(&apos;ParameterName&apos;)&lt;/i&gt; function or by using token substitution via &lt;i&gt;$(ParameterName)&lt;/i&gt; syntax.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For more information on PilotScript, see &lt;a href=&quot;javascript:DoLink(&apos;scihelpdocs/user/pscript/pscript_overview.htm&apos;)&quot;&gt;PilotScript Overview&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To use PilotScript to filter data records use &lt;a href=&quot;javascript:DoLink(&apos;{DD58ECD1-516F-48FE-A5DB-8328AED680F2}&apos;)&quot;&gt;Custom Filter (PilotScript)&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>7.0.0.35</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>13</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Property Manipulators\Custom Manipulator (PilotScript)</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.EvaluateExpression.1">
				<sci:component name="Is Tagged Filter" version="2">
					<sci:arg name="TagName" type="LinkSingleParentParameterType" required="true" visibility="visible" multi="false">
						<sci:metaproplist>
							<sci:propval name="SCI_InitializeUsingOrigType" ishidden="true">StringType</sci:propval>
						</sci:metaproplist>
						<sci:help>The name of the property which represents the tag</sci:help>
						<sci:value>TagName</sci:value>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Custom Error Message</sci:help>
					</sci:arg>
					<sci:arg name="Expression" type="ExpressionType" required="true" visibility="nevershow" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
						<sci:help>The expression used to filter the data.
When it evaluates as TRUE, the data record
continues out the Pass (green) port.  When it
evaluates as FALSE, data exits through the Fail (red) port.</sci:help>
						<sci:value>property(&apos;$(TagName)&apos;) IS NOT DEFINED;</sci:value>
					</sci:arg>
					<sci:arg name="Final Expression" type="ExpressionType" required="false" visibility="nevershow" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
						<sci:help>An expression evaluated only when the
component is finalized (once the last data
record has passed).
*Since there is no data available at finalization
  time, only expressions referencing global 
  properties are allowed.</sci:help>
					</sci:arg>
					<sci:arg name="Keep Calculated Properties" type="BoolType" required="true" visibility="nevershow" multi="false">
						<sci:help>Allows any properties that were calculated in
&quot;Expression&quot; to be included with the exiting
record.
Otherwise, these properties are removed after
the evaluation is complete.</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="Initial Expression" type="ExpressionType" required="false" visibility="nevershow" multi="false" implbase="{DD58ECD1-516F-48FE-A5DB-8328AED680F2}">
						<sci:help>An expression evaluated only when the component
is first inialized (when the first data record enters).
  (Since there is no data available at initialization
   time, only expressions referencing global
   properties are allowed.)</sci:help>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Tue Dec 03 16:15:41 2002</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>Is Tagged Filter</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>FilterNode</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{F69870E0-BAF7-43E4-8B09-F53C47DB94F3}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>378 -295</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Passes data records that are not tagged (formerly called &quot;Remove Tagged Filter&quot;)
</sci:value>
						<sci:value>&lt;p&gt;Data records are inspected for the property specified by &lt;i&gt;TagName&lt;/i&gt;.  If the property is defined, with any value, then the data record is considered tagged.  Data records that are not tagged are sent out the Pass port. Tagged records are sent out the Fail port.&lt;/p&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;Data can be tagged using &lt;a href=&quot;javascript:DoLink(&apos;{BCF71EB2-1ED7-4B27-B263-BA531EABFC9C}&apos;)&quot;&gt;Tag Data&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

</sci:value>
						<sci:value>Generic Data</sci:value>
						<sci:value/>
						<sci:value>Generic Data</sci:value>
						<sci:value>Data records that do not contain the specified Tag property.</sci:value>
						<sci:value>Generic Data</sci:value>
						<sci:value>Data records that contain the specified Tag property.</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>6</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Property Filters\Is Tagged Filter</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.DataCacheIO.1">
				<sci:component name="Cache Writer" version="2">
					<sci:arg name="CacheID" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>The name of the cache to write, for example: A, 1234 or MyCache.  To create a temporary cacheID use the &lt;a href=&quot;javascript:DoLink(&apos;{B91EE521-C028-46BE-89A4-51CDE9877589}&apos;)&quot;&gt;Create Temporary CacheIDs&lt;/a&gt; component.
</sci:help>
						<sci:member>Maximum</sci:member>
						<sci:member>Append</sci:member>
						<sci:member>Scope</sci:member>
						<sci:value>tagged</sci:value>
					</sci:arg>
					<sci:arg name="Maximum" type="LongType" required="false" visibility="visible" multi="false">
						<sci:help>The maximum number of data records to write to the cache.</sci:help>
					</sci:arg>
					<sci:arg name="Append" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>If True, append to a currently-existing cache if possible; if False, clear any current contents of the cache</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="Scope" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>The scope of the cache determines the length of time the cache exists and 
the visibility of the cache to other jobs and users. &lt;I&gt;Job Only&lt;/I&gt; creates a cache that is visible
only to components in the currently-running protocol, and which is deleted when the protocol finishes.
&lt;I&gt;User Only&lt;/I&gt; creates a cache that is visible to components in any protocol a particular user runs;  
&lt;I&gt;All Users&lt;/I&gt; creates a cache that is visible to any user on the Pipeline Pilot server. 
&lt;P&gt;Each scope has its own namespace, so you have to 
specify both the &lt;i&gt;CacheID&lt;/i&gt; and the &lt;i&gt;Scope&lt;/i&gt; to fully determine a particular cache.&lt;/P&gt;
&lt;P&gt;Since the caches created with scopes &lt;I&gt;User Only&lt;/I&gt; and &lt;I&gt;All Users&lt;/I&gt;
may be accessed by multiple jobs, you should use caution, as problems may arise if two jobs try to write to 
the same shared cache at once. Also, to save disk space, you are responsible for deleting these caches
when finished, using the &lt;I&gt;Delete Cache&lt;/I&gt; component. &lt;/P&gt;
			</sci:help>
						<sci:legalval selected="true">Job Only</sci:legalval>
						<sci:legalval>User Only</sci:legalval>
						<sci:legalval>All Users</sci:legalval>
					</sci:arg>
					<sci:arg name="Create Index for Join" type="BoolType" required="false" visibility="visible" multi="false">
						<sci:help>If set to True, creates an index for the cache that can be used by subsequent &lt;a href=&quot;javascript:DoLink(&apos;{BDEEEC41-E62B-4FDE-B0D0-8B9C96CA2497}&apos;)&quot;&gt;Join Data from Cache&lt;/a&gt; components.  As long as the later Join components use identical settings, the created index will greatly improve the performance of the join.  When set to true, you will also need to update &lt;i&gt;JoinUsing&lt;/i&gt;, &lt;i&gt;JoinUsingListType&lt;/i&gt;, &lt;i&gt;JoinPropertyType&lt;/i&gt;, and &lt;i&gt;IgnoreCase&lt;/i&gt; to match your Join component.</sci:help>
						<sci:member>JoinUsing</sci:member>
						<sci:member>IgnoreCase</sci:member>
						<sci:member>JoinPropertyType</sci:member>
						<sci:member>JoinUsingListType</sci:member>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="JoinUsing" type="PropertyNameType" required="false" visibility="visible" multi="false">
						<sci:help>The name of the property or properties to index for use by &lt;a href=&quot;javascript:DoLink(&apos;{BDEEEC41-E62B-4FDE-B0D0-8B9C96CA2497}&apos;)&quot;&gt;Join Data from Cache&lt;/a&gt; components.  This parameter must match the identically named parameter on the Join component in order to benefit from the created index.</sci:help>
						<sci:validscript>SetInvalidDetails(&apos;This parameter is required.&apos;);
Parameter() ne &apos;&apos;;</sci:validscript>
						<sci:enabledscript>Parameter(&apos;Create Index for Join&apos;);</sci:enabledscript>
					</sci:arg>
					<sci:arg name="JoinUsingListType" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;Indicates how &lt;i&gt;JoinUsing&lt;/i&gt; properties are interpreted for creating a cache index when more than one property is listed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;UseFirstDefinedValue&lt;/i&gt;: The join will use only the first property in the list with a defined value for a record.
&lt;li&gt;&lt;i&gt;UseAllValues&lt;/i&gt;: The join will use the concatentation of the values of all properties listed; a match occurs only when records share the same value for all the properties.
&lt;/ul&gt;
&lt;p&gt;This parameter must match the identically named parameter on the Join component in order to benefit from the created index.&lt;/p&gt;</sci:help>
						<sci:enabledscript>Parameter(&apos;Create Index for Join&apos;);</sci:enabledscript>
						<sci:legalval>UseFirstDefinedValue</sci:legalval>
						<sci:legalval selected="true">UseAllValues</sci:legalval>
					</sci:arg>
					<sci:arg name="JoinPropertyType" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>The data type of the &lt;i&gt;JoinUsing&lt;/i&gt; property. This parameter must match the identically named parameter on the Join component in order to benefit from the created index.</sci:help>
						<sci:enabledscript>Parameter(&apos;Create Index for Join&apos;);</sci:enabledscript>
						<sci:legalval>IsNumeric</sci:legalval>
						<sci:legalval selected="true">IsText</sci:legalval>
						<sci:legalval>IsDate</sci:legalval>
					</sci:arg>
					<sci:arg name="IgnoreCase" type="BoolType" required="false" visibility="visible" multi="false">
						<sci:help>Consider lower-case and upper-case letters as equivalent when determining the identity of &lt;i&gt;JoinUsing&lt;/i&gt; property values.  This parameter must match the identically named parameter on the Join component in order to benefit from the created index.</sci:help>
						<sci:enabledscript>Parameter(&apos;Create Index for Join&apos;);</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false">
						<sci:help>Additional parameters to control the component behavior.</sci:help>
						<sci:member>Write Globals</sci:member>
						<sci:member>Enable Compression</sci:member>
						<sci:member>Password</sci:member>
					</sci:arg>
					<sci:arg name="Write Globals" type="StringType" required="false" visibility="visible" multi="true">
						<sci:help>&lt;p&gt;Specifies which globals, if any, are written into the cache.&lt;/p&gt;
&lt;p&gt;The value is an array of top-level global names or global nodes specified using XPath notation. Note that node names should end with a forward slash (/).&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="Enable Compression" type="BoolType" required="false" visibility="visible" multi="false" expanded="true" legalvalsenforced="false">
						<sci:help>&lt;p&gt;Specifies if data written to disk should be compressed.&lt;/p&gt;
&lt;b&gt;Note:&lt;b&gt; Starting with 2017 R2, compression uses the LZ4 compression algorithm which is very fast.  Turning off compression will typically result in 6 to 10 times increased disk usage with little or no improvement in performance.  You should test your own data for comparison.</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Password" type="xpass" encrypt="bf_1" required="false" visibility="visible" multi="false" legalvalsenforced="false">
						<sci:help>&lt;p&gt;
An optional password to assign to the cache content. Once set, the password must be used to read data back from the cache. It is useful to control access to a new public data cache.
&lt;/p&gt;
&lt;p&gt;
For an existing cache, set the password to be able to overwrite or append to the content.
&lt;/p&gt;
&lt;p&gt;
Note that the user who writes a password-protected cache does not require a password to access or overwrite the content.
&lt;/p&gt;
</sci:help>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval>ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="CacheCategory" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The cache type, that determines its folder location within the job.
               </sci:help>
					</sci:arg>
					<sci:arg name="Mode" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:help>Specifies the action of this component:

 - Writer: The component writes data records to a new cache.
 - Reader: The component reads data records from a pre-existing, completed cache.
 - Writer/Reader: The component writes data out to a cache and then reads it in again to generate new records.
               </sci:help>
						<sci:legalval selected="true">Writer</sci:legalval>
						<sci:legalval>Reader</sci:legalval>
						<sci:legalval>Writer/Reader</sci:legalval>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Mon Aug 28 09:11:28 2017</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
						<sci:help>Automatically update the component display name when the &quot;CacheID&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
						<sci:value>
#displayName := Parameter(&apos;CacheID&apos;, 2);
if(StrLength(#displayName) &gt; 0) then	
	&apos;Write cache &apos; . #displayName;
else
	&apos;&apos;;
end if;
			</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>666 -470</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>DATABASENODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{674E3781-33EA-42BB-9099-49CB4C3D08E6}</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Cache Writer</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Writes data records to a named cache</sci:value>
						<sci:value>&lt;p&gt;A data cache is place where you can temporarily store data records without losing information.  Use &lt;i&gt;CacheID&lt;/i&gt; to specify the name of the cache.  A cache can contain records of different types.&lt;/p&gt;

&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To avoid clashes with other cache names, you can use the &lt;a href=&quot;javascript:DoLink(&apos;{B91EE521-C028-46BE-89A4-51CDE9877589}&apos;)&quot;&gt;Create Temporary CacheIDs&lt;/a&gt; component to obtain a global with a unique cacheID.  For example, you could have a temporary cacheID identified by MYCACHE and set &lt;i&gt;CacheID&lt;/i&gt; to $(MYCACHE).&lt;/li&gt;
&lt;li&gt;Typically, a cache is scoped to only be visible to component in the currently-running job.  To create caches that outlive a job, and may be seen by other users, use the &lt;I&gt;Scope&lt;/I&gt; parameter.&lt;/li&gt;
&lt;li&gt;Caches can be used with the &lt;a href=&quot;javascript:DoLink(&apos;{BDEEEC41-E62B-4FDE-B0D0-8B9C96CA2497}&apos;)&quot;&gt;Join Data from Cache&lt;/a&gt; component to add properties to a separate data stream.  To improve the performance of the join, the cache can be indexed during creation by using the &lt;i&gt;Create Index for Join&lt;/i&gt; parameter.&lt;/li&gt;
&lt;li&gt;A password may be assigned to a new cache to control read and write access to the content.&lt;/p&gt;
&lt;/ul&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To retrieve data from a cache, use &lt;a href=&quot;javascript:DoLink(&apos;{704E3781-33EA-42BB-9099-05B44C3D08E6}&apos;)&quot;&gt;Cache Reader&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To join against a cache, use &lt;a href=&quot;javascript:DoLink(&apos;{BDEEEC41-E62B-4FDE-B0D0-8B9C96CA2497}&apos;)&quot;&gt;Join Data from Cache&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To delete a cache, use &lt;a href=&quot;javascript:DoLink(&apos;{704E3781-33EA-42BB-9088-05B44C3D08E6}&apos;)&quot;&gt;Delete Cache&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>18.1.0.1563</sci:value>
					</sci:arg>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>10</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\File Writers\Cache Writer</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.PropertyFunctions.1">
				<sci:component name="Remove Properties" version="2">
					<sci:arg name="PropertyList" type="PropertyNameType" required="true" visibility="visible" multi="true">
						<sci:help>The names of properties to remove from each data record entering the component</sci:help>
						<sci:value>keyProperty</sci:value>
						<sci:value>unique</sci:value>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Custom Error Message</sci:help>
					</sci:arg>
					<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:help>the action to perform</sci:help>
						<sci:value>Remove</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Tue Sep 13 07:18:43 2016</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
						<sci:help>Automatically update the component display name when the &quot;PropertyList&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
						<sci:value>#propertyList := Parameter(&apos;PropertyList&apos;);
#displayName := &apos;&apos;;
for #i in 1 .. numvalues(#propertyList) loop
  #prop := trim(#propertyList[#i]);
  if (strlength(#prop) &gt; 0) then
    if (strlength(#displayName) &gt; 0) then
	  #displayName .= &apos;, &apos;;
	end if;
    #displayName .= #prop;
  end if;
end loop;
if(strlength(#displayName) &gt; 0) then		
	&apos;Remove &apos; . #displayName;
else
	&quot;&quot;;
end if;</sci:value>
					</sci:arg>
					<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol AutoLayout</sci:help>
						<sci:value>true</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>EXPRESSIONNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
						<sci:help>Component Revision</sci:help>
						<sci:value>100</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>SubProtocol</sci:value>
					</sci:arg>
					<sci:arg name="ProtocolScale" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Scale</sci:help>
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>666 -820</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{C2ED35FF-5397-4877-AADB-10F1A15D60E2}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Removes the specified properties</sci:value>
						<sci:value>For each data record that enters the component, the properties specified by &lt;i&gt;PropertyList&lt;/i&gt; are removed from the  record. 

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;To keep only a few properties from a long list, it may be more efficient to instead use &lt;a href=&quot;javascript:DoLink(&apos;{456195EF-9708-4367-B3DD-21EBF3796604}&apos;)&quot;&gt;Keep Properties&lt;/a&gt;.&lt;/p&gt;</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value>Data records with the specified properties removed</sci:value>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>17.1.0.119</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>By Ref</sci:help>
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Sticky Notes</sci:help>
					</sci:arg>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>20</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Property Manipulators\Remove Properties</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.PropertyFunctions.1">
				<sci:component name="No-op" version="2">
					<sci:arg name="DataActionOnError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When a General or DataType error occurs during processing:  
  LeaveData: The data is passed unalterd
  ClearData: The data is cleared before being passed (an empty data item)
  DeleteData: The data is deleted and not passed</sci:help>
						<sci:legalval selected="true">LeaveData</sci:legalval>
						<sci:legalval>ClearData</sci:legalval>
						<sci:legalval>DeleteData</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval>ComponentReturnsPass</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>CustomErrorText</sci:help>
					</sci:arg>
					<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:help>the action to perform</sci:help>
						<sci:value>PassDataToPort</sci:value>
					</sci:arg>
					<sci:arg name="Port" type="LongType" required="true" visibility="nevershow" multi="false">
						<sci:help>the port to pass data to</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>COMPONENTNODE</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Thu Sep 28 16:34:08 2006</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>No-op</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Evaluate Expression</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>2</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{6E468A38-A6F7-4371-B65B-501A3ED4C0D9}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>954 -820</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Sends all incoming records out the Pass port unchanged</sci:value>
						<sci:value>&lt;p&gt;Useful in subprotocols to capture the point of input. For example, if you wish to perform two different sequences of operations on the same input data, use No-op as the first component of the subprotocol and connect both pipes to the No-op output port.&lt;/p&gt;

&lt;p&gt;You can also use this component to simplify the layout for complex protocols. For example, if you have three Reader components that need to be connected to three Viewer components, placing a No-op in the middle reduces the number of required connections and clarifies the logic.&lt;/p&gt;
</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>6.0.1.1</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>19</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Utilities\Subprotocol Utilities\No-op</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.DataCacheIO.1">
				<sci:component name="Cache Reader" version="2">
					<sci:arg name="CacheID" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>The name of the cache to read, which should refer to a cache already written in the protocol containing this component.  Use the &lt;a href=&quot;javascript:DoLink(&apos;{B91EE521-C028-46BE-89A4-51CDE9877589}&apos;)&quot;&gt;Create Temporary CacheIDs&lt;/a&gt; component to provide an ID for temporary caches, then refer to the temporary ID with $(globalname)</sci:help>
						<sci:member>RangeMinimum</sci:member>
						<sci:member>RangeMaximum</sci:member>
						<sci:member>Scope</sci:member>
						<sci:member>JobId</sci:member>
						<sci:value>not tagged</sci:value>
					</sci:arg>
					<sci:arg name="RangeMinimum" type="LongType" required="false" visibility="visible" multi="false">
						<sci:help>The lower limit of data records to read from the cache. Numbering starts at 1.  A blank value or a value less than 1 means start reading at the first cached record.
               </sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="RangeMaximum" type="LongType" required="false" visibility="visible" multi="false">
						<sci:help>The upper limit of data records to read from the cache. Numbering starts at 1.  A blank value or a value less than 1 means read to the end of the set of cached records.
               </sci:help>
					</sci:arg>
					<sci:arg name="Scope" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>The scope of the cache determines the length of time the cache exists and 
the visibility of the cache to other jobs and users. Each scope has its own namespace, so you have to 
specify both the &lt;i&gt;CacheID&lt;/i&gt; and the &lt;i&gt;Scope&lt;/i&gt; to the same values as were used in the &lt;/i&gt;Cache Writer&lt;/i&gt;.
			</sci:help>
						<sci:legalval selected="true">Job Only</sci:legalval>
						<sci:legalval>User Only</sci:legalval>
						<sci:legalval>All Users</sci:legalval>
					</sci:arg>
					<sci:arg name="DeleteWhenFinished" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>If True, then delete the cache when finished reading</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>Additional parameters to control the component behavior.</sci:help>
						<sci:member>Read Globals</sci:member>
						<sci:member>Password</sci:member>
					</sci:arg>
					<sci:arg name="Read Globals" type="BoolType" required="false" visibility="visible" multi="false" uimpl="false">
						<sci:help>&lt;p&gt;Defines if the component should read globals from the cache.&lt;/p&gt;
&lt;p&gt;Any globals read from the cache will overwrite the existing globals.&lt;/p&gt;</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Password" type="xpass" encrypt="bf_1" required="false" visibility="visible" multi="false" legalvalsenforced="false">
						<sci:help>&lt;p&gt;Enter a password, if one was assigned when the cache was written.
&lt;/p&gt;
&lt;p&gt;Note that a password is not required, if the current user originally wrote the password-protected cache.
&lt;/p&gt;</sci:help>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval>ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="JobId" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>If the scope is set to &lt;I&gt;Job Only&lt;/I&gt;, then this is the job that owns the cache, if it is different from this job. The job must have been run by the same user as this job. If not specified, then the current job is assumed to contain the cache.
               </sci:help>
						<sci:enabledscript>parameter(&apos;Scope&apos;) eq &apos;Job Only&apos;</sci:enabledscript>
					</sci:arg>
					<sci:arg name="CacheCategory" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The cache type, that determines its folder location within the job.
               </sci:help>
					</sci:arg>
					<sci:arg name="Mode" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:help>Specifies the action of this component:

 - Writer: The component writes data records to a new cache.
 - Reader: The component reads data records from a pre-existing, completed cache.
 - Writer/Reader: The component writes data out to a cache and then reads it in again to generate new records.
               </sci:help>
						<sci:legalval>Writer</sci:legalval>
						<sci:legalval selected="true">Reader</sci:legalval>
						<sci:legalval>Writer/Reader</sci:legalval>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Mon Aug 28 09:15:02 2017</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
						<sci:help>Automatically update the component display name when the &quot;CacheID&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
						<sci:value>
#displayName := Parameter(&apos;CacheID&apos;, 2);
if(StrLength(#displayName) &gt; 0) then	
	&apos;Read cache &apos; . #displayName;
else
	&apos;&apos;;
end if;
			</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>90 -1020</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>DATABASENODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{704E3781-33EA-42BB-9099-05B44C3D08E6}</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Cache Reader</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Reads data records from a named cache</sci:value>
						<sci:value>&lt;p&gt;A data cache is a place where you can temporarily store data records without losing information.  This component is used to read data from a named cache created by the &lt;a href=&quot;javascript:DoLink(&apos;{674E3781-33EA-42BB-9099-49CB4C3D08E6}&apos;)&quot;&gt;Cache Writer&lt;/a&gt; component.&lt;/p&gt;

&lt;p&gt;Use &lt;i&gt;CacheID&lt;/i&gt; to specify the name of the cache to read.&lt;/p&gt;

&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;This component is typically used as a mechanism for retrieving temporary data stored within a protocol.&lt;/li&gt;
&lt;li&gt;To access a cache created in a different protocol, use &lt;i&gt;Scope&lt;/i&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;To join data from a cache to streaming data records use &lt;a href=&quot;javascript:DoLink(&apos;{BDEEEC41-E62B-4FDE-B0D0-8B9C96CA2497}&apos;)&quot;&gt;Join Data from Cache&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To list available caches use &lt;a href=&quot;javascript:DoLink(&apos;{704E3781-33EA-42BB-7077-05B44C3D08E6}&apos;)&quot;&gt;List Caches&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To delete a cache use &lt;a href=&quot;javascript:DoLink(&apos;{704E3781-33EA-42BB-9088-05B44C3D08E6}&apos;)&quot;&gt;Delete Cache&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;To create a temporary cacheID use &lt;a href=&quot;javascript:DoLink(&apos;{B91EE521-C028-46BE-89A4-51CDE9877589}&apos;)&quot;&gt;Create Temporary CacheIDs&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
						<sci:value>None</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>18.1.0.1563</sci:value>
					</sci:arg>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>9</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\File Readers\Cache Reader</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.JoinProperties.1">
				<sci:component name="Join Data from Cache" version="2">
					<sci:arg name="JoinUsing" type="PropertyNameType" required="true" visibility="visible" multi="false" expanded="true">
						<sci:help>The name of the property that identifies which records to join. When a record in the cache 
has the same value for this property as the incoming streaming data record, its properties and child 
nodes are added to the streaming record. Calculable properties can be used for the streaming data, but 
data in the cache must already contain stored properties to join.

If you provide a comma-separated list 
of property names, then by default all values must match. (You can control this behavior by changing 
JoinUsingListType.) Or, if you provide a property that is an array of values, then all values must match 
(and the source must provide the data in an array-based form.)</sci:help>
						<sci:member>JoinUsingListType</sci:member>
						<sci:member>IgnoreCase</sci:member>
						<sci:member>AcceptNonNumericStringsAsNumbers</sci:member>
						<sci:member>JoinPropertyType</sci:member>
						<sci:value>unique</sci:value>
					</sci:arg>
					<sci:arg name="JoinUsingListType" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;Indicates how &lt;i&gt;JoinUsing&lt;/i&gt; properties are interpreted when more than one property is listed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;UseFirstDefinedValue&lt;/i&gt;: Join using only the first property in the list with a defined value for a record.
&lt;li&gt;&lt;i&gt;UseAllValues&lt;/i&gt;: Joins using the concatentation of the values of all properties listed; a match occurs only when records share the same value for all the properties.
&lt;/ul&gt;</sci:help>
						<sci:legalval>UseFirstDefinedValue</sci:legalval>
						<sci:legalval selected="true">UseAllValues</sci:legalval>
					</sci:arg>
					<sci:arg name="JoinPropertyType" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>The data type of the join property</sci:help>
						<sci:legalval>IsNumeric</sci:legalval>
						<sci:legalval selected="true">IsText</sci:legalval>
						<sci:legalval>IsDate</sci:legalval>
					</sci:arg>
					<sci:arg name="IgnoreCase" type="BoolType" required="true" visibility="visible" multi="false">
						<sci:help>Consider lower-case and upper-case letters as equivalent when determining the identity of &lt;i&gt;JoinUsing&lt;/i&gt; property values.</sci:help>
						<sci:enabledscript>SetDisabledDetails(&apos;To enable, set JoinPropertyType to IsText&apos;);
Parameter(&apos;JoinPropertyType&apos;) eq &apos;IsText&apos;</sci:enabledscript>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="CacheID" type="StringType" required="true" visibility="visible" multi="false" expanded="true">
						<sci:help>The name of the cache that was written using the Cache Writer</sci:help>
						<sci:member>Scope</sci:member>
						<sci:value>tagged</sci:value>
					</sci:arg>
					<sci:arg name="Scope" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>The scope within which the cache we wish to join against exists.
&lt;ul&gt;
&lt;li&gt;&lt;I&gt;Job Only&lt;/I&gt; all caches created within the currently-running protocol.
&lt;li&gt;&lt;I&gt;User Only&lt;/I&gt; all caches created so that all jobs by that user can see them.
&lt;li&gt;&lt;I&gt;All Users&lt;/I&gt; all caches created by any user in the global scope. 
&lt;/ul&gt;</sci:help>
						<sci:legalval selected="true">Job Only</sci:legalval>
						<sci:legalval>User Only</sci:legalval>
						<sci:legalval>All Users</sci:legalval>
					</sci:arg>
					<sci:arg name="Join Behavior" type="GroupType" required="false" visibility="visible" multi="false" expanded="true">
						<sci:member>JoinOnto</sci:member>
						<sci:member>WhenJoiningOnto</sci:member>
						<sci:member>JoinAllNullString</sci:member>
						<sci:member>MultipleReferenceBehavior</sci:member>
						<sci:member>AppendNodes</sci:member>
					</sci:arg>
					<sci:arg name="JoinOnto" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;Indicates which data record will be output:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;ProcessData&lt;/i&gt;: The data streaming through the pipeline remains with properties and child nodes from the cache copied onto the record.
&lt;li&gt;&lt;i&gt;Reference&lt;/i&gt;: The data from the cache remains with properties and child nodes from the streaming data record copied onto the record.  Only data records that successfully join against the incoming data stream will be output.
&lt;/ul&gt;</sci:help>
						<sci:legalval selected="true">ProcessData</sci:legalval>
						<sci:legalval>Reference</sci:legalval>
					</sci:arg>
					<sci:arg name="WhenJoiningOnto" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;During the joining of two property lists, this parameter indicates how differences 
between the property lists are resolved.  
By default, the streaming input data (process data) serves 
as the base for a join and the cache data (reference data) is treated as the joining data (this distinction 
can be reversed using the &lt;i&gt;JoinOnto&lt;/i&gt; parameter).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;OverwriteOrCreate&lt;/i&gt;: 
Copies all properties from the joining data onto the base data, overwriting the values of any properties 
that already exist.
&lt;li&gt;&lt;i&gt;OverwriteExisting&lt;/i&gt;: Copies only those properties from 
the joining data to the base data that already exist on the base.
&lt;li&gt;&lt;i&gt;CreateIfNew&lt;/i&gt;: 
Copies only those properties from the joining data to the base data that do not already exist on the 
base data.
&lt;li&gt;&lt;i&gt;AppendOrCreate&lt;/i&gt;: The value of a joining property that already 
exists in the base data is appended  (as an array) to the value in the base property.  The other joining 
properties that are not already present in the base data are copied there.
&lt;li&gt;&lt;i&gt;AppendExisting&lt;/i&gt;: 
The value of a joining property that already exists in the base data is appended  (as an array) to the 
value in the base property.  No other properties are copied. 
&lt;li&gt;&lt;i&gt;GroupData&lt;/i&gt;: 
Creates a hierarchical group containing both the joining and base data.
&lt;/ul&gt;</sci:help>
						<sci:legalval>OverwriteOrCreate</sci:legalval>
						<sci:legalval>OverwriteExisting</sci:legalval>
						<sci:legalval>CreateIfNew</sci:legalval>
						<sci:legalval selected="true">AppendOrCreate</sci:legalval>
						<sci:legalval>AppendExisting</sci:legalval>
						<sci:legalval>GroupData</sci:legalval>
					</sci:arg>
					<sci:arg name="AppendNodes" type="BoolType" required="false" visibility="visible" multi="false">
						<sci:help>When joining data records that contain child nodes, whether to append the child nodes of the joining data onto the base data as determined by the &lt;i&gt;JoinOnto&lt;/i&gt; parameter.</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="MultipleReferenceBehavior" type="StringType" required="true" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;What to do if there are multiple records in the cache (reference data) with a matching 
value for the &lt;i&gt;JoinUsing&lt;/i&gt; property of an incoming streaming record.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i&gt;JoinFirst&lt;/i&gt;: 
Uses the first one found. 
&lt;li&gt;&lt;i&gt;JoinLast&lt;/i&gt;: Uses the last one found. 
&lt;li&gt;&lt;i&gt;JoinAll&lt;/i&gt;: 
Appends all values for each property together in an array. 
&lt;li&gt;&lt;i&gt;JoinTogether&lt;/i&gt;: 
Joins each of the matching records in the cache with the streaming record individually and independently, 
which results in multiple records output for one input record.
&lt;/ul&gt;</sci:help>
						<sci:legalval>JoinFirst</sci:legalval>
						<sci:legalval>JoinLast</sci:legalval>
						<sci:legalval>JoinAll</sci:legalval>
						<sci:legalval selected="true">JoinTogether</sci:legalval>
					</sci:arg>
					<sci:arg name="JoinAllNullString" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>&lt;p&gt;This string is used during append to pad out empty values when MultipleReferenceBehavior is set to  &quot;JoinAll&quot;. This keeps the generated arrays of values in sync for multiple references.&lt;/p&gt;
&lt;p&gt;The value &quot;None&quot; causes no padding to occur.&lt;/p&gt;</sci:help>
						<sci:enabledscript>SetDisabledDetails(&apos;To enable, set MultipleReferenceBehavior to JoinAll&apos;);
Parameter(&apos;MultipleReferenceBehavior&apos;) eq &apos;JoinAll&apos;</sci:enabledscript>
						<sci:value>None</sci:value>
					</sci:arg>
					<sci:arg name="Additional Options" type="GroupType" required="false" visibility="visible" multi="false">
						<sci:help>Contains less commonly used parameters</sci:help>
						<sci:member>Prefix</sci:member>
						<sci:member>GroupName</sci:member>
					</sci:arg>
					<sci:arg name="Prefix" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>A prefix to add to each property name as it is joined onto the streaming data (instead of overwriting or appending to the existing value).</sci:help>
					</sci:arg>
					<sci:arg name="GroupName" type="StringType" required="false" visibility="visible" multi="false">
						<sci:help>If &lt;i&gt;WhenJoiningOnto&lt;/i&gt; is set to &quot;GroupData&quot;, this is the name of the group node into which the results are placed</sci:help>
						<sci:enabledscript>SetDisabledDetails(&apos;To enable, set WhenJoiningOnto to GroupData&apos;);
Parameter(&apos;WhenJoiningOnto&apos;) eq &apos;GroupData&apos;</sci:enabledscript>
						<sci:value>Data</sci:value>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="PassDownParameters" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Parameters to pass on to the reader</sci:help>
						<sci:value>Scope</sci:value>
					</sci:arg>
					<sci:arg name="AcceptNonNumericStringsAsNumbers" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>Determines whether &lt;b&gt;all&lt;/b&gt; string values for the JoinUsing property -- even 
non-numeric ones such as &apos;abc&apos; or &apos;1.0c&apos; -- will be coerced to numbers when  JoinPropertyType 
is set to IsNumeric.  

If set to True, then a string such as &apos;abc&apos; that does not begin with 
a numeric portion will be coerced to zero, while a string such as &apos;1.0c&apos; that begins with a 
numeric portion will be coerced to the corresponding number (in this case 1.0).  

If set to False, then 
records containing non-numeric strings for the JoinUsing property will be sent out the Fail port.</sci:help>
						<sci:legalval>True</sci:legalval>
						<sci:legalval selected="true">False</sci:legalval>
					</sci:arg>
					<sci:arg name="Source" type="URLType" required="true" visibility="nevershow" multi="false">
						<sci:help>Names of data files, a learned model, or data cache ID, to join with the streaming data that enters this component. If multiple files are given, each is joined in sequence. (The Windows browser reverses the order of the files during selection, so you should select from last to first.)</sci:help>
						<sci:value>$(CacheID)</sci:value>
					</sci:arg>
					<sci:arg name="SourceFormat" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:help>The name of the reader to use for the join source. (For readers with particular parameters, you can create them and save them, then add their name to the options list for this protocol.  For example, you could create a Delimited Text with Commas and No Column Names component, save it to your tab, then add it to this list and select.)</sci:help>
						<sci:legalval>Delimited Text With Column Names</sci:legalval>
						<sci:legalval>Delimited Text No Column Names</sci:legalval>
						<sci:legalval>Comma Delimited With Column Names</sci:legalval>
						<sci:legalval>Tab Delimited With Column Names</sci:legalval>
						<sci:legalval>Space Delimited With Column Names</sci:legalval>
						<sci:legalval>Excel XLS With Column Names</sci:legalval>
						<sci:legalval>Excel XLS No Column Names</sci:legalval>
						<sci:legalval>MDL SD Format</sci:legalval>
						<sci:legalval>Learned Model Reader</sci:legalval>
						<sci:legalval selected="true">{704E3781-33EA-42BB-9099-05B44C3D08E6}</sci:legalval>
					</sci:arg>
					<sci:arg name="Keep Properties" type="PropertyPreviewType" required="false" visibility="nevershow" multi="false">
						<sci:help>A list of properties to join from the source file. If this value is not defined, all properties are joined into the record.</sci:help>
					</sci:arg>
					<sci:arg name="UseIndexFile" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>Uses an index file when performing the Join operation when set to &quot;True&quot;. An index file is created if it does not already exist; it is used to accelerate the join process.

 Note: This option is useful for optimizing join operations against a file that may be used many times, at the first time of use an index file can be created to speed accesses in subsequent uses.  This file is created in the same directory as the source file and is automatically used for any subsequent join.</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Tue Sep 13 07:03:53 2016</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{BDEEEC41-E62B-4FDE-B0D0-8B9C96CA2497}</sci:value>
					</sci:arg>
					<sci:arg name="CheckSyntax" type="BoolType" required="true" visibility="nevershow" multi="false">
						<sci:help>Whether to perform a quick syntax check at the beginning of the file when we open it, and if a problem is found, throw an error.</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="SourceComponent" type="ComponentType" required="false" visibility="nevershow" multi="false">
						<sci:help>Name of the data format of the Source file</sci:help>
						<sci:value>$(SourceFormat)</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
						<sci:help>Automatically update the component display name when the &quot;JoinUsing&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
						<sci:value>if (strlength(trim(parameter(&apos;JoinUsing&apos;, 2))) &gt; 0) then
	&quot;Join on &quot; . trim(parameter(&apos;JoinUsing&apos;, 2));
else
	&quot;&quot;;
end if;</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Join Data from File</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>JOINNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>378 -1020</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Augments data records with properties from data in a cache where specified property values match</sci:value>
						<sci:value>&lt;p&gt;For each incoming data record, a property value or set of values specified by 
&lt;i&gt;JoinUsing&lt;/i&gt; is used to identify matching records in the data cache created by the &lt;a 
href=&quot;javascript:DoLink(&apos;{674E3781-33EA-42BB-9099-49CB4C3D08E6}&apos;)&quot;&gt;Cache Writer&lt;/a&gt; 
specified by &lt;i&gt;CacheID&lt;/i&gt;.  Properties from these records are added to the incoming data 
record.  If no match is found, the record is sent out the Fail port.&lt;/p&gt;

&lt;p&gt;Records match 
if the value of the &lt;i&gt;JoinUsing&lt;/i&gt; property is the same for the incoming record as in the 
cache.  If multiple &lt;i&gt;JoinUsing&lt;/i&gt; properties are specified, the behavior depends on &lt;i&gt;JoinUsingListType&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;By 
default, this component expects the cache to have been created by the current job.  If the cache is outside 
the scope of the current job, update &lt;i&gt;Scope&lt;/i&gt; accordingly&lt;/p&gt;

&lt;b&gt;Notes:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;By 
default only properties are extracted from the matching records.  Use &lt;i&gt;JoinOnto&lt;/i&gt; to 
obtain additional information such as molecular data.&lt;/li&gt;
&lt;/ul&gt;

&lt;b&gt;See Also:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;Use 
&lt;a href=&quot;javascript:DoLink(&apos;{674E3781-33EA-42BB-9099-49CB4C3D08E6}&apos;)&quot;&gt;Cache 
Writer&lt;/a&gt; to create the data cache specified by &lt;i&gt;CacheID&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;Use 
&lt;a href=&quot;javascript:DoLink(&apos;{D24316C3-9D5C-4B5D-ADF3-28F258F11858}&apos;)&quot;&gt;Join 
Data from File&lt;/a&gt; to join against a source data file.&lt;/li&gt;
&lt;/ul&gt;</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value>Data records which received additional properties from the source file through a successful join.</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value>Data records for which no data was found in the source file.</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>17.1.0.119</sci:value>
					</sci:arg>
					<sci:arg name="ReplaceNullsInFirstRecord" type="BoolType" required="false" visibility="nevershow" multi="false" uimpl="false">
						<sci:help>Specifies whether to replace nulls in the first merged record when KeepAllNullString is specified.</sci:help>
						<sci:legalval selected="true">True</sci:legalval>
						<sci:legalval>False</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>7</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Data Manipulators\Join Data from Cache</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.PropertyFunctions.1">
				<sci:component name="Remove Properties" version="2">
					<sci:arg name="PropertyList" type="PropertyNameType" required="true" visibility="visible" multi="true">
						<sci:help>The names of properties to remove from each data record entering the component</sci:help>
						<sci:value>keyProperty</sci:value>
						<sci:value>unique</sci:value>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Custom Error Message</sci:help>
					</sci:arg>
					<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:help>the action to perform</sci:help>
						<sci:value>Remove</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Tue Sep 13 07:18:43 2016</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentAutoDisplayName" type="ExpressionType" required="false" visibility="nevershow" multi="false">
						<sci:help>Automatically update the component display name when the &quot;PropertyList&quot; property is changed. This feature is turned off after the user manually changes the display name of the component in Protocol workspace.</sci:help>
						<sci:value>#propertyList := Parameter(&apos;PropertyList&apos;);
#displayName := &apos;&apos;;
for #i in 1 .. numvalues(#propertyList) loop
  #prop := trim(#propertyList[#i]);
  if (strlength(#prop) &gt; 0) then
    if (strlength(#displayName) &gt; 0) then
	  #displayName .= &apos;, &apos;;
	end if;
    #displayName .= #prop;
  end if;
end loop;
if(strlength(#displayName) &gt; 0) then		
	&apos;Remove &apos; . #displayName;
else
	&quot;&quot;;
end if;</sci:value>
					</sci:arg>
					<sci:arg name="ProtocolAutoLayout" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol AutoLayout</sci:help>
						<sci:value>true</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>EXPRESSIONNODE</sci:value>
					</sci:arg>
					<sci:arg name="ComponentRevision" type="LongType" required="true" visibility="nevershow" multi="false">
						<sci:help>Component Revision</sci:help>
						<sci:value>100</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>SubProtocol</sci:value>
					</sci:arg>
					<sci:arg name="ProtocolScale" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Scale</sci:help>
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>666 -1195</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{C2ED35FF-5397-4877-AADB-10F1A15D60E2}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Removes the specified properties</sci:value>
						<sci:value>For each data record that enters the component, the properties specified by &lt;i&gt;PropertyList&lt;/i&gt; are removed from the  record. 

&lt;p&gt;&lt;b&gt;See Also:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;To keep only a few properties from a long list, it may be more efficient to instead use &lt;a href=&quot;javascript:DoLink(&apos;{456195EF-9708-4367-B3DD-21EBF3796604}&apos;)&quot;&gt;Keep Properties&lt;/a&gt;.&lt;/p&gt;</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value>Data records with the specified properties removed</sci:value>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>17.1.0.119</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ByReference" type="BoolType" required="false" visibility="nevershow" multi="false">
						<sci:help>By Ref</sci:help>
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>Protocol Sticky Notes</sci:help>
					</sci:arg>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>21</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Property Manipulators\Remove Properties</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:data object="SciTegic.PropertyFunctions.1">
				<sci:component name="No-op" version="2">
					<sci:arg name="DataActionOnError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When a General or DataType error occurs during processing:  
  LeaveData: The data is passed unalterd
  ClearData: The data is cleared before being passed (an empty data item)
  DeleteData: The data is deleted and not passed</sci:help>
						<sci:legalval selected="true">LeaveData</sci:legalval>
						<sci:legalval>ClearData</sci:legalval>
						<sci:legalval>DeleteData</sci:legalval>
					</sci:arg>
					<sci:arg name="ComponentAttributes" type="StringType" required="false" visibility="hidden" multi="true">
						<sci:help>Component Attributes</sci:help>
						<sci:legalval selected="true">ComponentTakesInput</sci:legalval>
						<sci:legalval selected="true">ComponentReturnsPass</sci:legalval>
						<sci:legalval>ComponentReturnsFail</sci:legalval>
						<sci:legalval>ComponentRunsLocal</sci:legalval>
					</sci:arg>
					<sci:arg name="OnDataTypeError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an expected data type is not found during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="OnGeneralError" type="StringType" required="true" visibility="hidden" multi="false">
						<sci:help>When an recoverable error occurs during processing:  
  Halt: Terminate the execution of the network
  Fail: Continue execution of the network, passing data out the Fail(red) port
  Pass: Continue execution of the network, passing data out the Pass(green) port</sci:help>
						<sci:legalval selected="true">Halt</sci:legalval>
						<sci:legalval>Fail</sci:legalval>
						<sci:legalval>Pass</sci:legalval>
					</sci:arg>
					<sci:arg name="CustomErrorText" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>CustomErrorText</sci:help>
					</sci:arg>
					<sci:arg name="Action" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:help>the action to perform</sci:help>
						<sci:value>PassDataToPort</sci:value>
					</sci:arg>
					<sci:arg name="Port" type="LongType" required="true" visibility="nevershow" multi="false">
						<sci:help>the port to pass data to</sci:help>
						<sci:value>1</sci:value>
					</sci:arg>
					<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
						<sci:value>COMPONENTNODE</sci:value>
					</sci:arg>
					<sci:arg name="Registrant" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The user who registered this component.</sci:help>
						<sci:value>scitegic/generic</sci:value>
					</sci:arg>
					<sci:arg name="RegistrationDate" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The date this component was registered.</sci:help>
						<sci:value>Thu Sep 28 16:34:08 2006</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisplayName" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>No-op</sci:value>
					</sci:arg>
					<sci:arg name="DerivedFrom" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The component this component is based upon.</sci:help>
						<sci:value>Evaluate Expression</sci:value>
					</sci:arg>
					<sci:arg name="ComponentDisabled" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:value>0</sci:value>
					</sci:arg>
					<sci:arg name="ComponentGUID" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>{6E468A38-A6F7-4371-B65B-501A3ED4C0D9}</sci:value>
					</sci:arg>
					<sci:arg name="ComponentPoint" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:value>954 -1195</sci:value>
					</sci:arg>
					<sci:arg name="ComponentHelp" type="StringType" required="false" visibility="nevershow" multi="true">
						<sci:value>100</sci:value>
						<sci:value>Sends all incoming records out the Pass port unchanged</sci:value>
						<sci:value>&lt;p&gt;Useful in subprotocols to capture the point of input. For example, if you wish to perform two different sequences of operations on the same input data, use No-op as the first component of the subprotocol and connect both pipes to the No-op output port.&lt;/p&gt;

&lt;p&gt;You can also use this component to simplify the layout for complex protocols. For example, if you have three Reader components that need to be connected to three Viewer components, placing a No-op in the middle reduces the number of required connections and clarifies the logic.&lt;/p&gt;
</sci:value>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>Generic</sci:value>
						<sci:value/>
						<sci:value>None</sci:value>
						<sci:value/>
					</sci:arg>
					<sci:arg name="RegistrationVersion" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The server version when this component was registered</sci:help>
						<sci:value>6.0.1.1</sci:value>
					</sci:arg>
					<sci:arg name="Component Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false"/>
					<sci:arg name="ComponentLocalID" type="LongType" required="false" visibility="nevershow" multi="false">
						<sci:help>Local Component Identifier</sci:help>
						<sci:value>18</sci:value>
					</sci:arg>
					<sci:arg name="Component Path" type="StringType" required="false" visibility="nevershow" multi="false">
						<sci:help>The original path within the database of this component.</sci:help>
						<sci:value>Components\Data Access and Manipulation\Utilities\Subprotocol Utilities\No-op</sci:value>
					</sci:arg>
				</sci:component>
			</sci:data>
			<sci:connectid from="13" to="6" type="true"/>
			<sci:connectid from="6" to="11" type="true"/>
			<sci:connectid from="6" to="10" type="false"/>
			<sci:connectid from="20" to="19" type="true"/>
			<sci:connectid from="9" to="7" type="true"/>
			<sci:connectid from="7" to="20" type="true"/>
			<sci:connectid from="7" to="21" type="false"/>
			<sci:connectid from="21" to="18" type="true"/>
			<sci:version iVal="1"/>
		</sci:protocol>
	</sci:dbitem>
<!-- Exported protocol -->
<sci:component name="8.0 Protocol Warning" version="2">
<sci:arg name="ComponentIcon" type="StringType" required="true" visibility="nevershow" multi="false">
<sci:help>Component Icon</sci:help>
<sci:value>PROTOCOLNODE</sci:value>
</sci:arg>
<sci:arg name="Protocol Sticky Notes" type="StringType" required="false" visibility="nevershow" multi="false">
<sci:help>Protocol Sticky Notes</sci:help>
<sci:value>%VERSION 3%</sci:value>
<sci:value>400 -219 1222 221</sci:value>
<sci:value>250 120 20</sci:value>
<sci:value>WARNING! This is a Pipeline Pilot protocol written in version 8.0 or later. It contains features that are not supported in earlier versions of Pipeline Pilot.</sci:value>
</sci:arg>
</sci:component>
</sci:data>
